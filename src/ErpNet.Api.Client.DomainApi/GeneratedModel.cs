using System;
using System.Collections.Generic;
using System.Threading.Tasks;
#pragma warning disable CS1591
namespace ErpNet.Api.Client.DomainApi
{
    public partial class Amount: ComplexTypeResource
    {
        public Amount(IDictionary<string, object?>? rawData = null): base(rawData) {}
        [ODataProperty]
        public Decimal? Value { get => GetPropertyValue<Decimal?>("Value"); set => SetPropertyValue<Decimal?>("Value", value); }
        [ODataProperty]
        public String? Currency { get => GetPropertyValue<String?>("Currency"); set => SetPropertyValue<String?>("Currency", value); }
    }
    namespace Applications
    {
        namespace AssetManagement
        {
            [Entity(EntitySet = "Applications_AssetManagement_MaintenanceOrders", TableName = "Eam_Maintenance_Orders")]
            public partial class MaintenanceOrder: General.Contacts.Activity
            {
                public MaintenanceOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_AssetManagement_MaintenanceOrders";
                public new const string EntityTableName = "Eam_Maintenance_Orders";
                [ODataProperty]
                public Applications.AssetManagement.MaintenanceType? MaintenanceType { get => GetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType"); set => SetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType", value); }
                [ODataProperty]
                public Applications.AssetManagement.ManagedAsset? ManagedAsset { get => GetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset"); set => SetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset", value); }
                [ODataProperty]
                public Applications.AssetManagement.ServiceCenter? ServiceCenter { get => GetPropertyValue<Applications.AssetManagement.ServiceCenter>("ServiceCenter"); set => SetPropertyValue<Applications.AssetManagement.ServiceCenter>("ServiceCenter", value); }
                [ODataProperty]
                public IEnumerable<Applications.AssetManagement.MaintenanceOrderLine>? Lines { get => GetCollection<Applications.AssetManagement.MaintenanceOrderLine>("Lines"); set => SetCollection<Applications.AssetManagement.MaintenanceOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_MaintenanceOrderLines", TableName = "Eam_Maintenance_Order_Lines")]
            public partial class MaintenanceOrderLine: EntityResource
            {
                public MaintenanceOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_MaintenanceOrderLines";
                public const string EntityTableName = "Eam_Maintenance_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public DateTime? NextServiceDate { get => GetPropertyValue<DateTime?>("NextServiceDate"); set => SetPropertyValue<DateTime?>("NextServiceDate", value); }
                [ODataProperty]
                public Int32? NextServiceTrackedParameterValue { get => GetPropertyValue<Int32?>("NextServiceTrackedParameterValue"); set => SetPropertyValue<Int32?>("NextServiceTrackedParameterValue", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public Applications.AssetManagement.MaintenanceOrder? MaintenanceOrder { get => GetPropertyValue<Applications.AssetManagement.MaintenanceOrder>("MaintenanceOrder"); set => SetPropertyValue<Applications.AssetManagement.MaintenanceOrder>("MaintenanceOrder", value); }
                [ODataProperty]
                public Applications.AssetManagement.MaintenanceOrder? Document { get => GetPropertyValue<Applications.AssetManagement.MaintenanceOrder>("Document"); set => SetPropertyValue<Applications.AssetManagement.MaintenanceOrder>("Document", value); }
                [ODataProperty]
                public Applications.AssetManagement.MaintenanceType? MaintenanceType { get => GetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType"); set => SetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType", value); }
                [ODataProperty]
                public Applications.AssetManagement.ManagedAsset? ManagedAsset { get => GetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset"); set => SetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_MaintenanceTypes", TableName = "Eam_Maintenance_Types")]
            public partial class MaintenanceType: EntityResource
            {
                public MaintenanceType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_MaintenanceTypes";
                public const string EntityTableName = "Eam_Maintenance_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? DefaultParameterChange { get => GetPropertyValue<Int32?>("DefaultParameterChange"); set => SetPropertyValue<Int32?>("DefaultParameterChange", value); }
                [ODataProperty]
                public Int32? DefaultScheduleDays { get => GetPropertyValue<Int32?>("DefaultScheduleDays"); set => SetPropertyValue<Int32?>("DefaultScheduleDays", value); }
                [ODataProperty]
                public Int32? DefaultScheduleMonths { get => GetPropertyValue<Int32?>("DefaultScheduleMonths"); set => SetPropertyValue<Int32?>("DefaultScheduleMonths", value); }
                [ODataProperty]
                public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Applications.AssetManagement.MaintenanceTypeGroup? MaintenanceTypeGroup { get => GetPropertyValue<Applications.AssetManagement.MaintenanceTypeGroup>("MaintenanceTypeGroup"); set => SetPropertyValue<Applications.AssetManagement.MaintenanceTypeGroup>("MaintenanceTypeGroup", value); }
                [ODataProperty]
                public Applications.AssetManagement.TrackedParameter? TrackedParameter { get => GetPropertyValue<Applications.AssetManagement.TrackedParameter>("TrackedParameter"); set => SetPropertyValue<Applications.AssetManagement.TrackedParameter>("TrackedParameter", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_MaintenanceTypeGroups", TableName = "Eam_Maintenance_Type_Groups")]
            public partial class MaintenanceTypeGroup: EntityResource
            {
                public MaintenanceTypeGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_MaintenanceTypeGroups";
                public const string EntityTableName = "Eam_Maintenance_Type_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Applications.AssetManagement.MaintenanceTypeGroup? Parent { get => GetPropertyValue<Applications.AssetManagement.MaintenanceTypeGroup>("Parent"); set => SetPropertyValue<Applications.AssetManagement.MaintenanceTypeGroup>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ManagedAssets", TableName = "Eam_Managed_Assets")]
            public partial class ManagedAsset: EntityResource
            {
                public ManagedAsset(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ManagedAssets";
                public const string EntityTableName = "Eam_Managed_Assets";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? RegistrationNumber { get => GetPropertyValue<String?>("RegistrationNumber"); set => SetPropertyValue<String?>("RegistrationNumber", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Applications.AssetManagement.ManagedAssetGroup? ManagedAssetGroup { get => GetPropertyValue<Applications.AssetManagement.ManagedAssetGroup>("ManagedAssetGroup"); set => SetPropertyValue<Applications.AssetManagement.ManagedAssetGroup>("ManagedAssetGroup", value); }
                [ODataProperty]
                public Applications.AssetManagement.ManagedAssetType? ManagedAssetType { get => GetPropertyValue<Applications.AssetManagement.ManagedAssetType>("ManagedAssetType"); set => SetPropertyValue<Applications.AssetManagement.ManagedAssetType>("ManagedAssetType", value); }
                [ODataProperty]
                public IEnumerable<Applications.AssetManagement.ManagedAssetLocation>? Locations { get => GetCollection<Applications.AssetManagement.ManagedAssetLocation>("Locations"); set => SetCollection<Applications.AssetManagement.ManagedAssetLocation>("Locations", value); }
                [ODataProperty]
                public IEnumerable<Applications.AssetManagement.ManagedAssetMaintenanceSchedule>? MaintenanceSchedules { get => GetCollection<Applications.AssetManagement.ManagedAssetMaintenanceSchedule>("MaintenanceSchedules"); set => SetCollection<Applications.AssetManagement.ManagedAssetMaintenanceSchedule>("MaintenanceSchedules", value); }
                [ODataProperty]
                public IEnumerable<Applications.AssetManagement.ManagedAssetParameterValue>? ParameterValues { get => GetCollection<Applications.AssetManagement.ManagedAssetParameterValue>("ParameterValues"); set => SetCollection<Applications.AssetManagement.ManagedAssetParameterValue>("ParameterValues", value); }
                [ODataProperty]
                public IEnumerable<Applications.AssetManagement.ManagedAssetScheduledMaintenance>? ScheduledMaintenances { get => GetCollection<Applications.AssetManagement.ManagedAssetScheduledMaintenance>("ScheduledMaintenances"); set => SetCollection<Applications.AssetManagement.ManagedAssetScheduledMaintenance>("ScheduledMaintenances", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ManagedAssetGroups", TableName = "Eam_Managed_Asset_Groups")]
            public partial class ManagedAssetGroup: EntityResource
            {
                public ManagedAssetGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ManagedAssetGroups";
                public const string EntityTableName = "Eam_Managed_Asset_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Applications.AssetManagement.ManagedAssetGroup? Parent { get => GetPropertyValue<Applications.AssetManagement.ManagedAssetGroup>("Parent"); set => SetPropertyValue<Applications.AssetManagement.ManagedAssetGroup>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ManagedAssetLocations", TableName = "Eam_Managed_Asset_Locations")]
            public partial class ManagedAssetLocation: EntityResource
            {
                public ManagedAssetLocation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ManagedAssetLocations";
                public const string EntityTableName = "Eam_Managed_Asset_Locations";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
                [Owner]
                [ODataProperty]
                public Applications.AssetManagement.ManagedAsset? ManagedAsset { get => GetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset"); set => SetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset", value); }
                [ODataProperty]
                public General.Contacts.Person? ResponsiblePerson { get => GetPropertyValue<General.Contacts.Person>("ResponsiblePerson"); set => SetPropertyValue<General.Contacts.Person>("ResponsiblePerson", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ManagedAssetMaintenanceSchedules", TableName = "Eam_Managed_Asset_Maintenance_Schedules")]
            public partial class ManagedAssetMaintenanceSchedule: EntityResource
            {
                public ManagedAssetMaintenanceSchedule(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ManagedAssetMaintenanceSchedules";
                public const string EntityTableName = "Eam_Managed_Asset_Maintenance_Schedules";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ParameterChangeDelta { get => GetPropertyValue<Int32?>("ParameterChangeDelta"); set => SetPropertyValue<Int32?>("ParameterChangeDelta", value); }
                [ODataProperty]
                public Int32? ScheduleDays { get => GetPropertyValue<Int32?>("ScheduleDays"); set => SetPropertyValue<Int32?>("ScheduleDays", value); }
                [ODataProperty]
                public Int32? ScheduleMonths { get => GetPropertyValue<Int32?>("ScheduleMonths"); set => SetPropertyValue<Int32?>("ScheduleMonths", value); }
                [ODataProperty]
                public Applications.AssetManagement.MaintenanceType? MaintenanceType { get => GetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType"); set => SetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType", value); }
                [Owner]
                [ODataProperty]
                public Applications.AssetManagement.ManagedAsset? ManagedAsset { get => GetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset"); set => SetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ManagedAssetParameterValues", TableName = "Eam_Managed_Asset_Parameter_Values")]
            public partial class ManagedAssetParameterValue: EntityResource
            {
                public ManagedAssetParameterValue(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ManagedAssetParameterValues";
                public const string EntityTableName = "Eam_Managed_Asset_Parameter_Values";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? TimeUtc { get => GetPropertyValue<DateTime?>("TimeUtc"); set => SetPropertyValue<DateTime?>("TimeUtc", value); }
                [ODataProperty]
                public Int32? Value { get => GetPropertyValue<Int32?>("Value"); set => SetPropertyValue<Int32?>("Value", value); }
                [Owner]
                [ODataProperty]
                public Applications.AssetManagement.ManagedAsset? ManagedAsset { get => GetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset"); set => SetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset", value); }
                [ODataProperty]
                public Applications.AssetManagement.TrackedParameter? TrackedParameter { get => GetPropertyValue<Applications.AssetManagement.TrackedParameter>("TrackedParameter"); set => SetPropertyValue<Applications.AssetManagement.TrackedParameter>("TrackedParameter", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ManagedAssetScheduledMaintenances", TableName = "Eam_Managed_Asset_Scheduled_Maintenances")]
            public partial class ManagedAssetScheduledMaintenance: EntityResource
            {
                public ManagedAssetScheduledMaintenance(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ManagedAssetScheduledMaintenances";
                public const string EntityTableName = "Eam_Managed_Asset_Scheduled_Maintenances";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? Date { get => GetPropertyValue<DateTime?>("Date"); set => SetPropertyValue<DateTime?>("Date", value); }
                [ODataProperty]
                public Boolean? IsDismissed { get => GetPropertyValue<Boolean?>("IsDismissed"); set => SetPropertyValue<Boolean?>("IsDismissed", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? TrackedParameterValue { get => GetPropertyValue<Int32?>("TrackedParameterValue"); set => SetPropertyValue<Int32?>("TrackedParameterValue", value); }
                [ODataProperty]
                public Applications.AssetManagement.MaintenanceType? MaintenanceType { get => GetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType"); set => SetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType", value); }
                [Owner]
                [ODataProperty]
                public Applications.AssetManagement.ManagedAsset? ManagedAsset { get => GetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset"); set => SetPropertyValue<Applications.AssetManagement.ManagedAsset>("ManagedAsset", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ManagedAssetTypes", TableName = "Eam_Managed_Asset_Types")]
            public partial class ManagedAssetType: EntityResource
            {
                public ManagedAssetType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ManagedAssetTypes";
                public const string EntityTableName = "Eam_Managed_Asset_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public IEnumerable<Applications.AssetManagement.ManagedAssetTypeMaintenanceType>? MaintenanceTypes { get => GetCollection<Applications.AssetManagement.ManagedAssetTypeMaintenanceType>("MaintenanceTypes"); set => SetCollection<Applications.AssetManagement.ManagedAssetTypeMaintenanceType>("MaintenanceTypes", value); }
                [ODataProperty]
                public IEnumerable<Applications.AssetManagement.ManagedAssetTypeTrackedParameter>? TrackedParameters { get => GetCollection<Applications.AssetManagement.ManagedAssetTypeTrackedParameter>("TrackedParameters"); set => SetCollection<Applications.AssetManagement.ManagedAssetTypeTrackedParameter>("TrackedParameters", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ManagedAssetTypeMaintenanceTypes", TableName = "Eam_Managed_Asset_Type_Maintenance_Types")]
            public partial class ManagedAssetTypeMaintenanceType: EntityResource
            {
                public ManagedAssetTypeMaintenanceType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ManagedAssetTypeMaintenanceTypes";
                public const string EntityTableName = "Eam_Managed_Asset_Type_Maintenance_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? DefaultParameterChange { get => GetPropertyValue<Int32?>("DefaultParameterChange"); set => SetPropertyValue<Int32?>("DefaultParameterChange", value); }
                [ODataProperty]
                public Int32? DefaultScheduleDays { get => GetPropertyValue<Int32?>("DefaultScheduleDays"); set => SetPropertyValue<Int32?>("DefaultScheduleDays", value); }
                [ODataProperty]
                public Int32? DefaultScheduleMonths { get => GetPropertyValue<Int32?>("DefaultScheduleMonths"); set => SetPropertyValue<Int32?>("DefaultScheduleMonths", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Applications.AssetManagement.MaintenanceType? MaintenanceType { get => GetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType"); set => SetPropertyValue<Applications.AssetManagement.MaintenanceType>("MaintenanceType", value); }
                [Owner]
                [ODataProperty]
                public Applications.AssetManagement.ManagedAssetType? ManagedAssetType { get => GetPropertyValue<Applications.AssetManagement.ManagedAssetType>("ManagedAssetType"); set => SetPropertyValue<Applications.AssetManagement.ManagedAssetType>("ManagedAssetType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ManagedAssetTypeTrackedParameters", TableName = "Eam_Managed_Asset_Type_Tracked_Parameters")]
            public partial class ManagedAssetTypeTrackedParameter: EntityResource
            {
                public ManagedAssetTypeTrackedParameter(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ManagedAssetTypeTrackedParameters";
                public const string EntityTableName = "Eam_Managed_Asset_Type_Tracked_Parameters";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public Applications.AssetManagement.ManagedAssetType? ManagedAssetType { get => GetPropertyValue<Applications.AssetManagement.ManagedAssetType>("ManagedAssetType"); set => SetPropertyValue<Applications.AssetManagement.ManagedAssetType>("ManagedAssetType", value); }
                [ODataProperty]
                public Applications.AssetManagement.TrackedParameter? TrackedParameter { get => GetPropertyValue<Applications.AssetManagement.TrackedParameter>("TrackedParameter"); set => SetPropertyValue<Applications.AssetManagement.TrackedParameter>("TrackedParameter", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_ServiceCenters", TableName = "Eam_Service_Centers")]
            public partial class ServiceCenter: EntityResource
            {
                public ServiceCenter(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_ServiceCenters";
                public const string EntityTableName = "Eam_Service_Centers";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_AssetManagement_TrackedParameters", TableName = "Eam_Tracked_Parameters")]
            public partial class TrackedParameter: EntityResource
            {
                public TrackedParameter(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_AssetManagement_TrackedParameters";
                public const string EntityTableName = "Eam_Tracked_Parameters";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Cms
        {
            [Entity(EntitySet = "Applications_Cms_NewsWebModules", TableName = "Cms_News_Web_Modules")]
            public partial class NewsWebModule: Applications.Cms.WebModule
            {
                public NewsWebModule(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_Cms_NewsWebModules";
                public new const string EntityTableName = "Cms_News_Web_Modules";
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Cms_NewsWebModuleArticles", TableName = "Cms_News_Web_Module_Articles")]
            public partial class NewsWebModuleArticle: EntityResource
            {
                public NewsWebModuleArticle(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Cms_NewsWebModuleArticles";
                public const string EntityTableName = "Cms_News_Web_Module_Articles";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ArticleTextHtml { get => GetPropertyValue<String?>("ArticleTextHtml"); set => SetPropertyValue<String?>("ArticleTextHtml", value); }
                [ODataProperty]
                public Boolean? IsPublished { get => GetPropertyValue<Boolean?>("IsPublished"); set => SetPropertyValue<Boolean?>("IsPublished", value); }
                [ODataProperty]
                public String? LanguageCode { get => GetPropertyValue<String?>("LanguageCode"); set => SetPropertyValue<String?>("LanguageCode", value); }
                [ODataProperty]
                public DateTime? PublishDate { get => GetPropertyValue<DateTime?>("PublishDate"); set => SetPropertyValue<DateTime?>("PublishDate", value); }
                [ODataProperty]
                public Systems.External.PublicUser? AuthorPublicUser { get => GetPropertyValue<Systems.External.PublicUser>("AuthorPublicUser"); set => SetPropertyValue<Systems.External.PublicUser>("AuthorPublicUser", value); }
                [ODataProperty]
                public Applications.Cms.NewsWebModule? NewsWebModule { get => GetPropertyValue<Applications.Cms.NewsWebModule>("NewsWebModule"); set => SetPropertyValue<Applications.Cms.NewsWebModule>("NewsWebModule", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Cms_ProductCatalogWebModules", TableName = "Cms_Product_Catalog_Web_Modules")]
            public partial class ProductCatalogWebModule: Applications.Cms.WebModule
            {
                public ProductCatalogWebModule(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_Cms_ProductCatalogWebModules";
                public new const string EntityTableName = "Cms_Product_Catalog_Web_Modules";
                [ODataProperty]
                public General.Products.ProductCatalog? ProductCatalog { get => GetPropertyValue<General.Products.ProductCatalog>("ProductCatalog"); set => SetPropertyValue<General.Products.ProductCatalog>("ProductCatalog", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Cms_StaticWebModules", TableName = "Cms_Static_Web_Modules")]
            public partial class StaticWebModule: Applications.Cms.WebModule
            {
                public StaticWebModule(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_Cms_StaticWebModules";
                public new const string EntityTableName = "Cms_Static_Web_Modules";
                [ODataProperty]
                public String? ContentHtml { get => GetPropertyValue<String?>("ContentHtml"); set => SetPropertyValue<String?>("ContentHtml", value); }
                [ODataProperty]
                public String? LanguageCode { get => GetPropertyValue<String?>("LanguageCode"); set => SetPropertyValue<String?>("LanguageCode", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Cms_WebModules", TableName = "Cms_Web_Modules")]
            public partial class WebModule: EntityResource
            {
                public WebModule(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Cms_WebModules";
                public const string EntityTableName = "Cms_Web_Modules";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsPublished { get => GetPropertyValue<Boolean?>("IsPublished"); set => SetPropertyValue<Boolean?>("IsPublished", value); }
                [ODataProperty]
                public String? LocalUrl { get => GetPropertyValue<String?>("LocalUrl"); set => SetPropertyValue<String?>("LocalUrl", value); }
                [ODataProperty]
                public Byte[]? ModulePicture { get => GetPropertyValue<Byte[]?>("ModulePicture"); set => SetPropertyValue<Byte[]?>("ModulePicture", value); }
                [ODataProperty]
                public Applications.Cms.WebModulesRepository.ModuleType? ModuleType { get => GetPropertyValue<Applications.Cms.WebModulesRepository.ModuleType?>("ModuleType"); set => SetPropertyValue<Applications.Cms.WebModulesRepository.ModuleType?>("ModuleType", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Applications.Cms.WebModule? Parent { get => GetPropertyValue<Applications.Cms.WebModule>("Parent"); set => SetPropertyValue<Applications.Cms.WebModule>("Parent", value); }
                [Owner]
                [ODataProperty]
                public Applications.Cms.WebSite? WebSite { get => GetPropertyValue<Applications.Cms.WebSite>("WebSite"); set => SetPropertyValue<Applications.Cms.WebSite>("WebSite", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace WebModulesRepository
            {
                public enum ModuleType
                {
                    CategoryPage = 0,
                    Static = 1,
                    News = 2
                }
            }
            [Entity(EntitySet = "Applications_Cms_WebSites", TableName = "Cms_Web_Sites")]
            public partial class WebSite: EntityResource
            {
                public WebSite(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Cms_WebSites";
                public const string EntityTableName = "Cms_Web_Sites";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? BaseUrl { get => GetPropertyValue<String?>("BaseUrl"); set => SetPropertyValue<String?>("BaseUrl", value); }
                [ODataProperty]
                public Boolean? IsPublished { get => GetPropertyValue<Boolean?>("IsPublished"); set => SetPropertyValue<Boolean?>("IsPublished", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Systems.External.PublicUserList? PublicUserList { get => GetPropertyValue<Systems.External.PublicUserList>("PublicUserList"); set => SetPropertyValue<Systems.External.PublicUserList>("PublicUserList", value); }
                [ODataProperty]
                public IEnumerable<Applications.Cms.WebModule>? WebModules { get => GetCollection<Applications.Cms.WebModule>("WebModules"); set => SetCollection<Applications.Cms.WebModule>("WebModules", value); }
                [ODataProperty]
                public IEnumerable<Applications.Cms.WebSiteLanguage>? Languages { get => GetCollection<Applications.Cms.WebSiteLanguage>("Languages"); set => SetCollection<Applications.Cms.WebSiteLanguage>("Languages", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Cms_WebSiteLanguages", TableName = "Cms_Web_Site_Languages")]
            public partial class WebSiteLanguage: EntityResource
            {
                public WebSiteLanguage(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Cms_WebSiteLanguages";
                public const string EntityTableName = "Cms_Web_Site_Languages";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? LanguageCode { get => GetPropertyValue<String?>("LanguageCode"); set => SetPropertyValue<String?>("LanguageCode", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public Applications.Cms.WebSite? WebSite { get => GetPropertyValue<Applications.Cms.WebSite>("WebSite"); set => SetPropertyValue<Applications.Cms.WebSite>("WebSite", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace DataWarehouse
        {
            [Entity(EntitySet = "Applications_DataWarehouse_DataMeasures", TableName = "Dw_Data_Measures")]
            public partial class DataMeasure: EntityResource
            {
                public DataMeasure(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_DataWarehouse_DataMeasures";
                public const string EntityTableName = "Dw_Data_Measures";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Decimal? GreenZoneSpreadPercent { get => GetPropertyValue<Decimal?>("GreenZoneSpreadPercent"); set => SetPropertyValue<Decimal?>("GreenZoneSpreadPercent", value); }
                [ODataProperty]
                public Decimal? HorizontalTrendSpreadPercent { get => GetPropertyValue<Decimal?>("HorizontalTrendSpreadPercent"); set => SetPropertyValue<Decimal?>("HorizontalTrendSpreadPercent", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Applications.DataWarehouse.DataMeasuresRepository.Period? Period { get => GetPropertyValue<Applications.DataWarehouse.DataMeasuresRepository.Period?>("Period"); set => SetPropertyValue<Applications.DataWarehouse.DataMeasuresRepository.Period?>("Period", value); }
                [ODataProperty]
                public Applications.DataWarehouse.DataMeasureGroup? DataMeasureGroup { get => GetPropertyValue<Applications.DataWarehouse.DataMeasureGroup>("DataMeasureGroup"); set => SetPropertyValue<Applications.DataWarehouse.DataMeasureGroup>("DataMeasureGroup", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_DataWarehouse_DataMeasureGroups", TableName = "Dw_Data_Measure_Groups")]
            public partial class DataMeasureGroup: EntityResource
            {
                public DataMeasureGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_DataWarehouse_DataMeasureGroups";
                public const string EntityTableName = "Dw_Data_Measure_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Applications.DataWarehouse.DataMeasureGroup? Parent { get => GetPropertyValue<Applications.DataWarehouse.DataMeasureGroup>("Parent"); set => SetPropertyValue<Applications.DataWarehouse.DataMeasureGroup>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DataMeasuresRepository
            {
                public enum Period
                {
                    Day = 0,
                    Month = 1,
                    Quarter = 2,
                    Year = 3
                }
            }
            [Entity(EntitySet = "Applications_DataWarehouse_DataValues", TableName = "Dw_Data_Values")]
            public partial class DataValue: EntityResource
            {
                public DataValue(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_DataWarehouse_DataValues";
                public const string EntityTableName = "Dw_Data_Values";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? ActualValue { get => GetPropertyValue<Decimal?>("ActualValue"); set => SetPropertyValue<Decimal?>("ActualValue", value); }
                [ODataProperty]
                public DateTime? Date { get => GetPropertyValue<DateTime?>("Date"); set => SetPropertyValue<DateTime?>("Date", value); }
                [ODataProperty]
                public Decimal? TargetValue { get => GetPropertyValue<Decimal?>("TargetValue"); set => SetPropertyValue<Decimal?>("TargetValue", value); }
                [ODataProperty]
                public Applications.DataWarehouse.DataMeasure? DataMeasure { get => GetPropertyValue<Applications.DataWarehouse.DataMeasure>("DataMeasure"); set => SetPropertyValue<Applications.DataWarehouse.DataMeasure>("DataMeasure", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Fleet
        {
            [Entity(EntitySet = "Applications_Fleet_Crews", TableName = "Fleet_Crews")]
            public partial class Crew: EntityResource
            {
                public Crew(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_Crews";
                public const string EntityTableName = "Fleet_Crews";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [Owner]
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public IEnumerable<Applications.Fleet.CrewMember>? Members { get => GetCollection<Applications.Fleet.CrewMember>("Members"); set => SetCollection<Applications.Fleet.CrewMember>("Members", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_CrewMembers", TableName = "Fleet_Crew_Members")]
            public partial class CrewMember: EntityResource
            {
                public CrewMember(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_CrewMembers";
                public const string EntityTableName = "Fleet_Crew_Members";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? OrdinalPos { get => GetPropertyValue<Int32?>("OrdinalPos"); set => SetPropertyValue<Int32?>("OrdinalPos", value); }
                [Owner]
                [ODataProperty]
                public Applications.Fleet.Crew? Crew { get => GetPropertyValue<Applications.Fleet.Crew>("Crew"); set => SetPropertyValue<Applications.Fleet.Crew>("Crew", value); }
                [ODataProperty]
                public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_EquipmentTypes", TableName = "Fleet_Equipment_Types")]
            public partial class EquipmentType: EntityResource
            {
                public EquipmentType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_EquipmentTypes";
                public const string EntityTableName = "Fleet_Equipment_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_MaintenancePlans", TableName = "Fleet_Maintenance_Plans")]
            public partial class MaintenancePlan: EntityResource
            {
                public MaintenancePlan(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_MaintenancePlans";
                public const string EntityTableName = "Fleet_Maintenance_Plans";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? CheckDays { get => GetPropertyValue<Int32?>("CheckDays"); set => SetPropertyValue<Int32?>("CheckDays", value); }
                [ODataProperty]
                public Int32? CheckMonths { get => GetPropertyValue<Int32?>("CheckMonths"); set => SetPropertyValue<Int32?>("CheckMonths", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Int32? MileageKm { get => GetPropertyValue<Int32?>("MileageKm"); set => SetPropertyValue<Int32?>("MileageKm", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? TripCount { get => GetPropertyValue<Int32?>("TripCount"); set => SetPropertyValue<Int32?>("TripCount", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_MaintenanceProfiles", TableName = "Fleet_Maintenance_Profiles")]
            public partial class MaintenanceProfile: EntityResource
            {
                public MaintenanceProfile(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_MaintenanceProfiles";
                public const string EntityTableName = "Fleet_Maintenance_Profiles";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public IEnumerable<Applications.Fleet.MaintenanceProfilePlan>? Plans { get => GetCollection<Applications.Fleet.MaintenanceProfilePlan>("Plans"); set => SetCollection<Applications.Fleet.MaintenanceProfilePlan>("Plans", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_MaintenanceProfilePlans", TableName = "Fleet_Maintenance_Profile_Plans")]
            public partial class MaintenanceProfilePlan: EntityResource
            {
                public MaintenanceProfilePlan(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_MaintenanceProfilePlans";
                public const string EntityTableName = "Fleet_Maintenance_Profile_Plans";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Applications.Fleet.MaintenancePlan? MaintenancePlan { get => GetPropertyValue<Applications.Fleet.MaintenancePlan>("MaintenancePlan"); set => SetPropertyValue<Applications.Fleet.MaintenancePlan>("MaintenancePlan", value); }
                [Owner]
                [ODataProperty]
                public Applications.Fleet.MaintenanceProfile? MaintenanceProfile { get => GetPropertyValue<Applications.Fleet.MaintenanceProfile>("MaintenanceProfile"); set => SetPropertyValue<Applications.Fleet.MaintenanceProfile>("MaintenanceProfile", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_Trips", TableName = "Fleet_Trips")]
            public partial class Trip: General.Document
            {
                public Trip(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_Fleet_Trips";
                public new const string EntityTableName = "Fleet_Trips";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public Decimal? PrimaryVehicleEndingMileage { get => GetPropertyValue<Decimal?>("PrimaryVehicleEndingMileage"); set => SetPropertyValue<Decimal?>("PrimaryVehicleEndingMileage", value); }
                [ODataProperty]
                public Decimal? PrimaryVehicleStartingMileage { get => GetPropertyValue<Decimal?>("PrimaryVehicleStartingMileage"); set => SetPropertyValue<Decimal?>("PrimaryVehicleStartingMileage", value); }
                [ODataProperty]
                public Applications.Fleet.Crew? Crew { get => GetPropertyValue<Applications.Fleet.Crew>("Crew"); set => SetPropertyValue<Applications.Fleet.Crew>("Crew", value); }
                [ODataProperty]
                public Applications.Fleet.VehicleSet? VehicleSet { get => GetPropertyValue<Applications.Fleet.VehicleSet>("VehicleSet"); set => SetPropertyValue<Applications.Fleet.VehicleSet>("VehicleSet", value); }
                [ODataProperty]
                public IEnumerable<Applications.Fleet.TripSegment>? Segments { get => GetCollection<Applications.Fleet.TripSegment>("Segments"); set => SetCollection<Applications.Fleet.TripSegment>("Segments", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Applications_Fleet_TripSegments", TableName = "Fleet_Trip_Segments")]
            public partial class TripSegment: EntityResource
            {
                public TripSegment(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_TripSegments";
                public const string EntityTableName = "Fleet_Trip_Segments";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? EndingTimestamp { get => GetPropertyValue<DateTime?>("EndingTimestamp"); set => SetPropertyValue<DateTime?>("EndingTimestamp", value); }
                [ODataProperty]
                public Decimal? Mileage { get => GetPropertyValue<Decimal?>("Mileage"); set => SetPropertyValue<Decimal?>("Mileage", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? StartingTimestamp { get => GetPropertyValue<DateTime?>("StartingTimestamp"); set => SetPropertyValue<DateTime?>("StartingTimestamp", value); }
                [ODataProperty]
                public General.Geography.MapPoint? EndingMapPoint { get => GetPropertyValue<General.Geography.MapPoint>("EndingMapPoint"); set => SetPropertyValue<General.Geography.MapPoint>("EndingMapPoint", value); }
                [ODataProperty]
                public General.Geography.MapPoint? StartingMapPoint { get => GetPropertyValue<General.Geography.MapPoint>("StartingMapPoint"); set => SetPropertyValue<General.Geography.MapPoint>("StartingMapPoint", value); }
                [Owner]
                [ODataProperty]
                public Applications.Fleet.Trip? Trip { get => GetPropertyValue<Applications.Fleet.Trip>("Trip"); set => SetPropertyValue<Applications.Fleet.Trip>("Trip", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_Vehicles", TableName = "Fleet_Vehicles")]
            public partial class Vehicle: EntityResource
            {
                public Vehicle(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_Vehicles";
                public const string EntityTableName = "Fleet_Vehicles";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? ActiveFrom { get => GetPropertyValue<DateTime?>("ActiveFrom"); set => SetPropertyValue<DateTime?>("ActiveFrom", value); }
                [ODataProperty]
                public DateTime? ActiveTill { get => GetPropertyValue<DateTime?>("ActiveTill"); set => SetPropertyValue<DateTime?>("ActiveTill", value); }
                [ODataProperty]
                public Int32? AuthorityMaximumLadenMassKg { get => GetPropertyValue<Int32?>("AuthorityMaximumLadenMassKg"); set => SetPropertyValue<Int32?>("AuthorityMaximumLadenMassKg", value); }
                [ODataProperty]
                public Int32? CrewCount { get => GetPropertyValue<Int32?>("CrewCount"); set => SetPropertyValue<Int32?>("CrewCount", value); }
                [ODataProperty]
                public String? EngineIdentificationNumber { get => GetPropertyValue<String?>("EngineIdentificationNumber"); set => SetPropertyValue<String?>("EngineIdentificationNumber", value); }
                [ODataProperty]
                public Int32? EnginePowerhp { get => GetPropertyValue<Int32?>("EnginePowerhp"); set => SetPropertyValue<Int32?>("EnginePowerhp", value); }
                [ODataProperty]
                public Int32? EngineSizecc { get => GetPropertyValue<Int32?>("EngineSizecc"); set => SetPropertyValue<Int32?>("EngineSizecc", value); }
                [ODataProperty]
                public Int32? FuelCapacity { get => GetPropertyValue<Int32?>("FuelCapacity"); set => SetPropertyValue<Int32?>("FuelCapacity", value); }
                [ODataProperty]
                public Decimal? FuelCompsumption { get => GetPropertyValue<Decimal?>("FuelCompsumption"); set => SetPropertyValue<Decimal?>("FuelCompsumption", value); }
                [ODataProperty]
                public String? FuelType { get => GetPropertyValue<String?>("FuelType"); set => SetPropertyValue<String?>("FuelType", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public MultilanguageString? IssuingAuthority { get => GetPropertyValue<MultilanguageString?>("IssuingAuthority"); set => SetPropertyValue<MultilanguageString?>("IssuingAuthority", value); }
                [ODataProperty]
                public MultilanguageString? Make { get => GetPropertyValue<MultilanguageString?>("Make"); set => SetPropertyValue<MultilanguageString?>("Make", value); }
                [ODataProperty]
                public Int32? ManufactureYear { get => GetPropertyValue<Int32?>("ManufactureYear"); set => SetPropertyValue<Int32?>("ManufactureYear", value); }
                [ODataProperty]
                public Int32? MaximumSpeedKmH { get => GetPropertyValue<Int32?>("MaximumSpeedKmH"); set => SetPropertyValue<Int32?>("MaximumSpeedKmH", value); }
                [ODataProperty]
                public MultilanguageString? Model { get => GetPropertyValue<MultilanguageString?>("Model"); set => SetPropertyValue<MultilanguageString?>("Model", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public MultilanguageString? PrimaryColor { get => GetPropertyValue<MultilanguageString?>("PrimaryColor"); set => SetPropertyValue<MultilanguageString?>("PrimaryColor", value); }
                [ODataProperty]
                public Int32? SeatingPlacesCount { get => GetPropertyValue<Int32?>("SeatingPlacesCount"); set => SetPropertyValue<Int32?>("SeatingPlacesCount", value); }
                [ODataProperty]
                public Int32? StandingPlacesCount { get => GetPropertyValue<Int32?>("StandingPlacesCount"); set => SetPropertyValue<Int32?>("StandingPlacesCount", value); }
                [ODataProperty]
                public Int32? TechnicalMaximumLadenMassKg { get => GetPropertyValue<Int32?>("TechnicalMaximumLadenMassKg"); set => SetPropertyValue<Int32?>("TechnicalMaximumLadenMassKg", value); }
                [ODataProperty]
                public Int32? TrainsetMaximumLadenMassKg { get => GetPropertyValue<Int32?>("TrainsetMaximumLadenMassKg"); set => SetPropertyValue<Int32?>("TrainsetMaximumLadenMassKg", value); }
                [ODataProperty]
                public String? VehicleIdentificationNumber { get => GetPropertyValue<String?>("VehicleIdentificationNumber"); set => SetPropertyValue<String?>("VehicleIdentificationNumber", value); }
                [ODataProperty]
                public Int32? VehicleMassKg { get => GetPropertyValue<Int32?>("VehicleMassKg"); set => SetPropertyValue<Int32?>("VehicleMassKg", value); }
                [ODataProperty]
                public String? VehicleRegistrationNumber { get => GetPropertyValue<String?>("VehicleRegistrationNumber"); set => SetPropertyValue<String?>("VehicleRegistrationNumber", value); }
                [ODataProperty]
                public MultilanguageString? VehicleType { get => GetPropertyValue<MultilanguageString?>("VehicleType"); set => SetPropertyValue<MultilanguageString?>("VehicleType", value); }
                [ODataProperty]
                public General.MeasurementUnit? FuelMeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("FuelMeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("FuelMeasurementUnit", value); }
                [ODataProperty]
                public Applications.Fleet.MaintenanceProfile? MaintenanceProfile { get => GetPropertyValue<Applications.Fleet.MaintenanceProfile>("MaintenanceProfile"); set => SetPropertyValue<Applications.Fleet.MaintenanceProfile>("MaintenanceProfile", value); }
                [ODataProperty]
                public General.MeasurementUnit? OperationalMeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("OperationalMeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("OperationalMeasurementUnit", value); }
                [ODataProperty]
                public General.Contacts.Party? OwnerParty { get => GetPropertyValue<General.Contacts.Party>("OwnerParty"); set => SetPropertyValue<General.Contacts.Party>("OwnerParty", value); }
                [ODataProperty]
                public IEnumerable<Applications.Fleet.VehicleEquipment>? Equipment { get => GetCollection<Applications.Fleet.VehicleEquipment>("Equipment"); set => SetCollection<Applications.Fleet.VehicleEquipment>("Equipment", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Shipment.TransportationVehicle>? TransportationVehicles { get => GetCollection<Logistics.Shipment.TransportationVehicle>("TransportationVehicles"); set => SetCollection<Logistics.Shipment.TransportationVehicle>("TransportationVehicles", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_VehicleAlerts", TableName = "Fleet_Vehicle_Alerts")]
            public partial class VehicleAlert: EntityResource
            {
                public VehicleAlert(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_VehicleAlerts";
                public const string EntityTableName = "Fleet_Vehicle_Alerts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? AlertType { get => GetPropertyValue<String?>("AlertType"); set => SetPropertyValue<String?>("AlertType", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Boolean? IsHidden { get => GetPropertyValue<Boolean?>("IsHidden"); set => SetPropertyValue<Boolean?>("IsHidden", value); }
                [ODataProperty]
                public String? Source { get => GetPropertyValue<String?>("Source"); set => SetPropertyValue<String?>("Source", value); }
                [ODataProperty]
                public DateTime? Time { get => GetPropertyValue<DateTime?>("Time"); set => SetPropertyValue<DateTime?>("Time", value); }
                [ODataProperty]
                public Applications.Fleet.Vehicle? Vehicle { get => GetPropertyValue<Applications.Fleet.Vehicle>("Vehicle"); set => SetPropertyValue<Applications.Fleet.Vehicle>("Vehicle", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_VehicleEquipment", TableName = "Fleet_Vehicle_Equipment")]
            public partial class VehicleEquipment: EntityResource
            {
                public VehicleEquipment(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_VehicleEquipment";
                public const string EntityTableName = "Fleet_Vehicle_Equipment";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? EndDate { get => GetPropertyValue<DateTime?>("EndDate"); set => SetPropertyValue<DateTime?>("EndDate", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? Quantity { get => GetPropertyValue<Int32?>("Quantity"); set => SetPropertyValue<Int32?>("Quantity", value); }
                [ODataProperty]
                public DateTime? StartDate { get => GetPropertyValue<DateTime?>("StartDate"); set => SetPropertyValue<DateTime?>("StartDate", value); }
                [ODataProperty]
                public Applications.Fleet.EquipmentType? EquipmentType { get => GetPropertyValue<Applications.Fleet.EquipmentType>("EquipmentType"); set => SetPropertyValue<Applications.Fleet.EquipmentType>("EquipmentType", value); }
                [Owner]
                [ODataProperty]
                public Applications.Fleet.Vehicle? Vehicle { get => GetPropertyValue<Applications.Fleet.Vehicle>("Vehicle"); set => SetPropertyValue<Applications.Fleet.Vehicle>("Vehicle", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_VehicleLocationHistoryRecords", TableName = "Fleet_Vehicle_Location_History_Records")]
            public partial class VehicleLocationHistoryRecord: EntityResource
            {
                public VehicleLocationHistoryRecord(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_VehicleLocationHistoryRecords";
                public const string EntityTableName = "Fleet_Vehicle_Location_History_Records";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? CurrentSpeedKmH { get => GetPropertyValue<Int32?>("CurrentSpeedKmH"); set => SetPropertyValue<Int32?>("CurrentSpeedKmH", value); }
                [ODataProperty]
                public Decimal? Latitude { get => GetPropertyValue<Decimal?>("Latitude"); set => SetPropertyValue<Decimal?>("Latitude", value); }
                [ODataProperty]
                public Decimal? Longitude { get => GetPropertyValue<Decimal?>("Longitude"); set => SetPropertyValue<Decimal?>("Longitude", value); }
                [ODataProperty]
                public DateTime? Time { get => GetPropertyValue<DateTime?>("Time"); set => SetPropertyValue<DateTime?>("Time", value); }
                [ODataProperty]
                public Applications.Fleet.Vehicle? Vehicle { get => GetPropertyValue<Applications.Fleet.Vehicle>("Vehicle"); set => SetPropertyValue<Applications.Fleet.Vehicle>("Vehicle", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_VehicleMaintenancePlanAssignments", TableName = "Fleet_Vehicle_Maintenance_Plan_Assignments")]
            public partial class VehicleMaintenancePlanAssignment: EntityResource
            {
                public VehicleMaintenancePlanAssignment(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_VehicleMaintenancePlanAssignments";
                public const string EntityTableName = "Fleet_Vehicle_Maintenance_Plan_Assignments";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Int32? LastMaintenanceMileageKm { get => GetPropertyValue<Int32?>("LastMaintenanceMileageKm"); set => SetPropertyValue<Int32?>("LastMaintenanceMileageKm", value); }
                [ODataProperty]
                public Int32? LastMaintenanceTripCount { get => GetPropertyValue<Int32?>("LastMaintenanceTripCount"); set => SetPropertyValue<Int32?>("LastMaintenanceTripCount", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? StartingDate { get => GetPropertyValue<DateTime?>("StartingDate"); set => SetPropertyValue<DateTime?>("StartingDate", value); }
                [ODataProperty]
                public Applications.Fleet.MaintenancePlan? MaintenancePlan { get => GetPropertyValue<Applications.Fleet.MaintenancePlan>("MaintenancePlan"); set => SetPropertyValue<Applications.Fleet.MaintenancePlan>("MaintenancePlan", value); }
                [ODataProperty]
                public Applications.Fleet.Vehicle? Vehicle { get => GetPropertyValue<Applications.Fleet.Vehicle>("Vehicle"); set => SetPropertyValue<Applications.Fleet.Vehicle>("Vehicle", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_VehicleObdTroubles", TableName = "Fleet_Vehicle_Obd_Troubles")]
            public partial class VehicleObdTrouble: EntityResource
            {
                public VehicleObdTrouble(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_VehicleObdTroubles";
                public const string EntityTableName = "Fleet_Vehicle_Obd_Troubles";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Details { get => GetPropertyValue<String?>("Details"); set => SetPropertyValue<String?>("Details", value); }
                [ODataProperty]
                public String? DiagnosticTroubleCode { get => GetPropertyValue<String?>("DiagnosticTroubleCode"); set => SetPropertyValue<String?>("DiagnosticTroubleCode", value); }
                [ODataProperty]
                public String? ManufacturerTroubleCode { get => GetPropertyValue<String?>("ManufacturerTroubleCode"); set => SetPropertyValue<String?>("ManufacturerTroubleCode", value); }
                [ODataProperty]
                public DateTime? OccurenceDateTime { get => GetPropertyValue<DateTime?>("OccurenceDateTime"); set => SetPropertyValue<DateTime?>("OccurenceDateTime", value); }
                [ODataProperty]
                public Applications.Fleet.Vehicle? Vehicle { get => GetPropertyValue<Applications.Fleet.Vehicle>("Vehicle"); set => SetPropertyValue<Applications.Fleet.Vehicle>("Vehicle", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_VehicleSets", TableName = "Fleet_Vehicle_Sets")]
            public partial class VehicleSet: EntityResource
            {
                public VehicleSet(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_VehicleSets";
                public const string EntityTableName = "Fleet_Vehicle_Sets";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [Owner]
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public IEnumerable<Applications.Fleet.VehicleSetVehicle>? Vehicles { get => GetCollection<Applications.Fleet.VehicleSetVehicle>("Vehicles"); set => SetCollection<Applications.Fleet.VehicleSetVehicle>("Vehicles", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Fleet_VehicleSetVehicles", TableName = "Fleet_Vehicle_Set_Vehicles")]
            public partial class VehicleSetVehicle: EntityResource
            {
                public VehicleSetVehicle(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Fleet_VehicleSetVehicles";
                public const string EntityTableName = "Fleet_Vehicle_Set_Vehicles";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? OrdinalPos { get => GetPropertyValue<Int32?>("OrdinalPos"); set => SetPropertyValue<Int32?>("OrdinalPos", value); }
                [ODataProperty]
                public Applications.Fleet.Vehicle? Vehicle { get => GetPropertyValue<Applications.Fleet.Vehicle>("Vehicle"); set => SetPropertyValue<Applications.Fleet.Vehicle>("Vehicle", value); }
                [Owner]
                [ODataProperty]
                public Applications.Fleet.VehicleSet? VehicleSet { get => GetPropertyValue<Applications.Fleet.VehicleSet>("VehicleSet"); set => SetPropertyValue<Applications.Fleet.VehicleSet>("VehicleSet", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Mail
        {
            [Entity(EntitySet = "Applications_Mail_Boxes", TableName = "Mail_Boxes")]
            public partial class Box: EntityResource
            {
                public Box(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Mail_Boxes";
                public const string EntityTableName = "Mail_Boxes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public String? EmailAddress { get => GetPropertyValue<String?>("EmailAddress"); set => SetPropertyValue<String?>("EmailAddress", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public Boolean? IsEncrypted { get => GetPropertyValue<Boolean?>("IsEncrypted"); set => SetPropertyValue<Boolean?>("IsEncrypted", value); }
                [ODataProperty]
                public Boolean? ResetOnNextSync { get => GetPropertyValue<Boolean?>("ResetOnNextSync"); set => SetPropertyValue<Boolean?>("ResetOnNextSync", value); }
                [ODataProperty]
                public String? SendServerAddress { get => GetPropertyValue<String?>("SendServerAddress"); set => SetPropertyValue<String?>("SendServerAddress", value); }
                [ODataProperty]
                public String? SentItemsFolderName { get => GetPropertyValue<String?>("SentItemsFolderName"); set => SetPropertyValue<String?>("SentItemsFolderName", value); }
                [ODataProperty]
                public String? SignatureHtml { get => GetPropertyValue<String?>("SignatureHtml"); set => SetPropertyValue<String?>("SignatureHtml", value); }
                [ODataProperty]
                public String? SyncPassword { get => GetPropertyValue<String?>("SyncPassword"); set => SetPropertyValue<String?>("SyncPassword", value); }
                [ODataProperty]
                public Applications.Mail.BoxesRepository.SyncProtocol? SyncProtocol { get => GetPropertyValue<Applications.Mail.BoxesRepository.SyncProtocol?>("SyncProtocol"); set => SetPropertyValue<Applications.Mail.BoxesRepository.SyncProtocol?>("SyncProtocol", value); }
                [ODataProperty]
                public String? SyncServerAddress { get => GetPropertyValue<String?>("SyncServerAddress"); set => SetPropertyValue<String?>("SyncServerAddress", value); }
                [ODataProperty]
                public String? SyncUserName { get => GetPropertyValue<String?>("SyncUserName"); set => SetPropertyValue<String?>("SyncUserName", value); }
                [ODataProperty]
                public Systems.Security.User? OwnerUser { get => GetPropertyValue<Systems.Security.User>("OwnerUser"); set => SetPropertyValue<Systems.Security.User>("OwnerUser", value); }
                [ODataProperty]
                public IEnumerable<Applications.Mail.BoxFolder>? Folders { get => GetCollection<Applications.Mail.BoxFolder>("Folders"); set => SetCollection<Applications.Mail.BoxFolder>("Folders", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace BoxesRepository
            {
                public enum SyncProtocol
                {
                    Recommended = 0,
                    POP3 = 1,
                    MicrosoftExchange = 2
                }
            }
            [Entity(EntitySet = "Applications_Mail_BoxFolders", TableName = "Mail_Box_Folders")]
            public partial class BoxFolder: EntityResource
            {
                public BoxFolder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Mail_BoxFolders";
                public const string EntityTableName = "Mail_Box_Folders";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? FolderName { get => GetPropertyValue<MultilanguageString?>("FolderName"); set => SetPropertyValue<MultilanguageString?>("FolderName", value); }
                [ODataProperty]
                public String? ServerFolderID { get => GetPropertyValue<String?>("ServerFolderID"); set => SetPropertyValue<String?>("ServerFolderID", value); }
                [ODataProperty]
                public String? SyncState { get => GetPropertyValue<String?>("SyncState"); set => SetPropertyValue<String?>("SyncState", value); }
                [ODataProperty]
                public Applications.Mail.BoxFoldersRepository.SystemPurpose? SystemPurpose { get => GetPropertyValue<Applications.Mail.BoxFoldersRepository.SystemPurpose?>("SystemPurpose"); set => SetPropertyValue<Applications.Mail.BoxFoldersRepository.SystemPurpose?>("SystemPurpose", value); }
                [Owner]
                [ODataProperty]
                public Applications.Mail.Box? MailBox { get => GetPropertyValue<Applications.Mail.Box>("MailBox"); set => SetPropertyValue<Applications.Mail.Box>("MailBox", value); }
                [ODataProperty]
                public Applications.Mail.BoxFolder? ParentFolder { get => GetPropertyValue<Applications.Mail.BoxFolder>("ParentFolder"); set => SetPropertyValue<Applications.Mail.BoxFolder>("ParentFolder", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace BoxFoldersRepository
            {
                public enum SystemPurpose
                {
                    Mailbox = 0,
                    Inbox = 1,
                    Drafts = 2,
                    Outbox = 3,
                    Sent = 4,
                    Trash = 5
                }
            }
            [Entity(EntitySet = "Applications_Mail_Messages", TableName = "Mail_Messages")]
            public partial class Message: EntityResource
            {
                public Message(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Mail_Messages";
                public const string EntityTableName = "Mail_Messages";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Body { get => GetPropertyValue<String?>("Body"); set => SetPropertyValue<String?>("Body", value); }
                [ODataProperty]
                public String? CcEmailAddressList { get => GetPropertyValue<String?>("CcEmailAddressList"); set => SetPropertyValue<String?>("CcEmailAddressList", value); }
                [ODataProperty]
                public DateTime? CreationDateTime { get => GetPropertyValue<DateTime?>("CreationDateTime"); set => SetPropertyValue<DateTime?>("CreationDateTime", value); }
                [ODataProperty]
                public String? FromEmailAddress { get => GetPropertyValue<String?>("FromEmailAddress"); set => SetPropertyValue<String?>("FromEmailAddress", value); }
                [ODataProperty]
                public Boolean? IsEncrypted { get => GetPropertyValue<Boolean?>("IsEncrypted"); set => SetPropertyValue<Boolean?>("IsEncrypted", value); }
                [ODataProperty]
                public Boolean? IsRead { get => GetPropertyValue<Boolean?>("IsRead"); set => SetPropertyValue<Boolean?>("IsRead", value); }
                [ODataProperty]
                public DateTime? ReceivedDateTime { get => GetPropertyValue<DateTime?>("ReceivedDateTime"); set => SetPropertyValue<DateTime?>("ReceivedDateTime", value); }
                [ODataProperty]
                public DateTime? SentDateTime { get => GetPropertyValue<DateTime?>("SentDateTime"); set => SetPropertyValue<DateTime?>("SentDateTime", value); }
                [ODataProperty]
                public String? ServerMessageID { get => GetPropertyValue<String?>("ServerMessageID"); set => SetPropertyValue<String?>("ServerMessageID", value); }
                [ODataProperty]
                public String? Subject { get => GetPropertyValue<String?>("Subject"); set => SetPropertyValue<String?>("Subject", value); }
                [ODataProperty]
                public String? ToEmailAddressList { get => GetPropertyValue<String?>("ToEmailAddressList"); set => SetPropertyValue<String?>("ToEmailAddressList", value); }
                [ODataProperty]
                public Applications.Mail.BoxFolder? MailBoxFolder { get => GetPropertyValue<Applications.Mail.BoxFolder>("MailBoxFolder"); set => SetPropertyValue<Applications.Mail.BoxFolder>("MailBoxFolder", value); }
                [ODataProperty]
                public General.Contacts.Party? RelatedToParty { get => GetPropertyValue<General.Contacts.Party>("RelatedToParty"); set => SetPropertyValue<General.Contacts.Party>("RelatedToParty", value); }
                [ODataProperty]
                public IEnumerable<Applications.Mail.MessageAttachment>? Attachments { get => GetCollection<Applications.Mail.MessageAttachment>("Attachments"); set => SetCollection<Applications.Mail.MessageAttachment>("Attachments", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Mail_MessageAttachments", TableName = "Mail_Message_Attachments")]
            public partial class MessageAttachment: EntityResource
            {
                public MessageAttachment(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Mail_MessageAttachments";
                public const string EntityTableName = "Mail_Message_Attachments";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Byte[]? AttachmentContent { get => GetPropertyValue<Byte[]?>("AttachmentContent"); set => SetPropertyValue<Byte[]?>("AttachmentContent", value); }
                [ODataProperty]
                public String? ContentDescriptors { get => GetPropertyValue<String?>("ContentDescriptors"); set => SetPropertyValue<String?>("ContentDescriptors", value); }
                [ODataProperty]
                public Boolean? ContentDownloaded { get => GetPropertyValue<Boolean?>("ContentDownloaded"); set => SetPropertyValue<Boolean?>("ContentDownloaded", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [Owner]
                [ODataProperty]
                public Applications.Mail.Message? MailMessage { get => GetPropertyValue<Applications.Mail.Message>("MailMessage"); set => SetPropertyValue<Applications.Mail.Message>("MailMessage", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace PersonalData
        {
            [Entity(EntitySet = "Applications_PersonalData_DataSubjectRightRequests", TableName = "Pdm_Data_Subject_Right_Requests")]
            public partial class DataSubjectRightRequest: EntityResource
            {
                public DataSubjectRightRequest(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_PersonalData_DataSubjectRightRequests";
                public const string EntityTableName = "Pdm_Data_Subject_Right_Requests";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CompletedOnUtc { get => GetPropertyValue<DateTime?>("CompletedOnUtc"); set => SetPropertyValue<DateTime?>("CompletedOnUtc", value); }
                [ODataProperty]
                public DateTime? CreatedOnUtc { get => GetPropertyValue<DateTime?>("CreatedOnUtc"); set => SetPropertyValue<DateTime?>("CreatedOnUtc", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Applications.PersonalData.DataSubjectRightRequestsRepository.RequestedRight? RequestedRight { get => GetPropertyValue<Applications.PersonalData.DataSubjectRightRequestsRepository.RequestedRight?>("RequestedRight"); set => SetPropertyValue<Applications.PersonalData.DataSubjectRightRequestsRepository.RequestedRight?>("RequestedRight", value); }
                [ODataProperty]
                public Applications.PersonalData.DataSubjectRightRequestsRepository.Status? Status { get => GetPropertyValue<Applications.PersonalData.DataSubjectRightRequestsRepository.Status?>("Status"); set => SetPropertyValue<Applications.PersonalData.DataSubjectRightRequestsRepository.Status?>("Status", value); }
                [ODataProperty]
                public Systems.Security.User? CompletedByUser { get => GetPropertyValue<Systems.Security.User>("CompletedByUser"); set => SetPropertyValue<Systems.Security.User>("CompletedByUser", value); }
                [ODataProperty]
                public Systems.Security.User? CreatedByUser { get => GetPropertyValue<Systems.Security.User>("CreatedByUser"); set => SetPropertyValue<Systems.Security.User>("CreatedByUser", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DataSubjectRightRequestsRepository
            {
                public enum RequestedRight
                {
                    Rectify = 0,
                    Erasure = 1,
                    Restrict = 2,
                    Portability = 3,
                    Object = 4,
                    Other = 5
                }
                public enum Status
                {
                    Requested = 0,
                    Reviewing = 1,
                    Executing = 2,
                    Implemented = 3,
                    Denied = 4
                }
            }
            [Entity(EntitySet = "Applications_PersonalData_JointControllers", TableName = "Pdm_Joint_Controllers")]
            public partial class JointController: EntityResource
            {
                public JointController(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_PersonalData_JointControllers";
                public const string EntityTableName = "Pdm_Joint_Controllers";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.Contacts.Party? JointControllerParty { get => GetPropertyValue<General.Contacts.Party>("JointControllerParty"); set => SetPropertyValue<General.Contacts.Party>("JointControllerParty", value); }
                [Owner]
                [ODataProperty]
                public Applications.PersonalData.PersonalDataProcess? PersonalDataProcess { get => GetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess"); set => SetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_PersonalData_PersonalDataProcesses", TableName = "Pdm_Personal_Data_Processes")]
            public partial class PersonalDataProcess: EntityResource
            {
                public PersonalDataProcess(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_PersonalData_PersonalDataProcesses";
                public const string EntityTableName = "Pdm_Personal_Data_Processes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public Boolean? ContainsSensitiveData { get => GetPropertyValue<Boolean?>("ContainsSensitiveData"); set => SetPropertyValue<Boolean?>("ContainsSensitiveData", value); }
                [ODataProperty]
                public Applications.PersonalData.PersonalDataProcessesRepository.DataSubjectCategory? DataSubjectCategory { get => GetPropertyValue<Applications.PersonalData.PersonalDataProcessesRepository.DataSubjectCategory?>("DataSubjectCategory"); set => SetPropertyValue<Applications.PersonalData.PersonalDataProcessesRepository.DataSubjectCategory?>("DataSubjectCategory", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public DateTime? DiscontinuationDate { get => GetPropertyValue<DateTime?>("DiscontinuationDate"); set => SetPropertyValue<DateTime?>("DiscontinuationDate", value); }
                [ODataProperty]
                public DateTime? EstablishDate { get => GetPropertyValue<DateTime?>("EstablishDate"); set => SetPropertyValue<DateTime?>("EstablishDate", value); }
                [ODataProperty]
                public Applications.PersonalData.PersonalDataProcessesRepository.LegalBasisForProcessing? LegalBasisForProcessing { get => GetPropertyValue<Applications.PersonalData.PersonalDataProcessesRepository.LegalBasisForProcessing?>("LegalBasisForProcessing"); set => SetPropertyValue<Applications.PersonalData.PersonalDataProcessesRepository.LegalBasisForProcessing?>("LegalBasisForProcessing", value); }
                [ODataProperty]
                public String? ListOfDataCategories { get => GetPropertyValue<String?>("ListOfDataCategories"); set => SetPropertyValue<String?>("ListOfDataCategories", value); }
                [ODataProperty]
                public String? ListOfDataRecipientCategories { get => GetPropertyValue<String?>("ListOfDataRecipientCategories"); set => SetPropertyValue<String?>("ListOfDataRecipientCategories", value); }
                [ODataProperty]
                public String? ListOfProcessingPurposes { get => GetPropertyValue<String?>("ListOfProcessingPurposes"); set => SetPropertyValue<String?>("ListOfProcessingPurposes", value); }
                [ODataProperty]
                public String? ListOfTechnicalMeasures { get => GetPropertyValue<String?>("ListOfTechnicalMeasures"); set => SetPropertyValue<String?>("ListOfTechnicalMeasures", value); }
                [ODataProperty]
                public String? ListOfTransfersToThirdCountries { get => GetPropertyValue<String?>("ListOfTransfersToThirdCountries"); set => SetPropertyValue<String?>("ListOfTransfersToThirdCountries", value); }
                [ODataProperty]
                public String? ListOfUsedSoftware { get => GetPropertyValue<String?>("ListOfUsedSoftware"); set => SetPropertyValue<String?>("ListOfUsedSoftware", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Applications.PersonalData.PersonalDataProcessesRepository.ProcessingRole? ProcessingRole { get => GetPropertyValue<Applications.PersonalData.PersonalDataProcessesRepository.ProcessingRole?>("ProcessingRole"); set => SetPropertyValue<Applications.PersonalData.PersonalDataProcessesRepository.ProcessingRole?>("ProcessingRole", value); }
                [ODataProperty]
                public Int32? RetentionPeriodMonths { get => GetPropertyValue<Int32?>("RetentionPeriodMonths"); set => SetPropertyValue<Int32?>("RetentionPeriodMonths", value); }
                [ODataProperty]
                public String? ThirdCountryTransfersSafeguards { get => GetPropertyValue<String?>("ThirdCountryTransfersSafeguards"); set => SetPropertyValue<String?>("ThirdCountryTransfersSafeguards", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.Person? ProcessOwnerPerson { get => GetPropertyValue<General.Contacts.Person>("ProcessOwnerPerson"); set => SetPropertyValue<General.Contacts.Person>("ProcessOwnerPerson", value); }
                [ODataProperty]
                public IEnumerable<Applications.PersonalData.JointController>? JointControllers { get => GetCollection<Applications.PersonalData.JointController>("JointControllers"); set => SetCollection<Applications.PersonalData.JointController>("JointControllers", value); }
                [ODataProperty]
                public IEnumerable<Applications.PersonalData.PersonalDataProcessRecipient>? Recipients { get => GetCollection<Applications.PersonalData.PersonalDataProcessRecipient>("Recipients"); set => SetCollection<Applications.PersonalData.PersonalDataProcessRecipient>("Recipients", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace PersonalDataProcessesRepository
            {
                public enum DataSubjectCategory
                {
                    Employees = 0,
                    JobCandidates = 1,
                    Contractors = 2,
                    Customers = 3,
                    Suppliers = 4,
                    Partners = 5,
                    Other = 6
                }
                public enum LegalBasisForProcessing
                {
                    LegitimateInterest = 0,
                    Consent = 1,
                    Contract = 2,
                    LegalCompliance = 3,
                    VitalInterest = 4,
                    PublicInterest = 5
                }
                public enum ProcessingRole
                {
                    Controller = 0,
                    Processor = 1
                }
            }
            [Entity(EntitySet = "Applications_PersonalData_PersonalDataProcessRecipients", TableName = "Pdm_Personal_Data_Process_Recipients")]
            public partial class PersonalDataProcessRecipient: EntityResource
            {
                public PersonalDataProcessRecipient(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_PersonalData_PersonalDataProcessRecipients";
                public const string EntityTableName = "Pdm_Personal_Data_Process_Recipients";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public Applications.PersonalData.PersonalDataProcess? PersonalDataProcess { get => GetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess"); set => SetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess", value); }
                [ODataProperty]
                public General.Contacts.Party? RecipientParty { get => GetPropertyValue<General.Contacts.Party>("RecipientParty"); set => SetPropertyValue<General.Contacts.Party>("RecipientParty", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_PersonalData_ProcessingConsents", TableName = "Pdm_Processing_Consents")]
            public partial class ProcessingConsent: EntityResource
            {
                public ProcessingConsent(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_PersonalData_ProcessingConsents";
                public const string EntityTableName = "Pdm_Processing_Consents";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? AllowAddress { get => GetPropertyValue<Boolean?>("AllowAddress"); set => SetPropertyValue<Boolean?>("AllowAddress", value); }
                [ODataProperty]
                public Boolean? AllowBasicData { get => GetPropertyValue<Boolean?>("AllowBasicData"); set => SetPropertyValue<Boolean?>("AllowBasicData", value); }
                [ODataProperty]
                public Boolean? AllowEmail { get => GetPropertyValue<Boolean?>("AllowEmail"); set => SetPropertyValue<Boolean?>("AllowEmail", value); }
                [ODataProperty]
                public String? AllowOtherData { get => GetPropertyValue<String?>("AllowOtherData"); set => SetPropertyValue<String?>("AllowOtherData", value); }
                [ODataProperty]
                public Boolean? AllowPhone { get => GetPropertyValue<Boolean?>("AllowPhone"); set => SetPropertyValue<Boolean?>("AllowPhone", value); }
                [ODataProperty]
                public Byte[]? ConsentImage { get => GetPropertyValue<Byte[]?>("ConsentImage"); set => SetPropertyValue<Byte[]?>("ConsentImage", value); }
                [ODataProperty]
                public String? ConsentText { get => GetPropertyValue<String?>("ConsentText"); set => SetPropertyValue<String?>("ConsentText", value); }
                [ODataProperty]
                public Applications.PersonalData.ProcessingConsentsRepository.ConsentType? ConsentType { get => GetPropertyValue<Applications.PersonalData.ProcessingConsentsRepository.ConsentType?>("ConsentType"); set => SetPropertyValue<Applications.PersonalData.ProcessingConsentsRepository.ConsentType?>("ConsentType", value); }
                [ODataProperty]
                public DateTime? GivenOnUtc { get => GetPropertyValue<DateTime?>("GivenOnUtc"); set => SetPropertyValue<DateTime?>("GivenOnUtc", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Boolean? IsChild { get => GetPropertyValue<Boolean?>("IsChild"); set => SetPropertyValue<Boolean?>("IsChild", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? ParentEmail { get => GetPropertyValue<String?>("ParentEmail"); set => SetPropertyValue<String?>("ParentEmail", value); }
                [ODataProperty]
                public String? ParentName { get => GetPropertyValue<String?>("ParentName"); set => SetPropertyValue<String?>("ParentName", value); }
                [ODataProperty]
                public String? ParentPhone { get => GetPropertyValue<String?>("ParentPhone"); set => SetPropertyValue<String?>("ParentPhone", value); }
                [ODataProperty]
                public DateTime? RetractedOnUtc { get => GetPropertyValue<DateTime?>("RetractedOnUtc"); set => SetPropertyValue<DateTime?>("RetractedOnUtc", value); }
                [ODataProperty]
                public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
                [ODataProperty]
                public Applications.PersonalData.PersonalDataProcess? PersonalDataProcess { get => GetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess"); set => SetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ProcessingConsentsRepository
            {
                public enum ConsentType
                {
                    Online = 0,
                    Implicit = 1,
                    Verbal = 2,
                    Written = 3,
                    Email = 4,
                    Other = 5
                }
            }
        }
        namespace Rental
        {
            [Entity(EntitySet = "Applications_Rental_Assets", TableName = "Rent_Assets")]
            public partial class Asset: EntityResource
            {
                public Asset(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_Assets";
                public const string EntityTableName = "Rent_Assets";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? RentalAssetCode { get => GetPropertyValue<String?>("RentalAssetCode"); set => SetPropertyValue<String?>("RentalAssetCode", value); }
                [ODataProperty]
                public String? RentalAssetName { get => GetPropertyValue<String?>("RentalAssetName"); set => SetPropertyValue<String?>("RentalAssetName", value); }
                [ODataProperty]
                public Amount? StandardGuaranteeAmount { get => GetPropertyValue<Amount?>("StandardGuaranteeAmount"); set => SetPropertyValue<Amount?>("StandardGuaranteeAmount", value); }
                [ODataProperty]
                public Applications.Rental.AssetsRepository.TimePeriodType? TimePeriodType { get => GetPropertyValue<Applications.Rental.AssetsRepository.TimePeriodType?>("TimePeriodType"); set => SetPropertyValue<Applications.Rental.AssetsRepository.TimePeriodType?>("TimePeriodType", value); }
                [ODataProperty]
                public Finance.Assets.Asset? AccountingAsset { get => GetPropertyValue<Finance.Assets.Asset>("AccountingAsset"); set => SetPropertyValue<Finance.Assets.Asset>("AccountingAsset", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Applications.Rental.AssetGroup? RentalAssetGroup { get => GetPropertyValue<Applications.Rental.AssetGroup>("RentalAssetGroup"); set => SetPropertyValue<Applications.Rental.AssetGroup>("RentalAssetGroup", value); }
                [ODataProperty]
                public Applications.Rental.AssetType? RentalAssetType { get => GetPropertyValue<Applications.Rental.AssetType>("RentalAssetType"); set => SetPropertyValue<Applications.Rental.AssetType>("RentalAssetType", value); }
                [ODataProperty]
                public General.Products.Product? SalesProduct { get => GetPropertyValue<General.Products.Product>("SalesProduct"); set => SetPropertyValue<General.Products.Product>("SalesProduct", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public General.Currency? StandardGuaranteeAmountCurrency { get => GetPropertyValue<General.Currency>("StandardGuaranteeAmountCurrency"); set => SetPropertyValue<General.Currency>("StandardGuaranteeAmountCurrency", value); }
                [ODataProperty]
                public General.Resources.WorkSchedule? WorkSchedule { get => GetPropertyValue<General.Resources.WorkSchedule>("WorkSchedule"); set => SetPropertyValue<General.Resources.WorkSchedule>("WorkSchedule", value); }
                [ODataProperty]
                public IEnumerable<Applications.Rental.AssetConsumable>? Consumables { get => GetCollection<Applications.Rental.AssetConsumable>("Consumables"); set => SetCollection<Applications.Rental.AssetConsumable>("Consumables", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Rental_AssetConsumables", TableName = "Rent_Asset_Consumables")]
            public partial class AssetConsumable: EntityResource
            {
                public AssetConsumable(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_AssetConsumables";
                public const string EntityTableName = "Rent_Asset_Consumables";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? ConsumableQuantity { get => GetPropertyValue<Quantity?>("ConsumableQuantity"); set => SetPropertyValue<Quantity?>("ConsumableQuantity", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.MeasurementUnit? ConsumableQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("ConsumableQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("ConsumableQuantityUnit", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [Owner]
                [ODataProperty]
                public Applications.Rental.Asset? RentalAsset { get => GetPropertyValue<Applications.Rental.Asset>("RentalAsset"); set => SetPropertyValue<Applications.Rental.Asset>("RentalAsset", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Rental_AssetGroups", TableName = "Rent_Asset_Groups")]
            public partial class AssetGroup: EntityResource
            {
                public AssetGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_AssetGroups";
                public const string EntityTableName = "Rent_Asset_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? ParentFullPath { get => GetPropertyValue<String?>("ParentFullPath"); set => SetPropertyValue<String?>("ParentFullPath", value); }
                [ODataProperty]
                public String? RentalAssetGroupCode { get => GetPropertyValue<String?>("RentalAssetGroupCode"); set => SetPropertyValue<String?>("RentalAssetGroupCode", value); }
                [ODataProperty]
                public String? RentalAssetGroupName { get => GetPropertyValue<String?>("RentalAssetGroupName"); set => SetPropertyValue<String?>("RentalAssetGroupName", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace AssetsRepository
            {
                public enum TimePeriodType
                {
                    Days = 0,
                    Months = 1
                }
            }
            [Entity(EntitySet = "Applications_Rental_AssetTypes", TableName = "Rent_Asset_Types")]
            public partial class AssetType: EntityResource
            {
                public AssetType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_AssetTypes";
                public const string EntityTableName = "Rent_Asset_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? RentalAssetTypeName { get => GetPropertyValue<String?>("RentalAssetTypeName"); set => SetPropertyValue<String?>("RentalAssetTypeName", value); }
                [ODataProperty]
                public IEnumerable<Applications.Rental.AssetTypeConsumable>? Consumables { get => GetCollection<Applications.Rental.AssetTypeConsumable>("Consumables"); set => SetCollection<Applications.Rental.AssetTypeConsumable>("Consumables", value); }
                [ODataProperty]
                public IEnumerable<Applications.Rental.AssetTypeProperty>? AssetTypeProperties { get => GetCollection<Applications.Rental.AssetTypeProperty>("AssetTypeProperties"); set => SetCollection<Applications.Rental.AssetTypeProperty>("AssetTypeProperties", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Rental_AssetTypeConsumables", TableName = "Rent_Asset_Type_Consumables")]
            public partial class AssetTypeConsumable: EntityResource
            {
                public AssetTypeConsumable(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_AssetTypeConsumables";
                public const string EntityTableName = "Rent_Asset_Type_Consumables";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? ConsumableQuantity { get => GetPropertyValue<Quantity?>("ConsumableQuantity"); set => SetPropertyValue<Quantity?>("ConsumableQuantity", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.MeasurementUnit? ConsumableQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("ConsumableQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("ConsumableQuantityUnit", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [Owner]
                [ODataProperty]
                public Applications.Rental.AssetType? RentalAssetType { get => GetPropertyValue<Applications.Rental.AssetType>("RentalAssetType"); set => SetPropertyValue<Applications.Rental.AssetType>("RentalAssetType", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Rental_AssetTypeProperties", TableName = "Rent_Asset_Type_Properties")]
            public partial class AssetTypeProperty: EntityResource
            {
                public AssetTypeProperty(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_AssetTypeProperties";
                public const string EntityTableName = "Rent_Asset_Type_Properties";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? DefaultValue { get => GetPropertyValue<String?>("DefaultValue"); set => SetPropertyValue<String?>("DefaultValue", value); }
                [ODataProperty]
                public Guid? DefaultValueId { get => GetPropertyValue<Guid?>("DefaultValueId"); set => SetPropertyValue<Guid?>("DefaultValueId", value); }
                [ODataProperty]
                public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
                [Owner]
                [ODataProperty]
                public Applications.Rental.AssetType? RentalAssetType { get => GetPropertyValue<Applications.Rental.AssetType>("RentalAssetType"); set => SetPropertyValue<Applications.Rental.AssetType>("RentalAssetType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Rental_LeaseContracts", TableName = "Rent_Lease_Contracts")]
            public partial class LeaseContract: General.Document
            {
                public LeaseContract(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_Rental_LeaseContracts";
                public new const string EntityTableName = "Rent_Lease_Contracts";
                [ODataProperty]
                public Boolean? CreditLimitOverride { get => GetPropertyValue<Boolean?>("CreditLimitOverride"); set => SetPropertyValue<Boolean?>("CreditLimitOverride", value); }
                [ODataProperty]
                public DateTime? EndDate { get => GetPropertyValue<DateTime?>("EndDate"); set => SetPropertyValue<DateTime?>("EndDate", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? StartDate { get => GetPropertyValue<DateTime?>("StartDate"); set => SetPropertyValue<DateTime?>("StartDate", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                [ODataProperty]
                public Crm.Customer? LesseeCustomer { get => GetPropertyValue<Crm.Customer>("LesseeCustomer"); set => SetPropertyValue<Crm.Customer>("LesseeCustomer", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public IEnumerable<Applications.Rental.LeaseContractLine>? Lines { get => GetCollection<Applications.Rental.LeaseContractLine>("Lines"); set => SetCollection<Applications.Rental.LeaseContractLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Applications_Rental_LeaseContractLines", TableName = "Rent_Lease_Contract_Lines")]
            public partial class LeaseContractLine: EntityResource
            {
                public LeaseContractLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_LeaseContractLines";
                public const string EntityTableName = "Rent_Lease_Contract_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? EndDate { get => GetPropertyValue<DateTime?>("EndDate"); set => SetPropertyValue<DateTime?>("EndDate", value); }
                [ODataProperty]
                public Amount? GuaranteeAmount { get => GetPropertyValue<Amount?>("GuaranteeAmount"); set => SetPropertyValue<Amount?>("GuaranteeAmount", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? LineNotes { get => GetPropertyValue<String?>("LineNotes"); set => SetPropertyValue<String?>("LineNotes", value); }
                [ODataProperty]
                public DateTime? StartDate { get => GetPropertyValue<DateTime?>("StartDate"); set => SetPropertyValue<DateTime?>("StartDate", value); }
                [Owner]
                [ODataProperty]
                public Applications.Rental.LeaseContract? LeaseContract { get => GetPropertyValue<Applications.Rental.LeaseContract>("LeaseContract"); set => SetPropertyValue<Applications.Rental.LeaseContract>("LeaseContract", value); }
                [ODataProperty]
                public Applications.Rental.Asset? RentalAsset { get => GetPropertyValue<Applications.Rental.Asset>("RentalAsset"); set => SetPropertyValue<Applications.Rental.Asset>("RentalAsset", value); }
                [ODataProperty]
                public IEnumerable<Applications.Rental.LeaseContractLineConsumable>? Consumables { get => GetCollection<Applications.Rental.LeaseContractLineConsumable>("Consumables"); set => SetCollection<Applications.Rental.LeaseContractLineConsumable>("Consumables", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Rental_LeaseContractLineConsumables", TableName = "Rent_Lease_Contract_Line_Consumables")]
            public partial class LeaseContractLineConsumable: EntityResource
            {
                public LeaseContractLineConsumable(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_LeaseContractLineConsumables";
                public const string EntityTableName = "Rent_Lease_Contract_Line_Consumables";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? ConsumableQuantity { get => GetPropertyValue<Quantity?>("ConsumableQuantity"); set => SetPropertyValue<Quantity?>("ConsumableQuantity", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public General.MeasurementUnit? ConsumableQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("ConsumableQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("ConsumableQuantityUnit", value); }
                [Owner]
                [ODataProperty]
                public Applications.Rental.LeaseContractLine? LeaseLine { get => GetPropertyValue<Applications.Rental.LeaseContractLine>("LeaseLine"); set => SetPropertyValue<Applications.Rental.LeaseContractLine>("LeaseLine", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Rental_Transactions", TableName = "Rent_Transactions")]
            public partial class Transaction: General.Document
            {
                public Transaction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_Rental_Transactions";
                public new const string EntityTableName = "Rent_Transactions";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? TransactionTimestamp { get => GetPropertyValue<DateTime?>("TransactionTimestamp"); set => SetPropertyValue<DateTime?>("TransactionTimestamp", value); }
                [ODataProperty]
                public Applications.Rental.TransactionsRepository.TransactionType? TransactionType { get => GetPropertyValue<Applications.Rental.TransactionsRepository.TransactionType?>("TransactionType"); set => SetPropertyValue<Applications.Rental.TransactionsRepository.TransactionType?>("TransactionType", value); }
                [ODataProperty]
                public Applications.Rental.LeaseContract? LeaseContract { get => GetPropertyValue<Applications.Rental.LeaseContract>("LeaseContract"); set => SetPropertyValue<Applications.Rental.LeaseContract>("LeaseContract", value); }
                [ODataProperty]
                public Crm.Customer? LesseeCustomer { get => GetPropertyValue<Crm.Customer>("LesseeCustomer"); set => SetPropertyValue<Crm.Customer>("LesseeCustomer", value); }
                [ODataProperty]
                public IEnumerable<Applications.Rental.TransactionLine>? Lines { get => GetCollection<Applications.Rental.TransactionLine>("Lines"); set => SetCollection<Applications.Rental.TransactionLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Applications_Rental_TransactionLines", TableName = "Rent_Transaction_Lines")]
            public partial class TransactionLine: EntityResource
            {
                public TransactionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_TransactionLines";
                public const string EntityTableName = "Rent_Transaction_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? TransactionTimestamp { get => GetPropertyValue<DateTime?>("TransactionTimestamp"); set => SetPropertyValue<DateTime?>("TransactionTimestamp", value); }
                [ODataProperty]
                public Applications.Rental.TransactionLinesRepository.TransactionType? TransactionType { get => GetPropertyValue<Applications.Rental.TransactionLinesRepository.TransactionType?>("TransactionType"); set => SetPropertyValue<Applications.Rental.TransactionLinesRepository.TransactionType?>("TransactionType", value); }
                [ODataProperty]
                public Applications.Rental.LeaseContract? LeaseContract { get => GetPropertyValue<Applications.Rental.LeaseContract>("LeaseContract"); set => SetPropertyValue<Applications.Rental.LeaseContract>("LeaseContract", value); }
                [ODataProperty]
                public Crm.Customer? LesseeCustomer { get => GetPropertyValue<Crm.Customer>("LesseeCustomer"); set => SetPropertyValue<Crm.Customer>("LesseeCustomer", value); }
                [Owner]
                [ODataProperty]
                public Applications.Rental.Transaction? RentTransaction { get => GetPropertyValue<Applications.Rental.Transaction>("RentTransaction"); set => SetPropertyValue<Applications.Rental.Transaction>("RentTransaction", value); }
                [ODataProperty]
                public Applications.Rental.Asset? RentalAsset { get => GetPropertyValue<Applications.Rental.Asset>("RentalAsset"); set => SetPropertyValue<Applications.Rental.Asset>("RentalAsset", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace TransactionLinesRepository
            {
                public enum TransactionType
                {
                    Deliver = 0,
                    Receive = 1,
                    WriteOffNotReturned = 2,
                    StatusReport = 3
                }
            }
            namespace TransactionsRepository
            {
                public enum TransactionType
                {
                    Deliver = 0,
                    Receive = 1,
                    WriteOffNotReturned = 2,
                    StatusReport = 3
                }
            }
            [Entity(EntitySet = "Applications_Rental_TransactionTemplates", TableName = "Rent_Transaction_Templates")]
            public partial class TransactionTemplate: EntityResource
            {
                public TransactionTemplate(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Rental_TransactionTemplates";
                public const string EntityTableName = "Rent_Transaction_Templates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Applications.Rental.TransactionsRepository.TransactionType? TransactionType { get => GetPropertyValue<Applications.Rental.TransactionsRepository.TransactionType?>("TransactionType"); set => SetPropertyValue<Applications.Rental.TransactionsRepository.TransactionType?>("TransactionType", value); }
                [Owner]
                [ODataProperty]
                public Systems.Workflow.Route? Route { get => GetPropertyValue<Systems.Workflow.Route>("Route"); set => SetPropertyValue<Systems.Workflow.Route>("Route", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Service
        {
            [Entity(EntitySet = "Applications_Service_Services", TableName = "Srv_Services")]
            public partial class Service: EntityResource
            {
                public Service(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_Services";
                public const string EntityTableName = "Srv_Services";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public General.MeasurementUnit? MeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("MeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("MeasurementUnit", value); }
                [ODataProperty]
                public IEnumerable<Applications.Service.ServiceInvoicing>? Invoicing { get => GetCollection<Applications.Service.ServiceInvoicing>("Invoicing"); set => SetCollection<Applications.Service.ServiceInvoicing>("Invoicing", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceActivities", TableName = "Srv_Service_Activities")]
            public partial class ServiceActivity: General.Contacts.Activity
            {
                public ServiceActivity(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_Service_ServiceActivities";
                public new const string EntityTableName = "Srv_Service_Activities";
                [ODataProperty]
                public Boolean? CreditLimitOverride { get => GetPropertyValue<Boolean?>("CreditLimitOverride"); set => SetPropertyValue<Boolean?>("CreditLimitOverride", value); }
                [ODataProperty]
                public String? ReceiverPersonName { get => GetPropertyValue<String?>("ReceiverPersonName"); set => SetPropertyValue<String?>("ReceiverPersonName", value); }
                [ODataProperty]
                public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
                [ODataProperty]
                public Applications.Service.ServiceObject? DefaultServiceObject { get => GetPropertyValue<Applications.Service.ServiceObject>("DefaultServiceObject"); set => SetPropertyValue<Applications.Service.ServiceObject>("DefaultServiceObject", value); }
                [ODataProperty]
                public General.Contacts.PartyContactMechanism? LocationPartyContactMechanism { get => GetPropertyValue<General.Contacts.PartyContactMechanism>("LocationPartyContactMechanism"); set => SetPropertyValue<General.Contacts.PartyContactMechanism>("LocationPartyContactMechanism", value); }
                [ODataProperty]
                public General.Contacts.Person? ReceiverPerson { get => GetPropertyValue<General.Contacts.Person>("ReceiverPerson"); set => SetPropertyValue<General.Contacts.Person>("ReceiverPerson", value); }
                [ODataProperty]
                public Applications.Service.ServiceAgreement? ServiceAgreement { get => GetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement"); set => SetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement", value); }
                [ODataProperty]
                public Crm.Customer? ShipToCustomer { get => GetPropertyValue<Crm.Customer>("ShipToCustomer"); set => SetPropertyValue<Crm.Customer>("ShipToCustomer", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public IEnumerable<Applications.Service.ServiceActivityMaterial>? Materials { get => GetCollection<Applications.Service.ServiceActivityMaterial>("Materials"); set => SetCollection<Applications.Service.ServiceActivityMaterial>("Materials", value); }
                [ODataProperty]
                public IEnumerable<Applications.Service.ServiceActivityService>? Services { get => GetCollection<Applications.Service.ServiceActivityService>("Services"); set => SetCollection<Applications.Service.ServiceActivityService>("Services", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceActivityAgreedMaterials", TableName = "Srv_Service_Activity_Agreed_Materials")]
            public partial class ServiceActivityAgreedMaterial: EntityResource
            {
                public ServiceActivityAgreedMaterial(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceActivityAgreedMaterials";
                public const string EntityTableName = "Srv_Service_Activity_Agreed_Materials";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? AgreedQuantity { get => GetPropertyValue<Quantity?>("AgreedQuantity"); set => SetPropertyValue<Quantity?>("AgreedQuantity", value); }
                [Owner]
                [ODataProperty]
                public Applications.Service.ServiceActivityMaterial? ServiceActivityMaterial { get => GetPropertyValue<Applications.Service.ServiceActivityMaterial>("ServiceActivityMaterial"); set => SetPropertyValue<Applications.Service.ServiceActivityMaterial>("ServiceActivityMaterial", value); }
                [ODataProperty]
                public Applications.Service.ServiceAgreementMaterial? ServiceAgreementMaterial { get => GetPropertyValue<Applications.Service.ServiceAgreementMaterial>("ServiceAgreementMaterial"); set => SetPropertyValue<Applications.Service.ServiceAgreementMaterial>("ServiceAgreementMaterial", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceActivityAgreedServices", TableName = "Srv_Service_Activity_Agreed_Services")]
            public partial class ServiceActivityAgreedService: EntityResource
            {
                public ServiceActivityAgreedService(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceActivityAgreedServices";
                public const string EntityTableName = "Srv_Service_Activity_Agreed_Services";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? AgreedQuantity { get => GetPropertyValue<Quantity?>("AgreedQuantity"); set => SetPropertyValue<Quantity?>("AgreedQuantity", value); }
                [Owner]
                [ODataProperty]
                public Applications.Service.ServiceActivityService? ServiceActivityService { get => GetPropertyValue<Applications.Service.ServiceActivityService>("ServiceActivityService"); set => SetPropertyValue<Applications.Service.ServiceActivityService>("ServiceActivityService", value); }
                [ODataProperty]
                public Applications.Service.ServiceAgreementService? ServiceAgreementService { get => GetPropertyValue<Applications.Service.ServiceAgreementService>("ServiceAgreementService"); set => SetPropertyValue<Applications.Service.ServiceAgreementService>("ServiceAgreementService", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceActivityMaterials", TableName = "Srv_Service_Activity_Materials")]
            public partial class ServiceActivityMaterial: EntityResource
            {
                public ServiceActivityMaterial(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceActivityMaterials";
                public const string EntityTableName = "Srv_Service_Activity_Materials";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? CoveredByGuarantee { get => GetPropertyValue<Boolean?>("CoveredByGuarantee"); set => SetPropertyValue<Boolean?>("CoveredByGuarantee", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? LineStore { get => GetPropertyValue<Logistics.Inventory.Store>("LineStore"); set => SetPropertyValue<Logistics.Inventory.Store>("LineStore", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [Owner]
                [ODataProperty]
                public Applications.Service.ServiceActivity? ServiceActivity { get => GetPropertyValue<Applications.Service.ServiceActivity>("ServiceActivity"); set => SetPropertyValue<Applications.Service.ServiceActivity>("ServiceActivity", value); }
                [ODataProperty]
                public Applications.Service.ServiceActivity? Document { get => GetPropertyValue<Applications.Service.ServiceActivity>("Document"); set => SetPropertyValue<Applications.Service.ServiceActivity>("Document", value); }
                [ODataProperty]
                public Applications.Service.ServiceObject? ServiceObject { get => GetPropertyValue<Applications.Service.ServiceObject>("ServiceObject"); set => SetPropertyValue<Applications.Service.ServiceObject>("ServiceObject", value); }
                [ODataProperty]
                public IEnumerable<Applications.Service.ServiceActivityAgreedMaterial>? ServiceActivityAgreedMaterials { get => GetCollection<Applications.Service.ServiceActivityAgreedMaterial>("ServiceActivityAgreedMaterials"); set => SetCollection<Applications.Service.ServiceActivityAgreedMaterial>("ServiceActivityAgreedMaterials", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceActivityServices", TableName = "Srv_Service_Activity_Services")]
            public partial class ServiceActivityService: EntityResource
            {
                public ServiceActivityService(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceActivityServices";
                public const string EntityTableName = "Srv_Service_Activity_Services";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? CoveredByGuarantee { get => GetPropertyValue<Boolean?>("CoveredByGuarantee"); set => SetPropertyValue<Boolean?>("CoveredByGuarantee", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public String? ServiceName { get => GetPropertyValue<String?>("ServiceName"); set => SetPropertyValue<String?>("ServiceName", value); }
                [ODataProperty]
                public General.Contacts.Person? PerformedByPerson { get => GetPropertyValue<General.Contacts.Person>("PerformedByPerson"); set => SetPropertyValue<General.Contacts.Person>("PerformedByPerson", value); }
                [Owner]
                [ODataProperty]
                public Applications.Service.ServiceActivity? ServiceActivity { get => GetPropertyValue<Applications.Service.ServiceActivity>("ServiceActivity"); set => SetPropertyValue<Applications.Service.ServiceActivity>("ServiceActivity", value); }
                [ODataProperty]
                public Applications.Service.ServiceActivity? Document { get => GetPropertyValue<Applications.Service.ServiceActivity>("Document"); set => SetPropertyValue<Applications.Service.ServiceActivity>("Document", value); }
                [ODataProperty]
                public Applications.Service.Service? Service { get => GetPropertyValue<Applications.Service.Service>("Service"); set => SetPropertyValue<Applications.Service.Service>("Service", value); }
                [ODataProperty]
                public Applications.Service.ServiceObject? ServiceObject { get => GetPropertyValue<Applications.Service.ServiceObject>("ServiceObject"); set => SetPropertyValue<Applications.Service.ServiceObject>("ServiceObject", value); }
                [ODataProperty]
                public IEnumerable<Applications.Service.ServiceActivityAgreedService>? ServiceActivityAgreedServices { get => GetCollection<Applications.Service.ServiceActivityAgreedService>("ServiceActivityAgreedServices"); set => SetCollection<Applications.Service.ServiceActivityAgreedService>("ServiceActivityAgreedServices", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceAgreements", TableName = "Srv_Service_Agreements")]
            public partial class ServiceAgreement: General.Document
            {
                public ServiceAgreement(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_Service_ServiceAgreements";
                public new const string EntityTableName = "Srv_Service_Agreements";
                [ODataProperty]
                public DateTime? EndDateTime { get => GetPropertyValue<DateTime?>("EndDateTime"); set => SetPropertyValue<DateTime?>("EndDateTime", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? StartDateTime { get => GetPropertyValue<DateTime?>("StartDateTime"); set => SetPropertyValue<DateTime?>("StartDateTime", value); }
                [ODataProperty]
                public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
                [ODataProperty]
                public IEnumerable<Applications.Service.ServiceAgreementLine>? Lines { get => GetCollection<Applications.Service.ServiceAgreementLine>("Lines"); set => SetCollection<Applications.Service.ServiceAgreementLine>("Lines", value); }
                [ODataProperty]
                public IEnumerable<Applications.Service.ServiceAgreementMaterial>? Materials { get => GetCollection<Applications.Service.ServiceAgreementMaterial>("Materials"); set => SetCollection<Applications.Service.ServiceAgreementMaterial>("Materials", value); }
                [ODataProperty]
                public IEnumerable<Applications.Service.ServiceAgreementService>? Services { get => GetCollection<Applications.Service.ServiceAgreementService>("Services"); set => SetCollection<Applications.Service.ServiceAgreementService>("Services", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceAgreementLines", TableName = "Srv_Service_Agreement_Lines")]
            public partial class ServiceAgreementLine: EntityResource
            {
                public ServiceAgreementLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceAgreementLines";
                public const string EntityTableName = "Srv_Service_Agreement_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? LineEndDateTime { get => GetPropertyValue<DateTime?>("LineEndDateTime"); set => SetPropertyValue<DateTime?>("LineEndDateTime", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public DateTime? LineStartDateTime { get => GetPropertyValue<DateTime?>("LineStartDateTime"); set => SetPropertyValue<DateTime?>("LineStartDateTime", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Decimal? Quantity { get => GetPropertyValue<Decimal?>("Quantity"); set => SetPropertyValue<Decimal?>("Quantity", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [Owner]
                [ODataProperty]
                public Applications.Service.ServiceAgreement? ServiceAgreement { get => GetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement"); set => SetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement", value); }
                [ODataProperty]
                public Applications.Service.ServiceAgreement? Document { get => GetPropertyValue<Applications.Service.ServiceAgreement>("Document"); set => SetPropertyValue<Applications.Service.ServiceAgreement>("Document", value); }
                [ODataProperty]
                public Applications.Service.ServiceObject? ServiceObject { get => GetPropertyValue<Applications.Service.ServiceObject>("ServiceObject"); set => SetPropertyValue<Applications.Service.ServiceObject>("ServiceObject", value); }
                [ODataProperty]
                public Applications.Service.ServiceType? ServiceType { get => GetPropertyValue<Applications.Service.ServiceType>("ServiceType"); set => SetPropertyValue<Applications.Service.ServiceType>("ServiceType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceAgreementMaterials", TableName = "Srv_Service_Agreement_Materials")]
            public partial class ServiceAgreementMaterial: EntityResource
            {
                public ServiceAgreementMaterial(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceAgreementMaterials";
                public const string EntityTableName = "Srv_Service_Agreement_Materials";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? EndDate { get => GetPropertyValue<DateTime?>("EndDate"); set => SetPropertyValue<DateTime?>("EndDate", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public DateTime? StartDate { get => GetPropertyValue<DateTime?>("StartDate"); set => SetPropertyValue<DateTime?>("StartDate", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [Owner]
                [ODataProperty]
                public Applications.Service.ServiceAgreement? ServiceAgreement { get => GetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement"); set => SetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement", value); }
                [ODataProperty]
                public Applications.Service.ServiceAgreement? Document { get => GetPropertyValue<Applications.Service.ServiceAgreement>("Document"); set => SetPropertyValue<Applications.Service.ServiceAgreement>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceAgreementServices", TableName = "Srv_Service_Agreement_Services")]
            public partial class ServiceAgreementService: EntityResource
            {
                public ServiceAgreementService(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceAgreementServices";
                public const string EntityTableName = "Srv_Service_Agreement_Services";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? EndDate { get => GetPropertyValue<DateTime?>("EndDate"); set => SetPropertyValue<DateTime?>("EndDate", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public DateTime? StartDate { get => GetPropertyValue<DateTime?>("StartDate"); set => SetPropertyValue<DateTime?>("StartDate", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [Owner]
                [ODataProperty]
                public Applications.Service.ServiceAgreement? ServiceAgreement { get => GetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement"); set => SetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement", value); }
                [ODataProperty]
                public Applications.Service.Service? Service { get => GetPropertyValue<Applications.Service.Service>("Service"); set => SetPropertyValue<Applications.Service.Service>("Service", value); }
                [ODataProperty]
                public General.Products.Product? ServiceProduct { get => GetPropertyValue<General.Products.Product>("ServiceProduct"); set => SetPropertyValue<General.Products.Product>("ServiceProduct", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceInvoicing", TableName = "Srv_Service_Invoicing")]
            public partial class ServiceInvoicing: EntityResource
            {
                public ServiceInvoicing(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceInvoicing";
                public const string EntityTableName = "Srv_Service_Invoicing";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? QuantityOfProduct { get => GetPropertyValue<Quantity?>("QuantityOfProduct"); set => SetPropertyValue<Quantity?>("QuantityOfProduct", value); }
                [ODataProperty]
                public Quantity? QuantityOfService { get => GetPropertyValue<Quantity?>("QuantityOfService"); set => SetPropertyValue<Quantity?>("QuantityOfService", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [Owner]
                [ODataProperty]
                public Applications.Service.Service? Service { get => GetPropertyValue<Applications.Service.Service>("Service"); set => SetPropertyValue<Applications.Service.Service>("Service", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceObjects", TableName = "Srv_Service_Objects")]
            public partial class ServiceObject: EntityResource
            {
                public ServiceObject(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceObjects";
                public const string EntityTableName = "Srv_Service_Objects";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? SerialNumber { get => GetPropertyValue<String?>("SerialNumber"); set => SetPropertyValue<String?>("SerialNumber", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumberObj { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumberObj"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumberObj", value); }
                [ODataProperty]
                public Applications.Service.ServiceObjectType? ServiceObjectType { get => GetPropertyValue<Applications.Service.ServiceObjectType>("ServiceObjectType"); set => SetPropertyValue<Applications.Service.ServiceObjectType>("ServiceObjectType", value); }
                [ODataProperty]
                public General.Products.Product? ServicedProduct { get => GetPropertyValue<General.Products.Product>("ServicedProduct"); set => SetPropertyValue<General.Products.Product>("ServicedProduct", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceObjectTypes", TableName = "Srv_Service_Object_Types")]
            public partial class ServiceObjectType: EntityResource
            {
                public ServiceObjectType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceObjectTypes";
                public const string EntityTableName = "Srv_Service_Object_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceOrders", TableName = "Srv_Service_Orders")]
            public partial class ServiceOrder: General.Document
            {
                public ServiceOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Applications_Service_ServiceOrders";
                public new const string EntityTableName = "Srv_Service_Orders";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
                [ODataProperty]
                public Applications.Service.ServiceAgreement? ServiceAgreement { get => GetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement"); set => SetPropertyValue<Applications.Service.ServiceAgreement>("ServiceAgreement", value); }
                [ODataProperty]
                public Crm.Customer? ShipToCustomer { get => GetPropertyValue<Crm.Customer>("ShipToCustomer"); set => SetPropertyValue<Crm.Customer>("ShipToCustomer", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public IEnumerable<Applications.Service.ServiceOrderLine>? Lines { get => GetCollection<Applications.Service.ServiceOrderLine>("Lines"); set => SetCollection<Applications.Service.ServiceOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceOrderLines", TableName = "Srv_Service_Order_Lines")]
            public partial class ServiceOrderLine: EntityResource
            {
                public ServiceOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceOrderLines";
                public const string EntityTableName = "Srv_Service_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? SymptomDescription { get => GetPropertyValue<String?>("SymptomDescription"); set => SetPropertyValue<String?>("SymptomDescription", value); }
                [ODataProperty]
                public Applications.Service.ServiceObject? ServiceObject { get => GetPropertyValue<Applications.Service.ServiceObject>("ServiceObject"); set => SetPropertyValue<Applications.Service.ServiceObject>("ServiceObject", value); }
                [Owner]
                [ODataProperty]
                public Applications.Service.ServiceOrder? ServiceOrder { get => GetPropertyValue<Applications.Service.ServiceOrder>("ServiceOrder"); set => SetPropertyValue<Applications.Service.ServiceOrder>("ServiceOrder", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Applications_Service_ServiceTypes", TableName = "Srv_Service_Types")]
            public partial class ServiceType: EntityResource
            {
                public ServiceType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Service_ServiceTypes";
                public const string EntityTableName = "Srv_Service_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Crm.PriceList? PriceList { get => GetPropertyValue<Crm.PriceList>("PriceList"); set => SetPropertyValue<Crm.PriceList>("PriceList", value); }
                [ODataProperty]
                public Applications.Service.ServiceObjectType? ServiceObjectType { get => GetPropertyValue<Applications.Service.ServiceObjectType>("ServiceObjectType"); set => SetPropertyValue<Applications.Service.ServiceObjectType>("ServiceObjectType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Telephony
        {
            [Entity(EntitySet = "Applications_Telephony_CallDetails", TableName = "Cm_Call_Details")]
            public partial class CallDetail: EntityResource
            {
                public CallDetail(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Applications_Telephony_CallDetails";
                public const string EntityTableName = "Cm_Call_Details";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Applications.Telephony.CallDetailsRepository.CallType? CallType { get => GetPropertyValue<Applications.Telephony.CallDetailsRepository.CallType?>("CallType"); set => SetPropertyValue<Applications.Telephony.CallDetailsRepository.CallType?>("CallType", value); }
                [ODataProperty]
                public String? CallUniqueId { get => GetPropertyValue<String?>("CallUniqueId"); set => SetPropertyValue<String?>("CallUniqueId", value); }
                [ODataProperty]
                public String? CalledPartyNumber { get => GetPropertyValue<String?>("CalledPartyNumber"); set => SetPropertyValue<String?>("CalledPartyNumber", value); }
                [ODataProperty]
                public String? CallingPartyNumber { get => GetPropertyValue<String?>("CallingPartyNumber"); set => SetPropertyValue<String?>("CallingPartyNumber", value); }
                [ODataProperty]
                public Int32? DurationSeconds { get => GetPropertyValue<Int32?>("DurationSeconds"); set => SetPropertyValue<Int32?>("DurationSeconds", value); }
                [ODataProperty]
                public DateTime? StartTime { get => GetPropertyValue<DateTime?>("StartTime"); set => SetPropertyValue<DateTime?>("StartTime", value); }
                [ODataProperty]
                public General.Contacts.Party? CalledParty { get => GetPropertyValue<General.Contacts.Party>("CalledParty"); set => SetPropertyValue<General.Contacts.Party>("CalledParty", value); }
                [ODataProperty]
                public General.Contacts.Party? CallingParty { get => GetPropertyValue<General.Contacts.Party>("CallingParty"); set => SetPropertyValue<General.Contacts.Party>("CallingParty", value); }
                [ODataProperty]
                public General.Contacts.Company? ExternalCompany { get => GetPropertyValue<General.Contacts.Company>("ExternalCompany"); set => SetPropertyValue<General.Contacts.Company>("ExternalCompany", value); }
                [ODataProperty]
                public General.Contacts.Party? ExternalParty { get => GetPropertyValue<General.Contacts.Party>("ExternalParty"); set => SetPropertyValue<General.Contacts.Party>("ExternalParty", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace CallDetailsRepository
            {
                public enum CallType
                {
                    Phone = 0,
                    Video = 1,
                    MessageOrSMS = 2
                }
            }
        }
    }
    namespace Communities
    {
        [Entity(EntitySet = "Communities_Notifications", TableName = "Cmm_Notifications")]
        public partial class Notification: EntityResource
        {
            public Notification(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Communities_Notifications";
            public const string EntityTableName = "Cmm_Notifications";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
            [ODataProperty]
            public Boolean? IsRead { get => GetPropertyValue<Boolean?>("IsRead"); set => SetPropertyValue<Boolean?>("IsRead", value); }
            [ODataProperty]
            public String? NotificationClass { get => GetPropertyValue<String?>("NotificationClass"); set => SetPropertyValue<String?>("NotificationClass", value); }
            [ODataProperty]
            public String? Subject { get => GetPropertyValue<String?>("Subject"); set => SetPropertyValue<String?>("Subject", value); }
            [ODataProperty]
            public Systems.Core.ExtensibleDataObject? DataObject { get => GetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject"); set => SetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject", value); }
            [ODataProperty]
            public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Communities_NotificationSettings", TableName = "Cmm_Notification_Settings")]
        public partial class NotificationSetting: EntityResource
        {
            public NotificationSetting(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Communities_NotificationSettings";
            public const string EntityTableName = "Cmm_Notification_Settings";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? NotificationClass { get => GetPropertyValue<String?>("NotificationClass"); set => SetPropertyValue<String?>("NotificationClass", value); }
            [ODataProperty]
            public Boolean? ReceiveMail { get => GetPropertyValue<Boolean?>("ReceiveMail"); set => SetPropertyValue<Boolean?>("ReceiveMail", value); }
            [ODataProperty]
            public Boolean? ReceiveNotification { get => GetPropertyValue<Boolean?>("ReceiveNotification"); set => SetPropertyValue<Boolean?>("ReceiveNotification", value); }
            [ODataProperty]
            public Boolean? ReceiveSms { get => GetPropertyValue<Boolean?>("ReceiveSms"); set => SetPropertyValue<Boolean?>("ReceiveSms", value); }
            [ODataProperty]
            public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace Social
        {
            [Entity(EntitySet = "Communities_Social_Comments", TableName = "Cmm_Social_Comments")]
            public partial class Comment: EntityResource
            {
                public Comment(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Communities_Social_Comments";
                public const string EntityTableName = "Cmm_Social_Comments";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? CommentText { get => GetPropertyValue<String?>("CommentText"); set => SetPropertyValue<String?>("CommentText", value); }
                [ODataProperty]
                public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
                [ODataProperty]
                public Systems.Core.ExtensibleDataObject? DataObject { get => GetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject"); set => SetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject", value); }
                [ODataProperty]
                public Communities.Social.Comment? ReplyToComment { get => GetPropertyValue<Communities.Social.Comment>("ReplyToComment"); set => SetPropertyValue<Communities.Social.Comment>("ReplyToComment", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Communities_Social_Follows", TableName = "Cmm_Social_Follows")]
            public partial class Follow: EntityResource
            {
                public Follow(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Communities_Social_Follows";
                public const string EntityTableName = "Cmm_Social_Follows";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
                [ODataProperty]
                public Systems.Core.ExtensibleDataObject? DataObject { get => GetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject"); set => SetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Communities_Social_FollowedEntities")]
            public partial class FollowedEntity: EntityResource
            {
                public FollowedEntity(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Communities_Social_FollowedEntities";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Guid? EntityItemId { get => GetPropertyValue<Guid?>("EntityItemId"); set => SetPropertyValue<Guid?>("EntityItemId", value); }
                [ODataProperty]
                public String? EntityType { get => GetPropertyValue<String?>("EntityType"); set => SetPropertyValue<String?>("EntityType", value); }
                [ODataProperty]
                public Systems.Core.ExtensibleDataObject? DataObject { get => GetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject"); set => SetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
            }
            [Entity(EntitySet = "Communities_Social_Groups", TableName = "Cmm_Social_Groups")]
            public partial class Group: EntityResource
            {
                public Group(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Communities_Social_Groups";
                public const string EntityTableName = "Cmm_Social_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? LastInteractionTimeUtc { get => GetPropertyValue<DateTime?>("LastInteractionTimeUtc"); set => SetPropertyValue<DateTime?>("LastInteractionTimeUtc", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public IEnumerable<Communities.Social.GroupMember>? Members { get => GetCollection<Communities.Social.GroupMember>("Members"); set => SetCollection<Communities.Social.GroupMember>("Members", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Communities_Social_GroupMembers", TableName = "Cmm_Social_Group_Members")]
            public partial class GroupMember: EntityResource
            {
                public GroupMember(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Communities_Social_GroupMembers";
                public const string EntityTableName = "Cmm_Social_Group_Members";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? JoinTimeUtc { get => GetPropertyValue<DateTime?>("JoinTimeUtc"); set => SetPropertyValue<DateTime?>("JoinTimeUtc", value); }
                [ODataProperty]
                public Communities.Social.GroupMembersRepository.Role? Role { get => GetPropertyValue<Communities.Social.GroupMembersRepository.Role?>("Role"); set => SetPropertyValue<Communities.Social.GroupMembersRepository.Role?>("Role", value); }
                [Owner]
                [ODataProperty]
                public Communities.Social.Group? SocialGroup { get => GetPropertyValue<Communities.Social.Group>("SocialGroup"); set => SetPropertyValue<Communities.Social.Group>("SocialGroup", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace GroupMembersRepository
            {
                public enum Role
                {
                    Member = 0,
                    Admin = 1
                }
            }
            [Entity(EntitySet = "Communities_Social_Posts", TableName = "Cmm_Social_Posts")]
            public partial class Post: EntityResource
            {
                public Post(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Communities_Social_Posts";
                public const string EntityTableName = "Cmm_Social_Posts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
                [ODataProperty]
                public DateTime? LastInteractionTimeUtc { get => GetPropertyValue<DateTime?>("LastInteractionTimeUtc"); set => SetPropertyValue<DateTime?>("LastInteractionTimeUtc", value); }
                [ODataProperty]
                public String? PostText { get => GetPropertyValue<String?>("PostText"); set => SetPropertyValue<String?>("PostText", value); }
                [ODataProperty]
                public Communities.Social.Group? SocialGroup { get => GetPropertyValue<Communities.Social.Group>("SocialGroup"); set => SetPropertyValue<Communities.Social.Group>("SocialGroup", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Communities_Social_Reactions", TableName = "Cmm_Social_Reactions")]
            public partial class Reaction: EntityResource
            {
                public Reaction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Communities_Social_Reactions";
                public const string EntityTableName = "Cmm_Social_Reactions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
                [ODataProperty]
                public Communities.Social.ReactionsRepository.ReactionType? ReactionType { get => GetPropertyValue<Communities.Social.ReactionsRepository.ReactionType?>("ReactionType"); set => SetPropertyValue<Communities.Social.ReactionsRepository.ReactionType?>("ReactionType", value); }
                [ODataProperty]
                public Systems.Core.ExtensibleDataObject? DataObject { get => GetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject"); set => SetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject", value); }
                [ODataProperty]
                public Communities.Social.Comment? SocialComment { get => GetPropertyValue<Communities.Social.Comment>("SocialComment"); set => SetPropertyValue<Communities.Social.Comment>("SocialComment", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ReactionsRepository
            {
                public enum ReactionType
                {
                    Like = 0,
                    Love = 1,
                    Haha = 2,
                    Wow = 3,
                    Sad = 4,
                    Angry = 5
                }
            }
            [Entity(EntitySet = "Communities_Social_ReactionsSummary")]
            public partial class ReactionsSummary: EntityResource
            {
                public ReactionsSummary(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Communities_Social_ReactionsSummary";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Int64? Cnt { get => GetPropertyValue<Int64?>("Cnt"); set => SetPropertyValue<Int64?>("Cnt", value); }
                [ODataProperty]
                public Communities.Social.ReactionsSummaryRepository.ReactionType? ReactionType { get => GetPropertyValue<Communities.Social.ReactionsSummaryRepository.ReactionType?>("ReactionType"); set => SetPropertyValue<Communities.Social.ReactionsSummaryRepository.ReactionType?>("ReactionType", value); }
                [ODataProperty]
                public Systems.Core.ExtensibleDataObject? DataObject { get => GetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject"); set => SetPropertyValue<Systems.Core.ExtensibleDataObject>("DataObject", value); }
                [ODataProperty]
                public Communities.Social.Comment? SocialComment { get => GetPropertyValue<Communities.Social.Comment>("SocialComment"); set => SetPropertyValue<Communities.Social.Comment>("SocialComment", value); }
            }
            namespace ReactionsSummaryRepository
            {
                public enum ReactionType
                {
                    Like = 0,
                    Love = 1,
                    Haha = 2,
                    Wow = 3,
                    Sad = 4,
                    Angry = 5
                }
            }
        }
    }
    namespace Crm
    {
        [Entity(EntitySet = "Crm_Customers", TableName = "Crm_Customers")]
        public partial class Customer: EntityResource
        {
            public Customer(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_Customers";
            public const string EntityTableName = "Crm_Customers";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
            [ODataProperty]
            public Boolean? AllowUseAsPrimaryCustomer { get => GetPropertyValue<Boolean?>("AllowUseAsPrimaryCustomer"); set => SetPropertyValue<Boolean?>("AllowUseAsPrimaryCustomer", value); }
            [ODataProperty]
            public Boolean? AllowUseAsShipToCustomer { get => GetPropertyValue<Boolean?>("AllowUseAsShipToCustomer"); set => SetPropertyValue<Boolean?>("AllowUseAsShipToCustomer", value); }
            [ODataProperty]
            public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
            [ODataProperty]
            public String? CreationUser { get => GetPropertyValue<String?>("CreationUser"); set => SetPropertyValue<String?>("CreationUser", value); }
            [ODataProperty]
            public Amount? CreditLimit { get => GetPropertyValue<Amount?>("CreditLimit"); set => SetPropertyValue<Amount?>("CreditLimit", value); }
            [ODataProperty]
            public String? Number { get => GetPropertyValue<String?>("Number"); set => SetPropertyValue<String?>("Number", value); }
            [ODataProperty]
            public Int32? DefaultDeliveryTermDays { get => GetPropertyValue<Int32?>("DefaultDeliveryTermDays"); set => SetPropertyValue<Int32?>("DefaultDeliveryTermDays", value); }
            [ODataProperty]
            public Int32? DefaultPaymentStartDays { get => GetPropertyValue<Int32?>("DefaultPaymentStartDays"); set => SetPropertyValue<Int32?>("DefaultPaymentStartDays", value); }
            [ODataProperty]
            public Int32? DefaultPaymentTermDays { get => GetPropertyValue<Int32?>("DefaultPaymentTermDays"); set => SetPropertyValue<Int32?>("DefaultPaymentTermDays", value); }
            [ODataProperty]
            public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
            [ODataProperty]
            public Int32? GracePeriodDays { get => GetPropertyValue<Int32?>("GracePeriodDays"); set => SetPropertyValue<Int32?>("GracePeriodDays", value); }
            [ODataProperty]
            public Boolean? PersistSalesOrdersLots { get => GetPropertyValue<Boolean?>("PersistSalesOrdersLots"); set => SetPropertyValue<Boolean?>("PersistSalesOrdersLots", value); }
            [ODataProperty]
            public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
            [ODataProperty]
            public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
            [ODataProperty]
            public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
            [ODataProperty]
            public General.Contacts.CompanyEmployee? CollectionsResponsibleEmployee { get => GetPropertyValue<General.Contacts.CompanyEmployee>("CollectionsResponsibleEmployee"); set => SetPropertyValue<General.Contacts.CompanyEmployee>("CollectionsResponsibleEmployee", value); }
            [ODataProperty]
            public Crm.CustomerType? CustomerType { get => GetPropertyValue<Crm.CustomerType>("CustomerType"); set => SetPropertyValue<Crm.CustomerType>("CustomerType", value); }
            [ODataProperty]
            public General.Currency? DefaultCurrency { get => GetPropertyValue<General.Currency>("DefaultCurrency"); set => SetPropertyValue<General.Currency>("DefaultCurrency", value); }
            [ODataProperty]
            public Crm.Marketing.DistributionChannel? DefaultDistributionChannel { get => GetPropertyValue<Crm.Marketing.DistributionChannel>("DefaultDistributionChannel"); set => SetPropertyValue<Crm.Marketing.DistributionChannel>("DefaultDistributionChannel", value); }
            [ODataProperty]
            public Finance.Payments.PaymentAccount? DefaultPaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("DefaultPaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("DefaultPaymentAccount", value); }
            [ODataProperty]
            public Finance.Payments.PaymentType? DefaultPaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("DefaultPaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("DefaultPaymentType", value); }
            [ODataProperty]
            public Crm.PriceList? DefaultPriceList { get => GetPropertyValue<Crm.PriceList>("DefaultPriceList"); set => SetPropertyValue<Crm.PriceList>("DefaultPriceList", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
            [ODataProperty]
            public Crm.SalesPerson? SalesPerson { get => GetPropertyValue<Crm.SalesPerson>("SalesPerson"); set => SetPropertyValue<Crm.SalesPerson>("SalesPerson", value); }
            [ODataProperty]
            public General.Contacts.CompanyLocation? ServicedByEnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("ServicedByEnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("ServicedByEnterpriseCompanyLocation", value); }
            [ODataProperty]
            public IEnumerable<Crm.CustomerProduct>? Products { get => GetCollection<Crm.CustomerProduct>("Products"); set => SetCollection<Crm.CustomerProduct>("Products", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Crm_CustomerProducts", TableName = "Crm_Customer_Products")]
        public partial class CustomerProduct: EntityResource
        {
            public CustomerProduct(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_CustomerProducts";
            public const string EntityTableName = "Crm_Customer_Products";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
            [ODataProperty]
            public String? InStoreLocation { get => GetPropertyValue<String?>("InStoreLocation"); set => SetPropertyValue<String?>("InStoreLocation", value); }
            [ODataProperty]
            public Quantity? InStoreMaxQuantity { get => GetPropertyValue<Quantity?>("InStoreMaxQuantity"); set => SetPropertyValue<Quantity?>("InStoreMaxQuantity", value); }
            [ODataProperty]
            public Quantity? InStoreMinQuantity { get => GetPropertyValue<Quantity?>("InStoreMinQuantity"); set => SetPropertyValue<Quantity?>("InStoreMinQuantity", value); }
            [ODataProperty]
            public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Quantity? OrderMultiple { get => GetPropertyValue<Quantity?>("OrderMultiple"); set => SetPropertyValue<Quantity?>("OrderMultiple", value); }
            [ODataProperty]
            public DateTime? ToDate { get => GetPropertyValue<DateTime?>("ToDate"); set => SetPropertyValue<DateTime?>("ToDate", value); }
            [ODataProperty]
            public General.Contacts.CompanyDivision? CompanyDivision { get => GetPropertyValue<General.Contacts.CompanyDivision>("CompanyDivision"); set => SetPropertyValue<General.Contacts.CompanyDivision>("CompanyDivision", value); }
            [ODataProperty]
            public General.Contacts.CompanyLocation? CompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("CompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("CompanyLocation", value); }
            [Owner]
            [ODataProperty]
            public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
            [ODataProperty]
            public General.MeasurementUnit? InStoreQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("InStoreQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("InStoreQuantityUnit", value); }
            [ODataProperty]
            public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Crm_CustomerTypes", TableName = "Crm_Customer_Types")]
        public partial class CustomerType: EntityResource
        {
            public CustomerType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_CustomerTypes";
            public const string EntityTableName = "Crm_Customer_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            [ODataProperty]
            public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Crm_Dealers", TableName = "Crm_Dealers")]
        public partial class Dealer: EntityResource
        {
            public Dealer(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_Dealers";
            public const string EntityTableName = "Crm_Dealers";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Crm_DiscountTypes", TableName = "Crm_Discount_Types")]
        public partial class DiscountType: EntityResource
        {
            public DiscountType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_DiscountTypes";
            public const string EntityTableName = "Crm_Discount_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Crm.DiscountTypesRepository.ActionType? ActionType { get => GetPropertyValue<Crm.DiscountTypesRepository.ActionType?>("ActionType"); set => SetPropertyValue<Crm.DiscountTypesRepository.ActionType?>("ActionType", value); }
            [ODataProperty]
            public Crm.DiscountTypesRepository.CalculationMethod? CalculationMethod { get => GetPropertyValue<Crm.DiscountTypesRepository.CalculationMethod?>("CalculationMethod"); set => SetPropertyValue<Crm.DiscountTypesRepository.CalculationMethod?>("CalculationMethod", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public Boolean? IsSystem { get => GetPropertyValue<Boolean?>("IsSystem"); set => SetPropertyValue<Boolean?>("IsSystem", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Int32? Ord { get => GetPropertyValue<Int32?>("Ord"); set => SetPropertyValue<Int32?>("Ord", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace DiscountTypesRepository
        {
            public enum ActionType
            {
                Add = 0,
                Replace = 1,
                MarkDown = 2
            }
            public enum CalculationMethod
            {
                StandardDiscount = 0,
                PromotionalPackage = 1,
                BonusProgram = 2
            }
        }
        namespace Distribution
        {
            [Entity(EntitySet = "Crm_Distribution_SalesPersonGroups", TableName = "Crm_Sales_Person_Groups")]
            public partial class SalesPersonGroup: EntityResource
            {
                public SalesPersonGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Distribution_SalesPersonGroups";
                public const string EntityTableName = "Crm_Sales_Person_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public General.Contacts.Person? ManagerPerson { get => GetPropertyValue<General.Contacts.Person>("ManagerPerson"); set => SetPropertyValue<General.Contacts.Person>("ManagerPerson", value); }
                [ODataProperty]
                public Crm.Distribution.SalesPersonGroup? Parent { get => GetPropertyValue<Crm.Distribution.SalesPersonGroup>("Parent"); set => SetPropertyValue<Crm.Distribution.SalesPersonGroup>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Distribution_SalesPersonTargets", TableName = "Crm_Sales_Person_Targets")]
            public partial class SalesPersonTarget: General.Document
            {
                public SalesPersonTarget(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Crm_Distribution_SalesPersonTargets";
                public new const string EntityTableName = "Crm_Sales_Person_Targets";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public General.Products.ProductGroup? ProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ProductGroup", value); }
                [ODataProperty]
                public Crm.SalesPerson? SalesPerson { get => GetPropertyValue<Crm.SalesPerson>("SalesPerson"); set => SetPropertyValue<Crm.SalesPerson>("SalesPerson", value); }
                [ODataProperty]
                public General.Currency? TargetCurrency { get => GetPropertyValue<General.Currency>("TargetCurrency"); set => SetPropertyValue<General.Currency>("TargetCurrency", value); }
                [ODataProperty]
                public IEnumerable<Crm.Distribution.SalesPersonTargetLine>? Lines { get => GetCollection<Crm.Distribution.SalesPersonTargetLine>("Lines"); set => SetCollection<Crm.Distribution.SalesPersonTargetLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Crm_Distribution_SalesPersonTargetLines", TableName = "Crm_Sales_Person_Target_Lines")]
            public partial class SalesPersonTargetLine: EntityResource
            {
                public SalesPersonTargetLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Distribution_SalesPersonTargetLines";
                public const string EntityTableName = "Crm_Sales_Person_Target_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? PeriodDate { get => GetPropertyValue<DateTime?>("PeriodDate"); set => SetPropertyValue<DateTime?>("PeriodDate", value); }
                [ODataProperty]
                public Byte? PeriodMonth { get => GetPropertyValue<Byte?>("PeriodMonth"); set => SetPropertyValue<Byte?>("PeriodMonth", value); }
                [ODataProperty]
                public Int16? PeriodYear { get => GetPropertyValue<Int16?>("PeriodYear"); set => SetPropertyValue<Int16?>("PeriodYear", value); }
                [ODataProperty]
                public Amount? TargetAmount { get => GetPropertyValue<Amount?>("TargetAmount"); set => SetPropertyValue<Amount?>("TargetAmount", value); }
                [ODataProperty]
                public Crm.Distribution.SalesPersonTargetLinesRepository.TargetType? TargetType { get => GetPropertyValue<Crm.Distribution.SalesPersonTargetLinesRepository.TargetType?>("TargetType"); set => SetPropertyValue<Crm.Distribution.SalesPersonTargetLinesRepository.TargetType?>("TargetType", value); }
                [ODataProperty]
                public Decimal? TargetValue { get => GetPropertyValue<Decimal?>("TargetValue"); set => SetPropertyValue<Decimal?>("TargetValue", value); }
                [ODataProperty]
                public Decimal? TargetWeight { get => GetPropertyValue<Decimal?>("TargetWeight"); set => SetPropertyValue<Decimal?>("TargetWeight", value); }
                [ODataProperty]
                public Crm.Marketing.BonusProgram? BonusProgram { get => GetPropertyValue<Crm.Marketing.BonusProgram>("BonusProgram"); set => SetPropertyValue<Crm.Marketing.BonusProgram>("BonusProgram", value); }
                [ODataProperty]
                public General.Products.ProductGroup? ProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ProductGroup", value); }
                [ODataProperty]
                public Crm.PromotionalPackage? PromotionalPackage { get => GetPropertyValue<Crm.PromotionalPackage>("PromotionalPackage"); set => SetPropertyValue<Crm.PromotionalPackage>("PromotionalPackage", value); }
                [ODataProperty]
                public Crm.SalesPerson? SalesPerson { get => GetPropertyValue<Crm.SalesPerson>("SalesPerson"); set => SetPropertyValue<Crm.SalesPerson>("SalesPerson", value); }
                [Owner]
                [ODataProperty]
                public Crm.Distribution.SalesPersonTarget? SalesPersonTarget { get => GetPropertyValue<Crm.Distribution.SalesPersonTarget>("SalesPersonTarget"); set => SetPropertyValue<Crm.Distribution.SalesPersonTarget>("SalesPersonTarget", value); }
                [ODataProperty]
                public Crm.Distribution.SalesPersonTarget? Document { get => GetPropertyValue<Crm.Distribution.SalesPersonTarget>("Document"); set => SetPropertyValue<Crm.Distribution.SalesPersonTarget>("Document", value); }
                [ODataProperty]
                public General.Currency? TargetAmountCurrency { get => GetPropertyValue<General.Currency>("TargetAmountCurrency"); set => SetPropertyValue<General.Currency>("TargetAmountCurrency", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace SalesPersonTargetLinesRepository
            {
                public enum TargetType
                {
                    SalesAmount = 0,
                    NumberOfAppliedBonusPrograms = 1,
                    NumberOfPromotionalPackages = 2,
                    LocationsCount = 3
                }
            }
        }
        [Entity(EntitySet = "Crm_Distributors", TableName = "Crm_Distributors")]
        public partial class Distributor: EntityResource
        {
            public Distributor(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_Distributors";
            public const string EntityTableName = "Crm_Distributors";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Decimal? FlatCommisionPercentage { get => GetPropertyValue<Decimal?>("FlatCommisionPercentage"); set => SetPropertyValue<Decimal?>("FlatCommisionPercentage", value); }
            [Owner]
            [ODataProperty]
            public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace Invoicing
        {
            [Entity(EntitySet = "Crm_Invoicing_Invoices", TableName = "Crm_Invoices")]
            public partial class Invoice: General.Document
            {
                public Invoice(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Crm_Invoicing_Invoices";
                public new const string EntityTableName = "Crm_Invoices";
                [ODataProperty]
                public DateTime? ApplyDate { get => GetPropertyValue<DateTime?>("ApplyDate"); set => SetPropertyValue<DateTime?>("ApplyDate", value); }
                [ODataProperty]
                public Boolean? AutomaticOrderLinking { get => GetPropertyValue<Boolean?>("AutomaticOrderLinking"); set => SetPropertyValue<Boolean?>("AutomaticOrderLinking", value); }
                [ODataProperty]
                public String? CreditNoteDescription { get => GetPropertyValue<String?>("CreditNoteDescription"); set => SetPropertyValue<String?>("CreditNoteDescription", value); }
                [ODataProperty]
                public DateTime? DeliveryDate { get => GetPropertyValue<DateTime?>("DeliveryDate"); set => SetPropertyValue<DateTime?>("DeliveryDate", value); }
                [ODataProperty]
                public Finance.Intrastat.DeliveryTerms? DeliveryTermsCode { get => GetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode"); set => SetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode", value); }
                [ODataProperty]
                public Finance.Intrastat.TransactionNature? IntrastatTransactionNatureCode { get => GetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode"); set => SetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode", value); }
                [ODataProperty]
                public Finance.Intrastat.TransportMode? IntrastatTransportModeCode { get => GetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode"); set => SetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public Boolean? IsValidField { get => GetPropertyValue<Boolean?>("IsValidField"); set => SetPropertyValue<Boolean?>("IsValidField", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? PaymentDueDate { get => GetPropertyValue<DateTime?>("PaymentDueDate"); set => SetPropertyValue<DateTime?>("PaymentDueDate", value); }
                [ODataProperty]
                public DateTime? PaymentDueStartDate { get => GetPropertyValue<DateTime?>("PaymentDueStartDate"); set => SetPropertyValue<DateTime?>("PaymentDueStartDate", value); }
                [ODataProperty]
                public MultilanguageString? PaymentTypeDescription { get => GetPropertyValue<MultilanguageString?>("PaymentTypeDescription"); set => SetPropertyValue<MultilanguageString?>("PaymentTypeDescription", value); }
                [ODataProperty]
                public Boolean? VATCashReportingMode { get => GetPropertyValue<Boolean?>("VATCashReportingMode"); set => SetPropertyValue<Boolean?>("VATCashReportingMode", value); }
                [ODataProperty]
                public String? VATNotes { get => GetPropertyValue<String?>("VATNotes"); set => SetPropertyValue<String?>("VATNotes", value); }
                [ODataProperty]
                public Crm.Invoicing.Invoice? CreditNoteOriginalInvoice { get => GetPropertyValue<Crm.Invoicing.Invoice>("CreditNoteOriginalInvoice"); set => SetPropertyValue<Crm.Invoicing.Invoice>("CreditNoteOriginalInvoice", value); }
                [ODataProperty]
                public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
                [ODataProperty]
                public Finance.Vat.DealType? DealType { get => GetPropertyValue<Finance.Vat.DealType>("DealType"); set => SetPropertyValue<Finance.Vat.DealType>("DealType", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public General.Geography.Country? IntrastatTransportCountry { get => GetPropertyValue<General.Geography.Country>("IntrastatTransportCountry"); set => SetPropertyValue<General.Geography.Country>("IntrastatTransportCountry", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public IEnumerable<Crm.Invoicing.InvoiceLine>? Lines { get => GetCollection<Crm.Invoicing.InvoiceLine>("Lines"); set => SetCollection<Crm.Invoicing.InvoiceLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Crm_Invoicing_InvoiceLines", TableName = "Crm_Invoice_Lines")]
            public partial class InvoiceLine: EntityResource
            {
                public InvoiceLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Invoicing_InvoiceLines";
                public const string EntityTableName = "Crm_Invoice_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Crm.Invoicing.InvoicingBusinessReason? BusinessReason { get => GetPropertyValue<Crm.Invoicing.InvoicingBusinessReason?>("BusinessReason"); set => SetPropertyValue<Crm.Invoicing.InvoicingBusinessReason?>("BusinessReason", value); }
                [ODataProperty]
                public Finance.Intrastat.DeliveryTerms? DeliveryTermsCode { get => GetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode"); set => SetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode", value); }
                [ODataProperty]
                public DateTime? IntrastatApplyDate { get => GetPropertyValue<DateTime?>("IntrastatApplyDate"); set => SetPropertyValue<DateTime?>("IntrastatApplyDate", value); }
                [ODataProperty]
                public Finance.Intrastat.TransactionNature? IntrastatTransactionNatureCode { get => GetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode"); set => SetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode", value); }
                [ODataProperty]
                public Finance.Intrastat.TransportMode? IntrastatTransportModeCode { get => GetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode"); set => SetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode", value); }
                [ODataProperty]
                public Amount? LineAmount { get => GetPropertyValue<Amount?>("LineAmount"); set => SetPropertyValue<Amount?>("LineAmount", value); }
                [ODataProperty]
                public Decimal? LineCustomDiscountPercent { get => GetPropertyValue<Decimal?>("LineCustomDiscountPercent"); set => SetPropertyValue<Decimal?>("LineCustomDiscountPercent", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? LineStandardDiscountPercent { get => GetPropertyValue<Decimal?>("LineStandardDiscountPercent"); set => SetPropertyValue<Decimal?>("LineStandardDiscountPercent", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public MultilanguageString? ProductDescription { get => GetPropertyValue<MultilanguageString?>("ProductDescription"); set => SetPropertyValue<MultilanguageString?>("ProductDescription", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Decimal? SalesOrderAmount { get => GetPropertyValue<Decimal?>("SalesOrderAmount"); set => SetPropertyValue<Decimal?>("SalesOrderAmount", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Amount? UnitPrice { get => GetPropertyValue<Amount?>("UnitPrice"); set => SetPropertyValue<Amount?>("UnitPrice", value); }
                [ODataProperty]
                public General.Geography.Country? IntrastatTransportCountry { get => GetPropertyValue<General.Geography.Country>("IntrastatTransportCountry"); set => SetPropertyValue<General.Geography.Country>("IntrastatTransportCountry", value); }
                [Owner]
                [ODataProperty]
                public Crm.Invoicing.Invoice? Invoice { get => GetPropertyValue<Crm.Invoicing.Invoice>("Invoice"); set => SetPropertyValue<Crm.Invoicing.Invoice>("Invoice", value); }
                [ODataProperty]
                public Crm.Invoicing.Invoice? Document { get => GetPropertyValue<Crm.Invoicing.Invoice>("Document"); set => SetPropertyValue<Crm.Invoicing.Invoice>("Document", value); }
                [ODataProperty]
                public Crm.Invoicing.InvoiceOrderLine? InvoiceOrderLine { get => GetPropertyValue<Crm.Invoicing.InvoiceOrderLine>("InvoiceOrderLine"); set => SetPropertyValue<Crm.Invoicing.InvoiceOrderLine>("InvoiceOrderLine", value); }
                [ODataProperty]
                public Finance.Vat.DealType? LineDealType { get => GetPropertyValue<Finance.Vat.DealType>("LineDealType"); set => SetPropertyValue<Finance.Vat.DealType>("LineDealType", value); }
                [ODataProperty]
                public Crm.LineDiscount? LineDiscount { get => GetPropertyValue<Crm.LineDiscount>("LineDiscount"); set => SetPropertyValue<Crm.LineDiscount>("LineDiscount", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrderLine? ParentSalesOrderLine { get => GetPropertyValue<Crm.Sales.SalesOrderLine>("ParentSalesOrderLine"); set => SetPropertyValue<Crm.Sales.SalesOrderLine>("ParentSalesOrderLine", value); }
                [ODataProperty]
                public Finance.Payments.PaymentTransaction? PaymentTransaction { get => GetPropertyValue<Finance.Payments.PaymentTransaction>("PaymentTransaction"); set => SetPropertyValue<Finance.Payments.PaymentTransaction>("PaymentTransaction", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrder? SalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransactionLine? TransactionLine { get => GetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine"); set => SetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Invoicing_InvoiceOrders", TableName = "Crm_Invoice_Orders")]
            public partial class InvoiceOrder: General.Document
            {
                public InvoiceOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Crm_Invoicing_InvoiceOrders";
                public new const string EntityTableName = "Crm_Invoice_Orders";
                [ODataProperty]
                public DateTime? ApplyDate { get => GetPropertyValue<DateTime?>("ApplyDate"); set => SetPropertyValue<DateTime?>("ApplyDate", value); }
                [ODataProperty]
                public String? CreditNoteDescription { get => GetPropertyValue<String?>("CreditNoteDescription"); set => SetPropertyValue<String?>("CreditNoteDescription", value); }
                [ODataProperty]
                public DateTime? DeliveryDate { get => GetPropertyValue<DateTime?>("DeliveryDate"); set => SetPropertyValue<DateTime?>("DeliveryDate", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? PaymentDueDate { get => GetPropertyValue<DateTime?>("PaymentDueDate"); set => SetPropertyValue<DateTime?>("PaymentDueDate", value); }
                [ODataProperty]
                public DateTime? PaymentDueStartDate { get => GetPropertyValue<DateTime?>("PaymentDueStartDate"); set => SetPropertyValue<DateTime?>("PaymentDueStartDate", value); }
                [ODataProperty]
                public MultilanguageString? PaymentTypeDescription { get => GetPropertyValue<MultilanguageString?>("PaymentTypeDescription"); set => SetPropertyValue<MultilanguageString?>("PaymentTypeDescription", value); }
                [ODataProperty]
                public Crm.Invoicing.Invoice? CreditNoteOriginalInvoice { get => GetPropertyValue<Crm.Invoicing.Invoice>("CreditNoteOriginalInvoice"); set => SetPropertyValue<Crm.Invoicing.Invoice>("CreditNoteOriginalInvoice", value); }
                [ODataProperty]
                public Crm.Invoicing.InvoiceOrder? CreditNoteOriginalInvoiceOrder { get => GetPropertyValue<Crm.Invoicing.InvoiceOrder>("CreditNoteOriginalInvoiceOrder"); set => SetPropertyValue<Crm.Invoicing.InvoiceOrder>("CreditNoteOriginalInvoiceOrder", value); }
                [ODataProperty]
                public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
                [ODataProperty]
                public Finance.Vat.DealType? DealType { get => GetPropertyValue<Finance.Vat.DealType>("DealType"); set => SetPropertyValue<Finance.Vat.DealType>("DealType", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrder? SalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder", value); }
                [ODataProperty]
                public IEnumerable<Crm.Invoicing.InvoiceOrderLine>? Lines { get => GetCollection<Crm.Invoicing.InvoiceOrderLine>("Lines"); set => SetCollection<Crm.Invoicing.InvoiceOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Crm_Invoicing_InvoiceOrderLines", TableName = "Crm_Invoice_Order_Lines")]
            public partial class InvoiceOrderLine: EntityResource
            {
                public InvoiceOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Invoicing_InvoiceOrderLines";
                public const string EntityTableName = "Crm_Invoice_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Crm.Invoicing.InvoicingBusinessReason? BusinessReason { get => GetPropertyValue<Crm.Invoicing.InvoicingBusinessReason?>("BusinessReason"); set => SetPropertyValue<Crm.Invoicing.InvoicingBusinessReason?>("BusinessReason", value); }
                [ODataProperty]
                public Amount? LineAmount { get => GetPropertyValue<Amount?>("LineAmount"); set => SetPropertyValue<Amount?>("LineAmount", value); }
                [ODataProperty]
                public Decimal? LineCustomDiscountPercent { get => GetPropertyValue<Decimal?>("LineCustomDiscountPercent"); set => SetPropertyValue<Decimal?>("LineCustomDiscountPercent", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? LineStandardDiscountPercent { get => GetPropertyValue<Decimal?>("LineStandardDiscountPercent"); set => SetPropertyValue<Decimal?>("LineStandardDiscountPercent", value); }
                [ODataProperty]
                public MultilanguageString? ProductDescription { get => GetPropertyValue<MultilanguageString?>("ProductDescription"); set => SetPropertyValue<MultilanguageString?>("ProductDescription", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Amount? UnitPrice { get => GetPropertyValue<Amount?>("UnitPrice"); set => SetPropertyValue<Amount?>("UnitPrice", value); }
                [Owner]
                [ODataProperty]
                public Crm.Invoicing.InvoiceOrder? InvoiceOrder { get => GetPropertyValue<Crm.Invoicing.InvoiceOrder>("InvoiceOrder"); set => SetPropertyValue<Crm.Invoicing.InvoiceOrder>("InvoiceOrder", value); }
                [ODataProperty]
                public Crm.Invoicing.InvoiceOrder? Document { get => GetPropertyValue<Crm.Invoicing.InvoiceOrder>("Document"); set => SetPropertyValue<Crm.Invoicing.InvoiceOrder>("Document", value); }
                [ODataProperty]
                public Finance.Vat.DealType? LineDealType { get => GetPropertyValue<Finance.Vat.DealType>("LineDealType"); set => SetPropertyValue<Finance.Vat.DealType>("LineDealType", value); }
                [ODataProperty]
                public Crm.LineDiscount? LineDiscount { get => GetPropertyValue<Crm.LineDiscount>("LineDiscount"); set => SetPropertyValue<Crm.LineDiscount>("LineDiscount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentTransaction? PaymentTransaction { get => GetPropertyValue<Finance.Payments.PaymentTransaction>("PaymentTransaction"); set => SetPropertyValue<Finance.Payments.PaymentTransaction>("PaymentTransaction", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrder? SalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrderLine? SalesOrderLine { get => GetPropertyValue<Crm.Sales.SalesOrderLine>("SalesOrderLine"); set => SetPropertyValue<Crm.Sales.SalesOrderLine>("SalesOrderLine", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransactionLine? TransactionLine { get => GetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine"); set => SetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Invoicing_InvoicesOptions", TableName = "Crm_Invoices_Options")]
            public partial class InvoicesOption: EntityResource
            {
                public InvoicesOption(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Invoicing_InvoicesOptions";
                public const string EntityTableName = "Crm_Invoices_Options";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? CreatesVATEntries { get => GetPropertyValue<Boolean?>("CreatesVATEntries"); set => SetPropertyValue<Boolean?>("CreatesVATEntries", value); }
                [ODataProperty]
                public General.SignRestriction? SignRestriction { get => GetPropertyValue<General.SignRestriction?>("SignRestriction"); set => SetPropertyValue<General.SignRestriction?>("SignRestriction", value); }
                [ODataProperty]
                public General.SignRestriction? TotalAmountSignRestriction { get => GetPropertyValue<General.SignRestriction?>("TotalAmountSignRestriction"); set => SetPropertyValue<General.SignRestriction?>("TotalAmountSignRestriction", value); }
                [ODataProperty]
                public Finance.Vat.DealType? DefaultDealType { get => GetPropertyValue<Finance.Vat.DealType>("DefaultDealType"); set => SetPropertyValue<Finance.Vat.DealType>("DefaultDealType", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                [ODataProperty]
                public General.DocumentAmountType? VATDeviationDocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("VATDeviationDocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("VATDeviationDocumentAmountType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            public enum InvoicingBusinessReason
            {
                Payment = 0,
                Shipment = 1
            }
        }
        [Entity(EntitySet = "Crm_LineDiscounts", TableName = "Crm_Line_Discounts")]
        public partial class LineDiscount: EntityResource
        {
            public LineDiscount(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_LineDiscounts";
            public const string EntityTableName = "Crm_Line_Discounts";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
            [ODataProperty]
            public Crm.LineDiscountsRepository.DiscountLevel? DiscountLevel { get => GetPropertyValue<Crm.LineDiscountsRepository.DiscountLevel?>("DiscountLevel"); set => SetPropertyValue<Crm.LineDiscountsRepository.DiscountLevel?>("DiscountLevel", value); }
            [ODataProperty]
            public Decimal? DiscountPercent { get => GetPropertyValue<Decimal?>("DiscountPercent"); set => SetPropertyValue<Decimal?>("DiscountPercent", value); }
            [ODataProperty]
            public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
            [ODataProperty]
            public Quantity? MaxQuantity { get => GetPropertyValue<Quantity?>("MaxQuantity"); set => SetPropertyValue<Quantity?>("MaxQuantity", value); }
            [ODataProperty]
            public Quantity? MinQuantity { get => GetPropertyValue<Quantity?>("MinQuantity"); set => SetPropertyValue<Quantity?>("MinQuantity", value); }
            [ODataProperty]
            public General.Priority? Priority { get => GetPropertyValue<General.Priority?>("Priority"); set => SetPropertyValue<General.Priority?>("Priority", value); }
            [ODataProperty]
            public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
            [ODataProperty]
            public Crm.Marketing.Campaign? Campaign { get => GetPropertyValue<Crm.Marketing.Campaign>("Campaign"); set => SetPropertyValue<Crm.Marketing.Campaign>("Campaign", value); }
            [ODataProperty]
            public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
            [ODataProperty]
            public Crm.CustomerType? CustomerType { get => GetPropertyValue<Crm.CustomerType>("CustomerType"); set => SetPropertyValue<Crm.CustomerType>("CustomerType", value); }
            [ODataProperty]
            public Crm.Marketing.DistributionChannel? DistributionChannel { get => GetPropertyValue<Crm.Marketing.DistributionChannel>("DistributionChannel"); set => SetPropertyValue<Crm.Marketing.DistributionChannel>("DistributionChannel", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
            [ODataProperty]
            public Crm.PriceList? PriceList { get => GetPropertyValue<Crm.PriceList>("PriceList"); set => SetPropertyValue<Crm.PriceList>("PriceList", value); }
            [ODataProperty]
            public General.Products.ProductGroup? ProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ProductGroup", value); }
            [ODataProperty]
            public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
            [ODataProperty]
            public Crm.Marketing.TargetGroup? TargetGroup { get => GetPropertyValue<Crm.Marketing.TargetGroup>("TargetGroup"); set => SetPropertyValue<Crm.Marketing.TargetGroup>("TargetGroup", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace LineDiscountsRepository
        {
            public enum DiscountLevel
            {
                One = 0,
                Two = 1,
                Three = 2
            }
        }
        namespace Marketing
        {
            [Entity(EntitySet = "Crm_Marketing_BonusPrograms", TableName = "Crm_Bonus_Programs")]
            public partial class BonusProgram: EntityResource
            {
                public BonusProgram(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_BonusPrograms";
                public const string EntityTableName = "Crm_Bonus_Programs";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public Crm.Marketing.BonusProgramsRepository.BonusAction? BonusAction { get => GetPropertyValue<Crm.Marketing.BonusProgramsRepository.BonusAction?>("BonusAction"); set => SetPropertyValue<Crm.Marketing.BonusProgramsRepository.BonusAction?>("BonusAction", value); }
                [ODataProperty]
                public Decimal? BonusDocumentAmountPercent { get => GetPropertyValue<Decimal?>("BonusDocumentAmountPercent"); set => SetPropertyValue<Decimal?>("BonusDocumentAmountPercent", value); }
                [ODataProperty]
                public Decimal? BonusLineDiscountPercent { get => GetPropertyValue<Decimal?>("BonusLineDiscountPercent"); set => SetPropertyValue<Decimal?>("BonusLineDiscountPercent", value); }
                [ODataProperty]
                public Quantity? BonusProductQuantity { get => GetPropertyValue<Quantity?>("BonusProductQuantity"); set => SetPropertyValue<Quantity?>("BonusProductQuantity", value); }
                [ODataProperty]
                public Quantity? BonusProductQuantityMultiplierForEachLotSize { get => GetPropertyValue<Quantity?>("BonusProductQuantityMultiplierForEachLotSize"); set => SetPropertyValue<Quantity?>("BonusProductQuantityMultiplierForEachLotSize", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? ConditionCustomerFilterXML { get => GetPropertyValue<String?>("ConditionCustomerFilterXML"); set => SetPropertyValue<String?>("ConditionCustomerFilterXML", value); }
                [ODataProperty]
                public String? ConditionDistributionChannelFilterXML { get => GetPropertyValue<String?>("ConditionDistributionChannelFilterXML"); set => SetPropertyValue<String?>("ConditionDistributionChannelFilterXML", value); }
                [ODataProperty]
                public DateTime? ConditionFromDate { get => GetPropertyValue<DateTime?>("ConditionFromDate"); set => SetPropertyValue<DateTime?>("ConditionFromDate", value); }
                [ODataProperty]
                public Amount? ConditionMaxAmount { get => GetPropertyValue<Amount?>("ConditionMaxAmount"); set => SetPropertyValue<Amount?>("ConditionMaxAmount", value); }
                [ODataProperty]
                public Quantity? ConditionMaxQuantity { get => GetPropertyValue<Quantity?>("ConditionMaxQuantity"); set => SetPropertyValue<Quantity?>("ConditionMaxQuantity", value); }
                [ODataProperty]
                public Amount? ConditionMinAmount { get => GetPropertyValue<Amount?>("ConditionMinAmount"); set => SetPropertyValue<Amount?>("ConditionMinAmount", value); }
                [ODataProperty]
                public Quantity? ConditionMinQuantity { get => GetPropertyValue<Quantity?>("ConditionMinQuantity"); set => SetPropertyValue<Quantity?>("ConditionMinQuantity", value); }
                [ODataProperty]
                public String? ConditionShipToCustomerFilterXML { get => GetPropertyValue<String?>("ConditionShipToCustomerFilterXML"); set => SetPropertyValue<String?>("ConditionShipToCustomerFilterXML", value); }
                [ODataProperty]
                public DateTime? ConditionToDate { get => GetPropertyValue<DateTime?>("ConditionToDate"); set => SetPropertyValue<DateTime?>("ConditionToDate", value); }
                [ODataProperty]
                public Crm.Marketing.BonusProgramsRepository.Priority? Priority { get => GetPropertyValue<Crm.Marketing.BonusProgramsRepository.Priority?>("Priority"); set => SetPropertyValue<Crm.Marketing.BonusProgramsRepository.Priority?>("Priority", value); }
                [ODataProperty]
                public General.DocumentAmountType? BonusDocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("BonusDocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("BonusDocumentAmountType", value); }
                [ODataProperty]
                public General.Products.Product? BonusProduct { get => GetPropertyValue<General.Products.Product>("BonusProduct"); set => SetPropertyValue<General.Products.Product>("BonusProduct", value); }
                [ODataProperty]
                public General.MeasurementUnit? BonusProductQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("BonusProductQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("BonusProductQuantityUnit", value); }
                [ODataProperty]
                public Crm.Marketing.Campaign? Campaign { get => GetPropertyValue<Crm.Marketing.Campaign>("Campaign"); set => SetPropertyValue<Crm.Marketing.Campaign>("Campaign", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? CompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("CompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("CompanyLocation", value); }
                [ODataProperty]
                public Crm.Customer? ConditionCustomer { get => GetPropertyValue<Crm.Customer>("ConditionCustomer"); set => SetPropertyValue<Crm.Customer>("ConditionCustomer", value); }
                [ODataProperty]
                public Crm.Marketing.DistributionChannel? ConditionDistributionChannel { get => GetPropertyValue<Crm.Marketing.DistributionChannel>("ConditionDistributionChannel"); set => SetPropertyValue<Crm.Marketing.DistributionChannel>("ConditionDistributionChannel", value); }
                [ODataProperty]
                public General.Currency? ConditionDocumentCurrency { get => GetPropertyValue<General.Currency>("ConditionDocumentCurrency"); set => SetPropertyValue<General.Currency>("ConditionDocumentCurrency", value); }
                [ODataProperty]
                public Crm.PriceList? ConditionPriceList { get => GetPropertyValue<Crm.PriceList>("ConditionPriceList"); set => SetPropertyValue<Crm.PriceList>("ConditionPriceList", value); }
                [ODataProperty]
                public General.Products.ProductGroup? ConditionProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ConditionProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ConditionProductGroup", value); }
                [ODataProperty]
                public General.Products.Product? ConditionProduct { get => GetPropertyValue<General.Products.Product>("ConditionProduct"); set => SetPropertyValue<General.Products.Product>("ConditionProduct", value); }
                [ODataProperty]
                public Crm.Customer? ConditionShipToCustomer { get => GetPropertyValue<Crm.Customer>("ConditionShipToCustomer"); set => SetPropertyValue<Crm.Customer>("ConditionShipToCustomer", value); }
                [ODataProperty]
                public Crm.Marketing.TargetGroup? ConditionTargetGroup { get => GetPropertyValue<Crm.Marketing.TargetGroup>("ConditionTargetGroup"); set => SetPropertyValue<Crm.Marketing.TargetGroup>("ConditionTargetGroup", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public IEnumerable<Crm.Marketing.BonusProgramProduct>? Products { get => GetCollection<Crm.Marketing.BonusProgramProduct>("Products"); set => SetCollection<Crm.Marketing.BonusProgramProduct>("Products", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_BonusProgramProducts", TableName = "Crm_Bonus_Program_Products")]
            public partial class BonusProgramProduct: EntityResource
            {
                public BonusProgramProduct(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_BonusProgramProducts";
                public const string EntityTableName = "Crm_Bonus_Program_Products";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [Owner]
                [ODataProperty]
                public Crm.Marketing.BonusProgram? BonusProgram { get => GetPropertyValue<Crm.Marketing.BonusProgram>("BonusProgram"); set => SetPropertyValue<Crm.Marketing.BonusProgram>("BonusProgram", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace BonusProgramsRepository
            {
                public enum BonusAction
                {
                    Product = 0,
                    Discount = 1,
                    CascadeDiscount = 2
                }
                public enum Priority
                {
                    v_1Lowest = 0,
                    Two = 1,
                    Three = 2,
                    Four = 3,
                    v_5Highest = 4
                }
            }
            [Entity(EntitySet = "Crm_Marketing_Campaigns", TableName = "Crm_Campaigns")]
            public partial class Campaign: EntityResource
            {
                public Campaign(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_Campaigns";
                public const string EntityTableName = "Crm_Campaigns";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public DateTime? EndDate { get => GetPropertyValue<DateTime?>("EndDate"); set => SetPropertyValue<DateTime?>("EndDate", value); }
                [ODataProperty]
                public Decimal? ForecastedCost { get => GetPropertyValue<Decimal?>("ForecastedCost"); set => SetPropertyValue<Decimal?>("ForecastedCost", value); }
                [ODataProperty]
                public DateTime? StartDate { get => GetPropertyValue<DateTime?>("StartDate"); set => SetPropertyValue<DateTime?>("StartDate", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_CompanySizeClasses", TableName = "Crm_Company_Size_Classes")]
            public partial class CompanySizeClass: EntityResource
            {
                public CompanySizeClass(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_CompanySizeClasses";
                public const string EntityTableName = "Crm_Company_Size_Classes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public Int32? FromEmployees { get => GetPropertyValue<Int32?>("FromEmployees"); set => SetPropertyValue<Int32?>("FromEmployees", value); }
                [ODataProperty]
                public Decimal? FromRevenue { get => GetPropertyValue<Decimal?>("FromRevenue"); set => SetPropertyValue<Decimal?>("FromRevenue", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ToEmployees { get => GetPropertyValue<Int32?>("ToEmployees"); set => SetPropertyValue<Int32?>("ToEmployees", value); }
                [ODataProperty]
                public Decimal? ToRevenue { get => GetPropertyValue<Decimal?>("ToRevenue"); set => SetPropertyValue<Decimal?>("ToRevenue", value); }
                [ODataProperty]
                public General.Currency? RevenueCurrency { get => GetPropertyValue<General.Currency>("RevenueCurrency"); set => SetPropertyValue<General.Currency>("RevenueCurrency", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_Competitors", TableName = "Crm_Competitors")]
            public partial class Competitor: EntityResource
            {
                public Competitor(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_Competitors";
                public const string EntityTableName = "Crm_Competitors";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public IEnumerable<Crm.Marketing.CompetitorSolution>? Solutions { get => GetCollection<Crm.Marketing.CompetitorSolution>("Solutions"); set => SetCollection<Crm.Marketing.CompetitorSolution>("Solutions", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_CompetitorSolutions", TableName = "Crm_Competitor_Solutions")]
            public partial class CompetitorSolution: EntityResource
            {
                public CompetitorSolution(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_CompetitorSolutions";
                public const string EntityTableName = "Crm_Competitor_Solutions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Crm.Marketing.CompanySizeClass? CompanySizeClass { get => GetPropertyValue<Crm.Marketing.CompanySizeClass>("CompanySizeClass"); set => SetPropertyValue<Crm.Marketing.CompanySizeClass>("CompanySizeClass", value); }
                [Owner]
                [ODataProperty]
                public Crm.Marketing.Competitor? Competitor { get => GetPropertyValue<Crm.Marketing.Competitor>("Competitor"); set => SetPropertyValue<Crm.Marketing.Competitor>("Competitor", value); }
                [ODataProperty]
                public Crm.Marketing.Industry? Industry { get => GetPropertyValue<Crm.Marketing.Industry>("Industry"); set => SetPropertyValue<Crm.Marketing.Industry>("Industry", value); }
                [ODataProperty]
                public Crm.Marketing.MarketingSolution? OurMarketingSolution { get => GetPropertyValue<Crm.Marketing.MarketingSolution>("OurMarketingSolution"); set => SetPropertyValue<Crm.Marketing.MarketingSolution>("OurMarketingSolution", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_DistributionChannels", TableName = "Crm_Distribution_Channels")]
            public partial class DistributionChannel: EntityResource
            {
                public DistributionChannel(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_DistributionChannels";
                public const string EntityTableName = "Crm_Distribution_Channels";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_ForecastItems", TableName = "Crm_Forecast_Items")]
            public partial class ForecastItem: EntityResource
            {
                public ForecastItem(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_ForecastItems";
                public const string EntityTableName = "Crm_Forecast_Items";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? Date { get => GetPropertyValue<DateTime?>("Date"); set => SetPropertyValue<DateTime?>("Date", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public General.Geography.Country? Country { get => GetPropertyValue<General.Geography.Country>("Country"); set => SetPropertyValue<General.Geography.Country>("Country", value); }
                [ODataProperty]
                public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
                [ODataProperty]
                public Crm.Dealer? Dealer { get => GetPropertyValue<Crm.Dealer>("Dealer"); set => SetPropertyValue<Crm.Dealer>("Dealer", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Crm.SalesPerson? SalesPerson { get => GetPropertyValue<Crm.SalesPerson>("SalesPerson"); set => SetPropertyValue<Crm.SalesPerson>("SalesPerson", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_Industries", TableName = "Crm_Industries")]
            public partial class Industry: EntityResource
            {
                public Industry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_Industries";
                public const string EntityTableName = "Crm_Industries";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_MarketingActivities", TableName = "Crm_Activities")]
            public partial class MarketingActivity: General.Contacts.Activity
            {
                public MarketingActivity(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Crm_Marketing_MarketingActivities";
                public new const string EntityTableName = "Crm_Activities";
                [ODataProperty]
                public Boolean? ActivitiesCreated { get => GetPropertyValue<Boolean?>("ActivitiesCreated"); set => SetPropertyValue<Boolean?>("ActivitiesCreated", value); }
                [ODataProperty]
                public Amount? ForecastedCost { get => GetPropertyValue<Amount?>("ForecastedCost"); set => SetPropertyValue<Amount?>("ForecastedCost", value); }
                [ODataProperty]
                public Crm.Marketing.Campaign? Campaign { get => GetPropertyValue<Crm.Marketing.Campaign>("Campaign"); set => SetPropertyValue<Crm.Marketing.Campaign>("Campaign", value); }
                [ODataProperty]
                public Crm.Marketing.TargetGroup? TargetGroup { get => GetPropertyValue<Crm.Marketing.TargetGroup>("TargetGroup"); set => SetPropertyValue<Crm.Marketing.TargetGroup>("TargetGroup", value); }
                [ODataProperty]
                public IEnumerable<Crm.Marketing.MarketingActivityLine>? Lines { get => GetCollection<Crm.Marketing.MarketingActivityLine>("Lines"); set => SetCollection<Crm.Marketing.MarketingActivityLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Crm_Marketing_MarketingActivityLines", TableName = "Crm_Marketing_Activity_Lines")]
            public partial class MarketingActivityLine: EntityResource
            {
                public MarketingActivityLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_MarketingActivityLines";
                public const string EntityTableName = "Crm_Marketing_Activity_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? CompetitorPrice { get => GetPropertyValue<Decimal?>("CompetitorPrice"); set => SetPropertyValue<Decimal?>("CompetitorPrice", value); }
                [ODataProperty]
                public Quantity? InStoreAvailableQuantity { get => GetPropertyValue<Quantity?>("InStoreAvailableQuantity"); set => SetPropertyValue<Quantity?>("InStoreAvailableQuantity", value); }
                [ODataProperty]
                public String? InStoreLocation { get => GetPropertyValue<String?>("InStoreLocation"); set => SetPropertyValue<String?>("InStoreLocation", value); }
                [ODataProperty]
                public Decimal? InStorePrice { get => GetPropertyValue<Decimal?>("InStorePrice"); set => SetPropertyValue<Decimal?>("InStorePrice", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Quantity? OrderQuantity { get => GetPropertyValue<Quantity?>("OrderQuantity"); set => SetPropertyValue<Quantity?>("OrderQuantity", value); }
                [ODataProperty]
                public Crm.Marketing.Competitor? Competitor { get => GetPropertyValue<Crm.Marketing.Competitor>("Competitor"); set => SetPropertyValue<Crm.Marketing.Competitor>("Competitor", value); }
                [Owner]
                [ODataProperty]
                public Crm.Marketing.MarketingActivity? MarketingActivity { get => GetPropertyValue<Crm.Marketing.MarketingActivity>("MarketingActivity"); set => SetPropertyValue<Crm.Marketing.MarketingActivity>("MarketingActivity", value); }
                [ODataProperty]
                public Crm.Marketing.MarketingActivity? Document { get => GetPropertyValue<Crm.Marketing.MarketingActivity>("Document"); set => SetPropertyValue<Crm.Marketing.MarketingActivity>("Document", value); }
                [ODataProperty]
                public Crm.Marketing.MarketingActivityLineType? MarketingActivityLineType { get => GetPropertyValue<Crm.Marketing.MarketingActivityLineType>("MarketingActivityLineType"); set => SetPropertyValue<Crm.Marketing.MarketingActivityLineType>("MarketingActivityLineType", value); }
                [ODataProperty]
                public General.MeasurementUnit? OrderQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("OrderQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("OrderQuantityUnit", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_MarketingActivityLineTypes", TableName = "Crm_Marketing_Activity_Line_Types")]
            public partial class MarketingActivityLineType: EntityResource
            {
                public MarketingActivityLineType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_MarketingActivityLineTypes";
                public const string EntityTableName = "Crm_Marketing_Activity_Line_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_MarketingSolutions", TableName = "Crm_Marketing_Solutions")]
            public partial class MarketingSolution: EntityResource
            {
                public MarketingSolution(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_MarketingSolutions";
                public const string EntityTableName = "Crm_Marketing_Solutions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Crm.Marketing.CompanySizeClass? CompanySizeClass { get => GetPropertyValue<Crm.Marketing.CompanySizeClass>("CompanySizeClass"); set => SetPropertyValue<Crm.Marketing.CompanySizeClass>("CompanySizeClass", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Crm.Marketing.Industry? Industry { get => GetPropertyValue<Crm.Marketing.Industry>("Industry"); set => SetPropertyValue<Crm.Marketing.Industry>("Industry", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_ProductDistributionChannels", TableName = "Crm_Product_Distribution_Channels")]
            public partial class ProductDistributionChannel: EntityResource
            {
                public ProductDistributionChannel(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_ProductDistributionChannels";
                public const string EntityTableName = "Crm_Product_Distribution_Channels";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Amount? MinimalSalesPricePerLot { get => GetPropertyValue<Amount?>("MinimalSalesPricePerLot"); set => SetPropertyValue<Amount?>("MinimalSalesPricePerLot", value); }
                [ODataProperty]
                public Decimal? MinimalSalesQuantityBase { get => GetPropertyValue<Decimal?>("MinimalSalesQuantityBase"); set => SetPropertyValue<Decimal?>("MinimalSalesQuantityBase", value); }
                [ODataProperty]
                public DateTime? ToDate { get => GetPropertyValue<DateTime?>("ToDate"); set => SetPropertyValue<DateTime?>("ToDate", value); }
                [ODataProperty]
                public Crm.Marketing.DistributionChannel? DistributionChannel { get => GetPropertyValue<Crm.Marketing.DistributionChannel>("DistributionChannel"); set => SetPropertyValue<Crm.Marketing.DistributionChannel>("DistributionChannel", value); }
                [Owner]
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_TargetGroups", TableName = "Crm_Target_Groups")]
            public partial class TargetGroup: EntityResource
            {
                public TargetGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_TargetGroups";
                public const string EntityTableName = "Crm_Target_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public IEnumerable<Crm.Marketing.TargetGroupMember>? Members { get => GetCollection<Crm.Marketing.TargetGroupMember>("Members"); set => SetCollection<Crm.Marketing.TargetGroupMember>("Members", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Marketing_TargetGroupMembers", TableName = "Crm_Target_Group_Members")]
            public partial class TargetGroupMember: EntityResource
            {
                public TargetGroupMember(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Marketing_TargetGroupMembers";
                public const string EntityTableName = "Crm_Target_Group_Members";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [Owner]
                [ODataProperty]
                public Crm.Marketing.TargetGroup? TargetGroup { get => GetPropertyValue<Crm.Marketing.TargetGroup>("TargetGroup"); set => SetPropertyValue<Crm.Marketing.TargetGroup>("TargetGroup", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        public enum PaymentPlanDueDateSource
        {
            SpecifyTheDateExplicitly = 0,
            UseInvoiceDate = 1,
            UseSalesOrderDate = 2,
            UseSalesOrderDueDate = 3,
            UseInvoiceDueDate = 4
        }
        namespace Pos
        {
            [Entity(EntitySet = "Crm_Pos_Devices", TableName = "Pos_Devices")]
            public partial class Device: EntityResource
            {
                public Device(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pos_Devices";
                public const string EntityTableName = "Pos_Devices";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? DeviceRegistrationNo { get => GetPropertyValue<String?>("DeviceRegistrationNo"); set => SetPropertyValue<String?>("DeviceRegistrationNo", value); }
                [ODataProperty]
                public Crm.Pos.DevicesRepository.DeviceType? DeviceType { get => GetPropertyValue<Crm.Pos.DevicesRepository.DeviceType?>("DeviceType"); set => SetPropertyValue<Crm.Pos.DevicesRepository.DeviceType?>("DeviceType", value); }
                [ODataProperty]
                public String? ElectronicAddress { get => GetPropertyValue<String?>("ElectronicAddress"); set => SetPropertyValue<String?>("ElectronicAddress", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Crm.Pos.DevicesRepository.ProtocolName? ProtocolName { get => GetPropertyValue<Crm.Pos.DevicesRepository.ProtocolName?>("ProtocolName"); set => SetPropertyValue<Crm.Pos.DevicesRepository.ProtocolName?>("ProtocolName", value); }
                [ODataProperty]
                public String? SettingsJson { get => GetPropertyValue<String?>("SettingsJson"); set => SetPropertyValue<String?>("SettingsJson", value); }
                [Owner]
                [ODataProperty]
                public Crm.Pos.Terminal? PosTerminal { get => GetPropertyValue<Crm.Pos.Terminal>("PosTerminal"); set => SetPropertyValue<Crm.Pos.Terminal>("PosTerminal", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DevicesRepository
            {
                public enum DeviceType
                {
                    PaymentTerminal = 0,
                    CashDrawer = 1,
                    FiscalPrinter = 2,
                    Other = 3
                }
                public enum ProtocolName
                {
                    ERPNETFP = 0
                }
            }
            [Entity(EntitySet = "Crm_Pos_Locations", TableName = "Pos_Locations")]
            public partial class Location: EntityResource
            {
                public Location(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pos_Locations";
                public const string EntityTableName = "Pos_Locations";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? PosLocationCode { get => GetPropertyValue<String?>("PosLocationCode"); set => SetPropertyValue<String?>("PosLocationCode", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Pos_Operators", TableName = "Pos_Operators")]
            public partial class Operator: EntityResource
            {
                public Operator(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pos_Operators";
                public const string EntityTableName = "Pos_Operators";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? PosOperatorCode { get => GetPropertyValue<String?>("PosOperatorCode"); set => SetPropertyValue<String?>("PosOperatorCode", value); }
                [ODataProperty]
                public DateTime? StartingDate { get => GetPropertyValue<DateTime?>("StartingDate"); set => SetPropertyValue<DateTime?>("StartingDate", value); }
                [ODataProperty]
                public DateTime? TerminationDate { get => GetPropertyValue<DateTime?>("TerminationDate"); set => SetPropertyValue<DateTime?>("TerminationDate", value); }
                [ODataProperty]
                public Crm.Pos.Terminal? DefaultPosTerminal { get => GetPropertyValue<Crm.Pos.Terminal>("DefaultPosTerminal"); set => SetPropertyValue<Crm.Pos.Terminal>("DefaultPosTerminal", value); }
                [ODataProperty]
                public Crm.Pos.Location? PosLocation { get => GetPropertyValue<Crm.Pos.Location>("PosLocation"); set => SetPropertyValue<Crm.Pos.Location>("PosLocation", value); }
                [ODataProperty]
                public Crm.Pos.Role? PosRole { get => GetPropertyValue<Crm.Pos.Role>("PosRole"); set => SetPropertyValue<Crm.Pos.Role>("PosRole", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Pos_ProductTypeTaxGroups", TableName = "Pos_Product_Type_Tax_Groups")]
            public partial class ProductTypeTaxGroup: EntityResource
            {
                public ProductTypeTaxGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pos_ProductTypeTaxGroups";
                public const string EntityTableName = "Pos_Product_Type_Tax_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public General.PartyApplicableLegislationsRepository.ApplicableLegislation? ApplicableLegislation { get => GetPropertyValue<General.PartyApplicableLegislationsRepository.ApplicableLegislation?>("ApplicableLegislation"); set => SetPropertyValue<General.PartyApplicableLegislationsRepository.ApplicableLegislation?>("ApplicableLegislation", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Crm.Pos.ProductTypeTaxGroupsRepository.TaxGroup? TaxGroup { get => GetPropertyValue<Crm.Pos.ProductTypeTaxGroupsRepository.TaxGroup?>("TaxGroup"); set => SetPropertyValue<Crm.Pos.ProductTypeTaxGroupsRepository.TaxGroup?>("TaxGroup", value); }
                [Owner]
                [ODataProperty]
                public General.Products.ProductType? ProductType { get => GetPropertyValue<General.Products.ProductType>("ProductType"); set => SetPropertyValue<General.Products.ProductType>("ProductType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ProductTypeTaxGroupsRepository
            {
                public enum TaxGroup
                {
                    Zero = 0,
                    One = 1,
                    Two = 2,
                    Three = 3,
                    Four = 4,
                    Five = 5,
                    Six = 6,
                    Seven = 7,
                    Eight = 8
                }
            }
            [Entity(EntitySet = "Crm_Pos_Roles", TableName = "Pos_Roles")]
            public partial class Role: EntityResource
            {
                public Role(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pos_Roles";
                public const string EntityTableName = "Pos_Roles";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? CanProcessMinusSales { get => GetPropertyValue<Boolean?>("CanProcessMinusSales"); set => SetPropertyValue<Boolean?>("CanProcessMinusSales", value); }
                [ODataProperty]
                public Boolean? CanVoidSales { get => GetPropertyValue<Boolean?>("CanVoidSales"); set => SetPropertyValue<Boolean?>("CanVoidSales", value); }
                [ODataProperty]
                public String? PosRoleCode { get => GetPropertyValue<String?>("PosRoleCode"); set => SetPropertyValue<String?>("PosRoleCode", value); }
                [ODataProperty]
                public MultilanguageString? PosRoleName { get => GetPropertyValue<MultilanguageString?>("PosRoleName"); set => SetPropertyValue<MultilanguageString?>("PosRoleName", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Pos_Sequences", TableName = "Pos_Sequences")]
            public partial class Sequence: EntityResource
            {
                public Sequence(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pos_Sequences";
                public const string EntityTableName = "Pos_Sequences";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? MaxNo { get => GetPropertyValue<String?>("MaxNo"); set => SetPropertyValue<String?>("MaxNo", value); }
                [ODataProperty]
                public String? NextNo { get => GetPropertyValue<String?>("NextNo"); set => SetPropertyValue<String?>("NextNo", value); }
                [ODataProperty]
                public Crm.Pos.Device? PosDevice { get => GetPropertyValue<Crm.Pos.Device>("PosDevice"); set => SetPropertyValue<Crm.Pos.Device>("PosDevice", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Pos_Terminals", TableName = "Pos_Terminals")]
            public partial class Terminal: EntityResource
            {
                public Terminal(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pos_Terminals";
                public const string EntityTableName = "Pos_Terminals";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? PosTerminalCode { get => GetPropertyValue<String?>("PosTerminalCode"); set => SetPropertyValue<String?>("PosTerminalCode", value); }
                [ODataProperty]
                public MultilanguageString? PosTerminalName { get => GetPropertyValue<MultilanguageString?>("PosTerminalName"); set => SetPropertyValue<MultilanguageString?>("PosTerminalName", value); }
                [ODataProperty]
                public Crm.Pos.Device? DefaultFiscalPrinterPosDevice { get => GetPropertyValue<Crm.Pos.Device>("DefaultFiscalPrinterPosDevice"); set => SetPropertyValue<Crm.Pos.Device>("DefaultFiscalPrinterPosDevice", value); }
                [ODataProperty]
                public Crm.Pos.Location? PosLocation { get => GetPropertyValue<Crm.Pos.Location>("PosLocation"); set => SetPropertyValue<Crm.Pos.Location>("PosLocation", value); }
                [ODataProperty]
                public IEnumerable<Crm.Pos.Device>? Devices { get => GetCollection<Crm.Pos.Device>("Devices"); set => SetCollection<Crm.Pos.Device>("Devices", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Presales
        {
            [Entity(EntitySet = "Crm_Presales_Deals", TableName = "Crm_Deals")]
            public partial class Deal: General.Document
            {
                public Deal(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Crm_Presales_Deals";
                public new const string EntityTableName = "Crm_Deals";
                [ODataProperty]
                public Crm.Presales.DealsRepository.DealStatus? DealStatus { get => GetPropertyValue<Crm.Presales.DealsRepository.DealStatus?>("DealStatus"); set => SetPropertyValue<Crm.Presales.DealsRepository.DealStatus?>("DealStatus", value); }
                [ODataProperty]
                public Amount? ExpectedRevenue { get => GetPropertyValue<Amount?>("ExpectedRevenue"); set => SetPropertyValue<Amount?>("ExpectedRevenue", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? RevenueEndDate { get => GetPropertyValue<DateTime?>("RevenueEndDate"); set => SetPropertyValue<DateTime?>("RevenueEndDate", value); }
                [ODataProperty]
                public DateTime? RevenueStartDate { get => GetPropertyValue<DateTime?>("RevenueStartDate"); set => SetPropertyValue<DateTime?>("RevenueStartDate", value); }
                [ODataProperty]
                public Decimal? SuccessProbability { get => GetPropertyValue<Decimal?>("SuccessProbability"); set => SetPropertyValue<Decimal?>("SuccessProbability", value); }
                [ODataProperty]
                public Crm.Dealer? Dealer { get => GetPropertyValue<Crm.Dealer>("Dealer"); set => SetPropertyValue<Crm.Dealer>("Dealer", value); }
                [ODataProperty]
                public General.Currency? ExpectedRevenueCurrency { get => GetPropertyValue<General.Currency>("ExpectedRevenueCurrency"); set => SetPropertyValue<General.Currency>("ExpectedRevenueCurrency", value); }
                [ODataProperty]
                public Crm.SalesPerson? LeadingSalesPerson { get => GetPropertyValue<Crm.SalesPerson>("LeadingSalesPerson"); set => SetPropertyValue<Crm.SalesPerson>("LeadingSalesPerson", value); }
                [ODataProperty]
                public Crm.Marketing.Competitor? LostToCompetitor { get => GetPropertyValue<Crm.Marketing.Competitor>("LostToCompetitor"); set => SetPropertyValue<Crm.Marketing.Competitor>("LostToCompetitor", value); }
                [ODataProperty]
                public Crm.Marketing.CompetitorSolution? LostToCompetitorSolution { get => GetPropertyValue<Crm.Marketing.CompetitorSolution>("LostToCompetitorSolution"); set => SetPropertyValue<Crm.Marketing.CompetitorSolution>("LostToCompetitorSolution", value); }
                [ODataProperty]
                public Crm.Marketing.MarketingSolution? MarketingSolution { get => GetPropertyValue<Crm.Marketing.MarketingSolution>("MarketingSolution"); set => SetPropertyValue<Crm.Marketing.MarketingSolution>("MarketingSolution", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public IEnumerable<Crm.Presales.DealLine>? Lines { get => GetCollection<Crm.Presales.DealLine>("Lines"); set => SetCollection<Crm.Presales.DealLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Crm_Presales_DealLines", TableName = "Crm_Deal_Lines")]
            public partial class DealLine: EntityResource
            {
                public DealLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Presales_DealLines";
                public const string EntityTableName = "Crm_Deal_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [Owner]
                [ODataProperty]
                public Crm.Presales.Deal? Deal { get => GetPropertyValue<Crm.Presales.Deal>("Deal"); set => SetPropertyValue<Crm.Presales.Deal>("Deal", value); }
                [ODataProperty]
                public Crm.Presales.Deal? Document { get => GetPropertyValue<Crm.Presales.Deal>("Document"); set => SetPropertyValue<Crm.Presales.Deal>("Document", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DealsRepository
            {
                public enum DealStatus
                {
                    InProgress = 0,
                    Successful = 1,
                    Unsuccessful = 2
                }
            }
            [Entity(EntitySet = "Crm_Presales_Leads", TableName = "Crm_Leads")]
            public partial class Lead: EntityResource
            {
                public Lead(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Presales_Leads";
                public const string EntityTableName = "Crm_Leads";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? CompanyName { get => GetPropertyValue<String?>("CompanyName"); set => SetPropertyValue<String?>("CompanyName", value); }
                [ODataProperty]
                public DateTime? CreationTimestampUtc { get => GetPropertyValue<DateTime?>("CreationTimestampUtc"); set => SetPropertyValue<DateTime?>("CreationTimestampUtc", value); }
                [ODataProperty]
                public DateTime? MQLTimestampUtc { get => GetPropertyValue<DateTime?>("MQLTimestampUtc"); set => SetPropertyValue<DateTime?>("MQLTimestampUtc", value); }
                [ODataProperty]
                public String? PersonEmail { get => GetPropertyValue<String?>("PersonEmail"); set => SetPropertyValue<String?>("PersonEmail", value); }
                [ODataProperty]
                public String? PersonFirstName { get => GetPropertyValue<String?>("PersonFirstName"); set => SetPropertyValue<String?>("PersonFirstName", value); }
                [ODataProperty]
                public String? PersonLastName { get => GetPropertyValue<String?>("PersonLastName"); set => SetPropertyValue<String?>("PersonLastName", value); }
                [ODataProperty]
                public String? PersonMobilePhone { get => GetPropertyValue<String?>("PersonMobilePhone"); set => SetPropertyValue<String?>("PersonMobilePhone", value); }
                [ODataProperty]
                public String? PersonSalutation { get => GetPropertyValue<String?>("PersonSalutation"); set => SetPropertyValue<String?>("PersonSalutation", value); }
                [ODataProperty]
                public String? PersonWebProfile { get => GetPropertyValue<String?>("PersonWebProfile"); set => SetPropertyValue<String?>("PersonWebProfile", value); }
                [ODataProperty]
                public String? PersonWorkPhone { get => GetPropertyValue<String?>("PersonWorkPhone"); set => SetPropertyValue<String?>("PersonWorkPhone", value); }
                [ODataProperty]
                public String? RoleInCompany { get => GetPropertyValue<String?>("RoleInCompany"); set => SetPropertyValue<String?>("RoleInCompany", value); }
                [ODataProperty]
                public DateTime? SQLTimestampUtc { get => GetPropertyValue<DateTime?>("SQLTimestampUtc"); set => SetPropertyValue<DateTime?>("SQLTimestampUtc", value); }
                [ODataProperty]
                public Crm.Presales.LeadsRepository.SystemStage? SystemStage { get => GetPropertyValue<Crm.Presales.LeadsRepository.SystemStage?>("SystemStage"); set => SetPropertyValue<Crm.Presales.LeadsRepository.SystemStage?>("SystemStage", value); }
                [ODataProperty]
                public Crm.SalesPerson? AssignedToSalesPerson { get => GetPropertyValue<Crm.SalesPerson>("AssignedToSalesPerson"); set => SetPropertyValue<Crm.SalesPerson>("AssignedToSalesPerson", value); }
                [ODataProperty]
                public Crm.Marketing.Campaign? Campaign { get => GetPropertyValue<Crm.Marketing.Campaign>("Campaign"); set => SetPropertyValue<Crm.Marketing.Campaign>("Campaign", value); }
                [ODataProperty]
                public Crm.Presales.Deal? ConvertedToDeal { get => GetPropertyValue<Crm.Presales.Deal>("ConvertedToDeal"); set => SetPropertyValue<Crm.Presales.Deal>("ConvertedToDeal", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
                [ODataProperty]
                public General.Contacts.Company? IdentifiedCompany { get => GetPropertyValue<General.Contacts.Company>("IdentifiedCompany"); set => SetPropertyValue<General.Contacts.Company>("IdentifiedCompany", value); }
                [ODataProperty]
                public General.Contacts.Person? IdentifiedPerson { get => GetPropertyValue<General.Contacts.Person>("IdentifiedPerson"); set => SetPropertyValue<General.Contacts.Person>("IdentifiedPerson", value); }
                [ODataProperty]
                public Crm.Presales.LeadUserStage? LeadUserStage { get => GetPropertyValue<Crm.Presales.LeadUserStage>("LeadUserStage"); set => SetPropertyValue<Crm.Presales.LeadUserStage>("LeadUserStage", value); }
                [ODataProperty]
                public Crm.Marketing.CompanySizeClass? MarketingCompanySize { get => GetPropertyValue<Crm.Marketing.CompanySizeClass>("MarketingCompanySize"); set => SetPropertyValue<Crm.Marketing.CompanySizeClass>("MarketingCompanySize", value); }
                [ODataProperty]
                public Crm.Marketing.Industry? MarketingIndustry { get => GetPropertyValue<Crm.Marketing.Industry>("MarketingIndustry"); set => SetPropertyValue<Crm.Marketing.Industry>("MarketingIndustry", value); }
                [ODataProperty]
                public Crm.Marketing.MarketingSolution? MarketingSolution { get => GetPropertyValue<Crm.Marketing.MarketingSolution>("MarketingSolution"); set => SetPropertyValue<Crm.Marketing.MarketingSolution>("MarketingSolution", value); }
                [ODataProperty]
                public Systems.Security.User? OwnerUser { get => GetPropertyValue<Systems.Security.User>("OwnerUser"); set => SetPropertyValue<Systems.Security.User>("OwnerUser", value); }
                [ODataProperty]
                public General.Geography.Area? SalesArea { get => GetPropertyValue<General.Geography.Area>("SalesArea"); set => SetPropertyValue<General.Geography.Area>("SalesArea", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace LeadsRepository
            {
                public enum SystemStage
                {
                    New = 0,
                    Qualifying = 1,
                    MarketingQualifiedLead = 2,
                    SalesQualifiedLead = 3,
                    Closed = 4
                }
            }
            [Entity(EntitySet = "Crm_Presales_LeadUserStages", TableName = "Crm_Lead_User_Stages")]
            public partial class LeadUserStage: EntityResource
            {
                public LeadUserStage(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Presales_LeadUserStages";
                public const string EntityTableName = "Crm_Lead_User_Stages";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Crm.Presales.LeadsRepository.SystemStage? SystemStage { get => GetPropertyValue<Crm.Presales.LeadsRepository.SystemStage?>("SystemStage"); set => SetPropertyValue<Crm.Presales.LeadsRepository.SystemStage?>("SystemStage", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Presales_Offers", TableName = "Crm_Offers")]
            public partial class Offer: General.Document
            {
                public Offer(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Crm_Presales_Offers";
                public new const string EntityTableName = "Crm_Offers";
                [ODataProperty]
                public DateTime? AcceptedOn { get => GetPropertyValue<DateTime?>("AcceptedOn"); set => SetPropertyValue<DateTime?>("AcceptedOn", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? PaymentDueDate { get => GetPropertyValue<DateTime?>("PaymentDueDate"); set => SetPropertyValue<DateTime?>("PaymentDueDate", value); }
                [ODataProperty]
                public DateTime? RequiredDeliveryDate { get => GetPropertyValue<DateTime?>("RequiredDeliveryDate"); set => SetPropertyValue<DateTime?>("RequiredDeliveryDate", value); }
                [ODataProperty]
                public DateTime? ValidTill { get => GetPropertyValue<DateTime?>("ValidTill"); set => SetPropertyValue<DateTime?>("ValidTill", value); }
                [ODataProperty]
                public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
                [ODataProperty]
                public Crm.Presales.Deal? Deal { get => GetPropertyValue<Crm.Presales.Deal>("Deal"); set => SetPropertyValue<Crm.Presales.Deal>("Deal", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public General.Contacts.Party? EndCustomerParty { get => GetPropertyValue<General.Contacts.Party>("EndCustomerParty"); set => SetPropertyValue<General.Contacts.Party>("EndCustomerParty", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public Crm.PriceList? PriceList { get => GetPropertyValue<Crm.PriceList>("PriceList"); set => SetPropertyValue<Crm.PriceList>("PriceList", value); }
                [ODataProperty]
                public General.Contacts.Person? RecipientPerson { get => GetPropertyValue<General.Contacts.Person>("RecipientPerson"); set => SetPropertyValue<General.Contacts.Person>("RecipientPerson", value); }
                [ODataProperty]
                public Crm.SalesPerson? SalesPerson { get => GetPropertyValue<Crm.SalesPerson>("SalesPerson"); set => SetPropertyValue<Crm.SalesPerson>("SalesPerson", value); }
                [ODataProperty]
                public Crm.Customer? ShipToCustomer { get => GetPropertyValue<Crm.Customer>("ShipToCustomer"); set => SetPropertyValue<Crm.Customer>("ShipToCustomer", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public IEnumerable<Crm.Presales.OfferLine>? Lines { get => GetCollection<Crm.Presales.OfferLine>("Lines"); set => SetCollection<Crm.Presales.OfferLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Crm_Presales_OfferLines", TableName = "Crm_Offer_Lines")]
            public partial class OfferLine: EntityResource
            {
                public OfferLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Presales_OfferLines";
                public const string EntityTableName = "Crm_Offer_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ChoiceGroupName { get => GetPropertyValue<String?>("ChoiceGroupName"); set => SetPropertyValue<String?>("ChoiceGroupName", value); }
                [ODataProperty]
                public Int32? DeliveryTermDays { get => GetPropertyValue<Int32?>("DeliveryTermDays"); set => SetPropertyValue<Int32?>("DeliveryTermDays", value); }
                [ODataProperty]
                public Int32? GuaranteePeriodDays { get => GetPropertyValue<Int32?>("GuaranteePeriodDays"); set => SetPropertyValue<Int32?>("GuaranteePeriodDays", value); }
                [ODataProperty]
                public Boolean? IsSelected { get => GetPropertyValue<Boolean?>("IsSelected"); set => SetPropertyValue<Boolean?>("IsSelected", value); }
                [ODataProperty]
                public Amount? LineAmount { get => GetPropertyValue<Amount?>("LineAmount"); set => SetPropertyValue<Amount?>("LineAmount", value); }
                [ODataProperty]
                public Decimal? LineCustomDiscountPercent { get => GetPropertyValue<Decimal?>("LineCustomDiscountPercent"); set => SetPropertyValue<Decimal?>("LineCustomDiscountPercent", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? LineStandardDiscountPercent { get => GetPropertyValue<Decimal?>("LineStandardDiscountPercent"); set => SetPropertyValue<Decimal?>("LineStandardDiscountPercent", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public MultilanguageString? ProductDescription { get => GetPropertyValue<MultilanguageString?>("ProductDescription"); set => SetPropertyValue<MultilanguageString?>("ProductDescription", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public DateTime? RequiredDeliveryDate { get => GetPropertyValue<DateTime?>("RequiredDeliveryDate"); set => SetPropertyValue<DateTime?>("RequiredDeliveryDate", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Amount? UnitPrice { get => GetPropertyValue<Amount?>("UnitPrice"); set => SetPropertyValue<Amount?>("UnitPrice", value); }
                [ODataProperty]
                public String? Variant { get => GetPropertyValue<String?>("Variant"); set => SetPropertyValue<String?>("Variant", value); }
                [ODataProperty]
                public Crm.LineDiscount? LineDiscount { get => GetPropertyValue<Crm.LineDiscount>("LineDiscount"); set => SetPropertyValue<Crm.LineDiscount>("LineDiscount", value); }
                [ODataProperty]
                public General.Contacts.Party? LineEndCustomerParty { get => GetPropertyValue<General.Contacts.Party>("LineEndCustomerParty"); set => SetPropertyValue<General.Contacts.Party>("LineEndCustomerParty", value); }
                [Owner]
                [ODataProperty]
                public Crm.Presales.Offer? Offer { get => GetPropertyValue<Crm.Presales.Offer>("Offer"); set => SetPropertyValue<Crm.Presales.Offer>("Offer", value); }
                [ODataProperty]
                public Crm.Presales.Offer? Document { get => GetPropertyValue<Crm.Presales.Offer>("Document"); set => SetPropertyValue<Crm.Presales.Offer>("Document", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Crm.ProductPrice? ProductPrice { get => GetPropertyValue<Crm.ProductPrice>("ProductPrice"); set => SetPropertyValue<Crm.ProductPrice>("ProductPrice", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Presales_OffersOptions", TableName = "Crm_Offers_Options")]
            public partial class OffersOption: EntityResource
            {
                public OffersOption(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Presales_OffersOptions";
                public const string EntityTableName = "Crm_Offers_Options";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public General.DocumentType? DealDocumentType { get => GetPropertyValue<General.DocumentType>("DealDocumentType"); set => SetPropertyValue<General.DocumentType>("DealDocumentType", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        [Entity(EntitySet = "Crm_PriceLists", TableName = "Crm_Price_Lists")]
        public partial class PriceList: EntityResource
        {
            public PriceList(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_PriceLists";
            public const string EntityTableName = "Crm_Price_Lists";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Crm.LineDiscountsRepository.DiscountLevel? AutoApplyDiscountLevel { get => GetPropertyValue<Crm.LineDiscountsRepository.DiscountLevel?>("AutoApplyDiscountLevel"); set => SetPropertyValue<Crm.LineDiscountsRepository.DiscountLevel?>("AutoApplyDiscountLevel", value); }
            [ODataProperty]
            public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
            [ODataProperty]
            public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Crm_PriceTypes", TableName = "Crm_Price_Types")]
        public partial class PriceType: EntityResource
        {
            public PriceType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_PriceTypes";
            public const string EntityTableName = "Crm_Price_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Int32? OrdinalPos { get => GetPropertyValue<Int32?>("OrdinalPos"); set => SetPropertyValue<Int32?>("OrdinalPos", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace Pricing
        {
            [Entity(EntitySet = "Crm_Pricing_PricingModels", TableName = "Crm_Pricing_Models")]
            public partial class PricingModel: EntityResource
            {
                public PricingModel(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pricing_PricingModels";
                public const string EntityTableName = "Crm_Pricing_Models";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? DefaultMarginPercent { get => GetPropertyValue<Decimal?>("DefaultMarginPercent"); set => SetPropertyValue<Decimal?>("DefaultMarginPercent", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchasePriceList? PurchasePriceList { get => GetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList"); set => SetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList", value); }
                [ODataProperty]
                public IEnumerable<Crm.Pricing.PricingModelCost>? Costs { get => GetCollection<Crm.Pricing.PricingModelCost>("Costs"); set => SetCollection<Crm.Pricing.PricingModelCost>("Costs", value); }
                [ODataProperty]
                public IEnumerable<Crm.Pricing.PricingModelPriceList>? PriceLists { get => GetCollection<Crm.Pricing.PricingModelPriceList>("PriceLists"); set => SetCollection<Crm.Pricing.PricingModelPriceList>("PriceLists", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Pricing_PricingModelCosts", TableName = "Crm_Pricing_Model_Costs")]
            public partial class PricingModelCost: EntityResource
            {
                public PricingModelCost(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pricing_PricingModelCosts";
                public const string EntityTableName = "Crm_Pricing_Model_Costs";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? AmountPerUnit { get => GetPropertyValue<Amount?>("AmountPerUnit"); set => SetPropertyValue<Amount?>("AmountPerUnit", value); }
                [ODataProperty]
                public Decimal? AmountPercent { get => GetPropertyValue<Decimal?>("AmountPercent"); set => SetPropertyValue<Decimal?>("AmountPercent", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Finance.Cost.CostType? CostType { get => GetPropertyValue<Finance.Cost.CostType>("CostType"); set => SetPropertyValue<Finance.Cost.CostType>("CostType", value); }
                [ODataProperty]
                public General.MeasurementUnit? MeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("MeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("MeasurementUnit", value); }
                [Owner]
                [ODataProperty]
                public Crm.Pricing.PricingModel? PricingModel { get => GetPropertyValue<Crm.Pricing.PricingModel>("PricingModel"); set => SetPropertyValue<Crm.Pricing.PricingModel>("PricingModel", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Pricing_PricingModelPriceLists", TableName = "Crm_Pricing_Model_Price_Lists")]
            public partial class PricingModelPriceList: EntityResource
            {
                public PricingModelPriceList(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Pricing_PricingModelPriceLists";
                public const string EntityTableName = "Crm_Pricing_Model_Price_Lists";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? MarginPercent { get => GetPropertyValue<Decimal?>("MarginPercent"); set => SetPropertyValue<Decimal?>("MarginPercent", value); }
                [ODataProperty]
                public Crm.PriceList? PriceList { get => GetPropertyValue<Crm.PriceList>("PriceList"); set => SetPropertyValue<Crm.PriceList>("PriceList", value); }
                [Owner]
                [ODataProperty]
                public Crm.Pricing.PricingModel? PricingModel { get => GetPropertyValue<Crm.Pricing.PricingModel>("PricingModel"); set => SetPropertyValue<Crm.Pricing.PricingModel>("PricingModel", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        [Entity(EntitySet = "Crm_ProductPrices", TableName = "Crm_Product_Prices")]
        public partial class ProductPrice: EntityResource
        {
            public ProductPrice(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_ProductPrices";
            public const string EntityTableName = "Crm_Product_Prices";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
            [ODataProperty]
            public Quantity? MaxQuantity { get => GetPropertyValue<Quantity?>("MaxQuantity"); set => SetPropertyValue<Quantity?>("MaxQuantity", value); }
            [ODataProperty]
            public Quantity? MinQuantity { get => GetPropertyValue<Quantity?>("MinQuantity"); set => SetPropertyValue<Quantity?>("MinQuantity", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Amount? Price { get => GetPropertyValue<Amount?>("Price"); set => SetPropertyValue<Amount?>("Price", value); }
            [ODataProperty]
            public Quantity? PriceQuantity { get => GetPropertyValue<Quantity?>("PriceQuantity"); set => SetPropertyValue<Quantity?>("PriceQuantity", value); }
            [ODataProperty]
            public General.Priority? Priority { get => GetPropertyValue<General.Priority?>("Priority"); set => SetPropertyValue<General.Priority?>("Priority", value); }
            [ODataProperty]
            public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
            [ODataProperty]
            public Crm.Marketing.Campaign? Campaign { get => GetPropertyValue<Crm.Marketing.Campaign>("Campaign"); set => SetPropertyValue<Crm.Marketing.Campaign>("Campaign", value); }
            [ODataProperty]
            public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
            [ODataProperty]
            public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
            [ODataProperty]
            public Crm.Marketing.DistributionChannel? DistributionChannel { get => GetPropertyValue<Crm.Marketing.DistributionChannel>("DistributionChannel"); set => SetPropertyValue<Crm.Marketing.DistributionChannel>("DistributionChannel", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
            [ODataProperty]
            public Crm.PriceList? PriceList { get => GetPropertyValue<Crm.PriceList>("PriceList"); set => SetPropertyValue<Crm.PriceList>("PriceList", value); }
            [ODataProperty]
            public General.MeasurementUnit? PriceQuantityMeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("PriceQuantityMeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("PriceQuantityMeasurementUnit", value); }
            [ODataProperty]
            public Crm.PriceType? PriceType { get => GetPropertyValue<Crm.PriceType>("PriceType"); set => SetPropertyValue<Crm.PriceType>("PriceType", value); }
            [ODataProperty]
            public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
            [ODataProperty]
            public Crm.Customer? ShipToCustomer { get => GetPropertyValue<Crm.Customer>("ShipToCustomer"); set => SetPropertyValue<Crm.Customer>("ShipToCustomer", value); }
            [ODataProperty]
            public Crm.Marketing.TargetGroup? TargetGroup { get => GetPropertyValue<Crm.Marketing.TargetGroup>("TargetGroup"); set => SetPropertyValue<Crm.Marketing.TargetGroup>("TargetGroup", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Crm_PromotionalPackages", TableName = "Crm_Promotional_Packages")]
        public partial class PromotionalPackage: EntityResource
        {
            public PromotionalPackage(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_PromotionalPackages";
            public const string EntityTableName = "Crm_Promotional_Packages";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public String? ValidForCustomerFilterXML { get => GetPropertyValue<String?>("ValidForCustomerFilterXML"); set => SetPropertyValue<String?>("ValidForCustomerFilterXML", value); }
            [ODataProperty]
            public String? ValidForDistributionChannelFilterXML { get => GetPropertyValue<String?>("ValidForDistributionChannelFilterXML"); set => SetPropertyValue<String?>("ValidForDistributionChannelFilterXML", value); }
            [ODataProperty]
            public String? ValidForShipToCustomerFilterXML { get => GetPropertyValue<String?>("ValidForShipToCustomerFilterXML"); set => SetPropertyValue<String?>("ValidForShipToCustomerFilterXML", value); }
            [ODataProperty]
            public DateTime? ValidFromDate { get => GetPropertyValue<DateTime?>("ValidFromDate"); set => SetPropertyValue<DateTime?>("ValidFromDate", value); }
            [ODataProperty]
            public DateTime? ValidToDate { get => GetPropertyValue<DateTime?>("ValidToDate"); set => SetPropertyValue<DateTime?>("ValidToDate", value); }
            [ODataProperty]
            public Crm.Marketing.Campaign? Campaign { get => GetPropertyValue<Crm.Marketing.Campaign>("Campaign"); set => SetPropertyValue<Crm.Marketing.Campaign>("Campaign", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
            [ODataProperty]
            public Crm.Customer? ValidForCustomer { get => GetPropertyValue<Crm.Customer>("ValidForCustomer"); set => SetPropertyValue<Crm.Customer>("ValidForCustomer", value); }
            [ODataProperty]
            public Crm.Marketing.DistributionChannel? ValidForDistributionChannel { get => GetPropertyValue<Crm.Marketing.DistributionChannel>("ValidForDistributionChannel"); set => SetPropertyValue<Crm.Marketing.DistributionChannel>("ValidForDistributionChannel", value); }
            [ODataProperty]
            public Crm.PriceList? ValidForPriceList { get => GetPropertyValue<Crm.PriceList>("ValidForPriceList"); set => SetPropertyValue<Crm.PriceList>("ValidForPriceList", value); }
            [ODataProperty]
            public Crm.Customer? ValidForShipToCustomer { get => GetPropertyValue<Crm.Customer>("ValidForShipToCustomer"); set => SetPropertyValue<Crm.Customer>("ValidForShipToCustomer", value); }
            [ODataProperty]
            public Crm.Marketing.TargetGroup? ValidForTargetGroup { get => GetPropertyValue<Crm.Marketing.TargetGroup>("ValidForTargetGroup"); set => SetPropertyValue<Crm.Marketing.TargetGroup>("ValidForTargetGroup", value); }
            [ODataProperty]
            public IEnumerable<Crm.PromotionalPackageLine>? Lines { get => GetCollection<Crm.PromotionalPackageLine>("Lines"); set => SetCollection<Crm.PromotionalPackageLine>("Lines", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Crm_PromotionalPackageLines", TableName = "Crm_Promotional_Package_Lines")]
        public partial class PromotionalPackageLine: EntityResource
        {
            public PromotionalPackageLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_PromotionalPackageLines";
            public const string EntityTableName = "Crm_Promotional_Package_Lines";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Int32? LineNumber { get => GetPropertyValue<Int32?>("LineNumber"); set => SetPropertyValue<Int32?>("LineNumber", value); }
            [ODataProperty]
            public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
            [ODataProperty]
            public Crm.PromotionalPackageLinesRepository.StandardDiscountAdjustOrReplace? StandardDiscountAdjustOrReplace { get => GetPropertyValue<Crm.PromotionalPackageLinesRepository.StandardDiscountAdjustOrReplace?>("StandardDiscountAdjustOrReplace"); set => SetPropertyValue<Crm.PromotionalPackageLinesRepository.StandardDiscountAdjustOrReplace?>("StandardDiscountAdjustOrReplace", value); }
            [ODataProperty]
            public Decimal? StandardDiscountPercentAdjust { get => GetPropertyValue<Decimal?>("StandardDiscountPercentAdjust"); set => SetPropertyValue<Decimal?>("StandardDiscountPercentAdjust", value); }
            [ODataProperty]
            public Amount? UnitPrice { get => GetPropertyValue<Amount?>("UnitPrice"); set => SetPropertyValue<Amount?>("UnitPrice", value); }
            [ODataProperty]
            public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
            [ODataProperty]
            public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
            [Owner]
            [ODataProperty]
            public Crm.PromotionalPackage? PromotionalPackage { get => GetPropertyValue<Crm.PromotionalPackage>("PromotionalPackage"); set => SetPropertyValue<Crm.PromotionalPackage>("PromotionalPackage", value); }
            [ODataProperty]
            public General.Currency? UnitPriceCurrency { get => GetPropertyValue<General.Currency>("UnitPriceCurrency"); set => SetPropertyValue<General.Currency>("UnitPriceCurrency", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace PromotionalPackageLinesRepository
        {
            public enum StandardDiscountAdjustOrReplace
            {
                Add = 0,
                Replace = 1,
                MarkDown = 2
            }
        }
        namespace Sales
        {
            [Entity(EntitySet = "Crm_Sales_DefaultSalesOrderDocumentProperties", TableName = "Crm_Default_Sales_Order_Document_Properties")]
            public partial class DefaultSalesOrderDocumentProperty: EntityResource
            {
                public DefaultSalesOrderDocumentProperty(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Sales_DefaultSalesOrderDocumentProperties";
                public const string EntityTableName = "Crm_Default_Sales_Order_Document_Properties";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public General.CustomProperty? CustomerProperty { get => GetPropertyValue<General.CustomProperty>("CustomerProperty"); set => SetPropertyValue<General.CustomProperty>("CustomerProperty", value); }
                [ODataProperty]
                public General.CustomProperty? DocumentProperty { get => GetPropertyValue<General.CustomProperty>("DocumentProperty"); set => SetPropertyValue<General.CustomProperty>("DocumentProperty", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Sales_DefaultSalesOrderPaymentPlans", TableName = "Crm_Default_Sales_Order_Payment_Plans")]
            public partial class DefaultSalesOrderPaymentPlan: EntityResource
            {
                public DefaultSalesOrderPaymentPlan(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Sales_DefaultSalesOrderPaymentPlans";
                public const string EntityTableName = "Crm_Default_Sales_Order_Payment_Plans";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? AmountPercent { get => GetPropertyValue<Decimal?>("AmountPercent"); set => SetPropertyValue<Decimal?>("AmountPercent", value); }
                [ODataProperty]
                public Crm.PaymentPlanDueDateSource? DueDateFormMethod { get => GetPropertyValue<Crm.PaymentPlanDueDateSource?>("DueDateFormMethod"); set => SetPropertyValue<Crm.PaymentPlanDueDateSource?>("DueDateFormMethod", value); }
                [ODataProperty]
                public Int32? InstallmentNumber { get => GetPropertyValue<Int32?>("InstallmentNumber"); set => SetPropertyValue<Int32?>("InstallmentNumber", value); }
                [ODataProperty]
                public Int32? PaymentTermDays { get => GetPropertyValue<Int32?>("PaymentTermDays"); set => SetPropertyValue<Int32?>("PaymentTermDays", value); }
                [ODataProperty]
                public Boolean? Remainder { get => GetPropertyValue<Boolean?>("Remainder"); set => SetPropertyValue<Boolean?>("Remainder", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Sales_DocumentTypePaymentOptions", TableName = "Crm_Document_Type_Payment_Options")]
            public partial class DocumentTypePaymentOption: EntityResource
            {
                public DocumentTypePaymentOption(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Sales_DocumentTypePaymentOptions";
                public const string EntityTableName = "Crm_Document_Type_Payment_Options";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? DeferredPaymentMinimalAmmount { get => GetPropertyValue<Amount?>("DeferredPaymentMinimalAmmount"); set => SetPropertyValue<Amount?>("DeferredPaymentMinimalAmmount", value); }
                [ODataProperty]
                public General.Currency? DeferredPaymentMinimalAmmountCurrency { get => GetPropertyValue<General.Currency>("DeferredPaymentMinimalAmmountCurrency"); set => SetPropertyValue<General.Currency>("DeferredPaymentMinimalAmmountCurrency", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Sales_SalesOrders", TableName = "Crm_Sales_Orders")]
            public partial class SalesOrder: General.Document
            {
                public SalesOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Crm_Sales_SalesOrders";
                public new const string EntityTableName = "Crm_Sales_Orders";
                [ODataProperty]
                public Boolean? CreditLimitOverride { get => GetPropertyValue<Boolean?>("CreditLimitOverride"); set => SetPropertyValue<Boolean?>("CreditLimitOverride", value); }
                [ODataProperty]
                public DateTime? CustomerPurchaseOrderDate { get => GetPropertyValue<DateTime?>("CustomerPurchaseOrderDate"); set => SetPropertyValue<DateTime?>("CustomerPurchaseOrderDate", value); }
                [ODataProperty]
                public String? CustomerPurchaseOrderNo { get => GetPropertyValue<String?>("CustomerPurchaseOrderNo"); set => SetPropertyValue<String?>("CustomerPurchaseOrderNo", value); }
                [ODataProperty]
                public Finance.Intrastat.DeliveryTerms? DeliveryTermsCode { get => GetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode"); set => SetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode", value); }
                [ODataProperty]
                public String? FiscalSalesNumber { get => GetPropertyValue<String?>("FiscalSalesNumber"); set => SetPropertyValue<String?>("FiscalSalesNumber", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public Finance.Intrastat.TransactionNature? IntrastatTransactionNatureCode { get => GetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode"); set => SetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode", value); }
                [ODataProperty]
                public Finance.Intrastat.TransportMode? IntrastatTransportModeCode { get => GetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode"); set => SetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public Boolean? IsValidField { get => GetPropertyValue<Boolean?>("IsValidField"); set => SetPropertyValue<Boolean?>("IsValidField", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? PaymentDueDate { get => GetPropertyValue<DateTime?>("PaymentDueDate"); set => SetPropertyValue<DateTime?>("PaymentDueDate", value); }
                [ODataProperty]
                public DateTime? PaymentDueStartDate { get => GetPropertyValue<DateTime?>("PaymentDueStartDate"); set => SetPropertyValue<DateTime?>("PaymentDueStartDate", value); }
                [ODataProperty]
                public DateTime? RequiredDeliveryDate { get => GetPropertyValue<DateTime?>("RequiredDeliveryDate"); set => SetPropertyValue<DateTime?>("RequiredDeliveryDate", value); }
                [ODataProperty]
                public DateTime? ToDate { get => GetPropertyValue<DateTime?>("ToDate"); set => SetPropertyValue<DateTime?>("ToDate", value); }
                [ODataProperty]
                public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
                [ODataProperty]
                public Crm.Presales.Deal? Deal { get => GetPropertyValue<Crm.Presales.Deal>("Deal"); set => SetPropertyValue<Crm.Presales.Deal>("Deal", value); }
                [ODataProperty]
                public Finance.Vat.DealType? DealType { get => GetPropertyValue<Finance.Vat.DealType>("DealType"); set => SetPropertyValue<Finance.Vat.DealType>("DealType", value); }
                [ODataProperty]
                public Crm.Dealer? Dealer { get => GetPropertyValue<Crm.Dealer>("Dealer"); set => SetPropertyValue<Crm.Dealer>("Dealer", value); }
                [ODataProperty]
                public Crm.Marketing.DistributionChannel? DistributionChannel { get => GetPropertyValue<Crm.Marketing.DistributionChannel>("DistributionChannel"); set => SetPropertyValue<Crm.Marketing.DistributionChannel>("DistributionChannel", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public General.Contacts.Party? EndCustomerParty { get => GetPropertyValue<General.Contacts.Party>("EndCustomerParty"); set => SetPropertyValue<General.Contacts.Party>("EndCustomerParty", value); }
                [ODataProperty]
                public Crm.Pos.Device? FiscalPrinterPosDevice { get => GetPropertyValue<Crm.Pos.Device>("FiscalPrinterPosDevice"); set => SetPropertyValue<Crm.Pos.Device>("FiscalPrinterPosDevice", value); }
                [ODataProperty]
                public General.Geography.Country? IntrastatTransportCountry { get => GetPropertyValue<General.Geography.Country>("IntrastatTransportCountry"); set => SetPropertyValue<General.Geography.Country>("IntrastatTransportCountry", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public Crm.Pos.Location? PosLocation { get => GetPropertyValue<Crm.Pos.Location>("PosLocation"); set => SetPropertyValue<Crm.Pos.Location>("PosLocation", value); }
                [ODataProperty]
                public Crm.Pos.Operator? PosOperator { get => GetPropertyValue<Crm.Pos.Operator>("PosOperator"); set => SetPropertyValue<Crm.Pos.Operator>("PosOperator", value); }
                [ODataProperty]
                public Crm.Pos.Terminal? PosTerminal { get => GetPropertyValue<Crm.Pos.Terminal>("PosTerminal"); set => SetPropertyValue<Crm.Pos.Terminal>("PosTerminal", value); }
                [ODataProperty]
                public Crm.PriceList? PriceList { get => GetPropertyValue<Crm.PriceList>("PriceList"); set => SetPropertyValue<Crm.PriceList>("PriceList", value); }
                [ODataProperty]
                public Crm.Invoicing.Invoice? ReturnForInvoice { get => GetPropertyValue<Crm.Invoicing.Invoice>("ReturnForInvoice"); set => SetPropertyValue<Crm.Invoicing.Invoice>("ReturnForInvoice", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrder? ReturnForSalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("ReturnForSalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("ReturnForSalesOrder", value); }
                [ODataProperty]
                public Crm.SalesPerson? SalesPerson { get => GetPropertyValue<Crm.SalesPerson>("SalesPerson"); set => SetPropertyValue<Crm.SalesPerson>("SalesPerson", value); }
                [ODataProperty]
                public Crm.Customer? ShipToCustomer { get => GetPropertyValue<Crm.Customer>("ShipToCustomer"); set => SetPropertyValue<Crm.Customer>("ShipToCustomer", value); }
                [ODataProperty]
                public General.Contacts.PartyContactMechanism? ShipToPartyContactMechanism { get => GetPropertyValue<General.Contacts.PartyContactMechanism>("ShipToPartyContactMechanism"); set => SetPropertyValue<General.Contacts.PartyContactMechanism>("ShipToPartyContactMechanism", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public IEnumerable<Crm.Sales.SalesOrderLine>? Lines { get => GetCollection<Crm.Sales.SalesOrderLine>("Lines"); set => SetCollection<Crm.Sales.SalesOrderLine>("Lines", value); }
                [ODataProperty]
                public IEnumerable<Crm.Sales.SalesOrderPaymentPlan>? PaymentPlans { get => GetCollection<Crm.Sales.SalesOrderPaymentPlan>("PaymentPlans"); set => SetCollection<Crm.Sales.SalesOrderPaymentPlan>("PaymentPlans", value); }
                [ODataProperty]
                public IEnumerable<Crm.Sales.SalesOrderPromotionalPackage>? PromotionalPackages { get => GetCollection<Crm.Sales.SalesOrderPromotionalPackage>("PromotionalPackages"); set => SetCollection<Crm.Sales.SalesOrderPromotionalPackage>("PromotionalPackages", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Crm_Sales_SalesOrderLines", TableName = "Crm_Sales_Order_Lines")]
            public partial class SalesOrderLine: EntityResource
            {
                public SalesOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Sales_SalesOrderLines";
                public const string EntityTableName = "Crm_Sales_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Intrastat.DeliveryTerms? DeliveryTermsCode { get => GetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode"); set => SetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode", value); }
                [ODataProperty]
                public Int32? GuaranteePeriodDays { get => GetPropertyValue<Int32?>("GuaranteePeriodDays"); set => SetPropertyValue<Int32?>("GuaranteePeriodDays", value); }
                [ODataProperty]
                public String? HistoricalDataJson { get => GetPropertyValue<String?>("HistoricalDataJson"); set => SetPropertyValue<String?>("HistoricalDataJson", value); }
                [ODataProperty]
                public Amount? HistoricalUnitCost { get => GetPropertyValue<Amount?>("HistoricalUnitCost"); set => SetPropertyValue<Amount?>("HistoricalUnitCost", value); }
                [ODataProperty]
                public DateTime? IntrastatApplyDate { get => GetPropertyValue<DateTime?>("IntrastatApplyDate"); set => SetPropertyValue<DateTime?>("IntrastatApplyDate", value); }
                [ODataProperty]
                public Finance.Intrastat.TransactionNature? IntrastatTransactionNatureCode { get => GetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode"); set => SetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode", value); }
                [ODataProperty]
                public Finance.Intrastat.TransportMode? IntrastatTransportModeCode { get => GetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode"); set => SetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode", value); }
                [ODataProperty]
                public Decimal? Level1DiscountPercent { get => GetPropertyValue<Decimal?>("Level1DiscountPercent"); set => SetPropertyValue<Decimal?>("Level1DiscountPercent", value); }
                [ODataProperty]
                public Decimal? Level2DiscountPercent { get => GetPropertyValue<Decimal?>("Level2DiscountPercent"); set => SetPropertyValue<Decimal?>("Level2DiscountPercent", value); }
                [ODataProperty]
                public Decimal? Level3DiscountPercent { get => GetPropertyValue<Decimal?>("Level3DiscountPercent"); set => SetPropertyValue<Decimal?>("Level3DiscountPercent", value); }
                [ODataProperty]
                public Amount? LineAmount { get => GetPropertyValue<Amount?>("LineAmount"); set => SetPropertyValue<Amount?>("LineAmount", value); }
                [ODataProperty]
                public Decimal? LineCustomDiscountPercent { get => GetPropertyValue<Decimal?>("LineCustomDiscountPercent"); set => SetPropertyValue<Decimal?>("LineCustomDiscountPercent", value); }
                [ODataProperty]
                public DateTime? LineFromDate { get => GetPropertyValue<DateTime?>("LineFromDate"); set => SetPropertyValue<DateTime?>("LineFromDate", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? LineStandardDiscountPercent { get => GetPropertyValue<Decimal?>("LineStandardDiscountPercent"); set => SetPropertyValue<Decimal?>("LineStandardDiscountPercent", value); }
                [ODataProperty]
                public DateTime? LineToDate { get => GetPropertyValue<DateTime?>("LineToDate"); set => SetPropertyValue<DateTime?>("LineToDate", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Boolean? PersistLot { get => GetPropertyValue<Boolean?>("PersistLot"); set => SetPropertyValue<Boolean?>("PersistLot", value); }
                [ODataProperty]
                public MultilanguageString? ProductDescription { get => GetPropertyValue<MultilanguageString?>("ProductDescription"); set => SetPropertyValue<MultilanguageString?>("ProductDescription", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? RequestedQuantity { get => GetPropertyValue<Quantity?>("RequestedQuantity"); set => SetPropertyValue<Quantity?>("RequestedQuantity", value); }
                [ODataProperty]
                public DateTime? RequiredDeliveryDate { get => GetPropertyValue<DateTime?>("RequiredDeliveryDate"); set => SetPropertyValue<DateTime?>("RequiredDeliveryDate", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Amount? StandardUnitPrice { get => GetPropertyValue<Amount?>("StandardUnitPrice"); set => SetPropertyValue<Amount?>("StandardUnitPrice", value); }
                [ODataProperty]
                public Amount? UnitPrice { get => GetPropertyValue<Amount?>("UnitPrice"); set => SetPropertyValue<Amount?>("UnitPrice", value); }
                [ODataProperty]
                public Crm.Marketing.BonusProgram? BonusProgram { get => GetPropertyValue<Crm.Marketing.BonusProgram>("BonusProgram"); set => SetPropertyValue<Crm.Marketing.BonusProgram>("BonusProgram", value); }
                [ODataProperty]
                public General.Geography.Country? IntrastatTransportCountry { get => GetPropertyValue<General.Geography.Country>("IntrastatTransportCountry"); set => SetPropertyValue<General.Geography.Country>("IntrastatTransportCountry", value); }
                [ODataProperty]
                public Crm.LineDiscount? Level1Discount { get => GetPropertyValue<Crm.LineDiscount>("Level1Discount"); set => SetPropertyValue<Crm.LineDiscount>("Level1Discount", value); }
                [ODataProperty]
                public Crm.LineDiscount? Level2Discount { get => GetPropertyValue<Crm.LineDiscount>("Level2Discount"); set => SetPropertyValue<Crm.LineDiscount>("Level2Discount", value); }
                [ODataProperty]
                public Crm.LineDiscount? Level3Discount { get => GetPropertyValue<Crm.LineDiscount>("Level3Discount"); set => SetPropertyValue<Crm.LineDiscount>("Level3Discount", value); }
                [ODataProperty]
                public Finance.Vat.DealType? LineDealType { get => GetPropertyValue<Finance.Vat.DealType>("LineDealType"); set => SetPropertyValue<Finance.Vat.DealType>("LineDealType", value); }
                [ODataProperty]
                public Crm.LineDiscount? LineDiscount { get => GetPropertyValue<Crm.LineDiscount>("LineDiscount"); set => SetPropertyValue<Crm.LineDiscount>("LineDiscount", value); }
                [ODataProperty]
                public General.Contacts.Party? LineEndCustomerParty { get => GetPropertyValue<General.Contacts.Party>("LineEndCustomerParty"); set => SetPropertyValue<General.Contacts.Party>("LineEndCustomerParty", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? LineStore { get => GetPropertyValue<Logistics.Inventory.Store>("LineStore"); set => SetPropertyValue<Logistics.Inventory.Store>("LineStore", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Crm.ProductPrice? ProductPrice { get => GetPropertyValue<Crm.ProductPrice>("ProductPrice"); set => SetPropertyValue<Crm.ProductPrice>("ProductPrice", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public Crm.PromotionalPackage? PromotionalPackage { get => GetPropertyValue<Crm.PromotionalPackage>("PromotionalPackage"); set => SetPropertyValue<Crm.PromotionalPackage>("PromotionalPackage", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Crm.Invoicing.InvoiceLine? ReturnForInvoiceLine { get => GetPropertyValue<Crm.Invoicing.InvoiceLine>("ReturnForInvoiceLine"); set => SetPropertyValue<Crm.Invoicing.InvoiceLine>("ReturnForInvoiceLine", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrderLine? ReturnForSalesOrderLine { get => GetPropertyValue<Crm.Sales.SalesOrderLine>("ReturnForSalesOrderLine"); set => SetPropertyValue<Crm.Sales.SalesOrderLine>("ReturnForSalesOrderLine", value); }
                [Owner]
                [ODataProperty]
                public Crm.Sales.SalesOrder? SalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrder? Document { get => GetPropertyValue<Crm.Sales.SalesOrder>("Document"); set => SetPropertyValue<Crm.Sales.SalesOrder>("Document", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Sales_SalesOrderPaymentOrdersTemplates", TableName = "Crm_Sales_Order_Payment_Orders_Templates")]
            public partial class SalesOrderPaymentOrdersTemplate: EntityResource
            {
                public SalesOrderPaymentOrdersTemplate(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Sales_SalesOrderPaymentOrdersTemplates";
                public const string EntityTableName = "Crm_Sales_Order_Payment_Orders_Templates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? CreateForInvoicedAmounts { get => GetPropertyValue<Boolean?>("CreateForInvoicedAmounts"); set => SetPropertyValue<Boolean?>("CreateForInvoicedAmounts", value); }
                [ODataProperty]
                public Boolean? CreateForNotInvoicedAmounts { get => GetPropertyValue<Boolean?>("CreateForNotInvoicedAmounts"); set => SetPropertyValue<Boolean?>("CreateForNotInvoicedAmounts", value); }
                [ODataProperty]
                public Boolean? IsAmountWithVAT { get => GetPropertyValue<Boolean?>("IsAmountWithVAT"); set => SetPropertyValue<Boolean?>("IsAmountWithVAT", value); }
                [ODataProperty]
                public Boolean? UpdateForInvoices { get => GetPropertyValue<Boolean?>("UpdateForInvoices"); set => SetPropertyValue<Boolean?>("UpdateForInvoices", value); }
                [Owner]
                [ODataProperty]
                public Systems.Workflow.Route? Route { get => GetPropertyValue<Systems.Workflow.Route>("Route"); set => SetPropertyValue<Systems.Workflow.Route>("Route", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Sales_SalesOrderPaymentPlans", TableName = "Crm_Sales_Order_Payment_Plans")]
            public partial class SalesOrderPaymentPlan: EntityResource
            {
                public SalesOrderPaymentPlan(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Sales_SalesOrderPaymentPlans";
                public const string EntityTableName = "Crm_Sales_Order_Payment_Plans";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? Amount { get => GetPropertyValue<Amount?>("Amount"); set => SetPropertyValue<Amount?>("Amount", value); }
                [ODataProperty]
                public Decimal? AmountPercent { get => GetPropertyValue<Decimal?>("AmountPercent"); set => SetPropertyValue<Decimal?>("AmountPercent", value); }
                [ODataProperty]
                public Crm.PaymentPlanDueDateSource? DueDateFormMethod { get => GetPropertyValue<Crm.PaymentPlanDueDateSource?>("DueDateFormMethod"); set => SetPropertyValue<Crm.PaymentPlanDueDateSource?>("DueDateFormMethod", value); }
                [ODataProperty]
                public DateTime? ExplicitPaymentDueDate { get => GetPropertyValue<DateTime?>("ExplicitPaymentDueDate"); set => SetPropertyValue<DateTime?>("ExplicitPaymentDueDate", value); }
                [ODataProperty]
                public DateTime? ExplicitPaymentDueStartDate { get => GetPropertyValue<DateTime?>("ExplicitPaymentDueStartDate"); set => SetPropertyValue<DateTime?>("ExplicitPaymentDueStartDate", value); }
                [ODataProperty]
                public Int32? InstallmentNumber { get => GetPropertyValue<Int32?>("InstallmentNumber"); set => SetPropertyValue<Int32?>("InstallmentNumber", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? PaymentStartDays { get => GetPropertyValue<Int32?>("PaymentStartDays"); set => SetPropertyValue<Int32?>("PaymentStartDays", value); }
                [ODataProperty]
                public Int32? PaymentTermDays { get => GetPropertyValue<Int32?>("PaymentTermDays"); set => SetPropertyValue<Int32?>("PaymentTermDays", value); }
                [ODataProperty]
                public Boolean? Remainder { get => GetPropertyValue<Boolean?>("Remainder"); set => SetPropertyValue<Boolean?>("Remainder", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [Owner]
                [ODataProperty]
                public Crm.Sales.SalesOrder? SalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Sales_SalesOrderPromotionalPackages", TableName = "Crm_Sales_Order_Promotional_Packages")]
            public partial class SalesOrderPromotionalPackage: EntityResource
            {
                public SalesOrderPromotionalPackage(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Sales_SalesOrderPromotionalPackages";
                public const string EntityTableName = "Crm_Sales_Order_Promotional_Packages";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineNumber { get => GetPropertyValue<Int32?>("LineNumber"); set => SetPropertyValue<Int32?>("LineNumber", value); }
                [ODataProperty]
                public Int32? NumberOfPackages { get => GetPropertyValue<Int32?>("NumberOfPackages"); set => SetPropertyValue<Int32?>("NumberOfPackages", value); }
                [ODataProperty]
                public Crm.PromotionalPackage? PromotionalPackage { get => GetPropertyValue<Crm.PromotionalPackage>("PromotionalPackage"); set => SetPropertyValue<Crm.PromotionalPackage>("PromotionalPackage", value); }
                [Owner]
                [ODataProperty]
                public Crm.Sales.SalesOrder? SalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Crm_Sales_SalesOrdersOptions", TableName = "Crm_Sales_Orders_Options")]
            public partial class SalesOrdersOption: EntityResource
            {
                public SalesOrdersOption(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Crm_Sales_SalesOrdersOptions";
                public const string EntityTableName = "Crm_Sales_Orders_Options";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrdersOptionsRepository.AllowedDirections? AllowedDirections { get => GetPropertyValue<Crm.Sales.SalesOrdersOptionsRepository.AllowedDirections?>("AllowedDirections"); set => SetPropertyValue<Crm.Sales.SalesOrdersOptionsRepository.AllowedDirections?>("AllowedDirections", value); }
                [ODataProperty]
                public Boolean? AvailableQuantityOnly { get => GetPropertyValue<Boolean?>("AvailableQuantityOnly"); set => SetPropertyValue<Boolean?>("AvailableQuantityOnly", value); }
                [ODataProperty]
                public Amount? MinimumAmount { get => GetPropertyValue<Amount?>("MinimumAmount"); set => SetPropertyValue<Amount?>("MinimumAmount", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrdersOptionsRepository.ShipmentAllowance? ShipmentAllowance { get => GetPropertyValue<Crm.Sales.SalesOrdersOptionsRepository.ShipmentAllowance?>("ShipmentAllowance"); set => SetPropertyValue<Crm.Sales.SalesOrdersOptionsRepository.ShipmentAllowance?>("ShipmentAllowance", value); }
                [ODataProperty]
                public General.DocumentType? DealDocumentType { get => GetPropertyValue<General.DocumentType>("DealDocumentType"); set => SetPropertyValue<General.DocumentType>("DealDocumentType", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                [ODataProperty]
                public General.Currency? MinimumAmountCurrency { get => GetPropertyValue<General.Currency>("MinimumAmountCurrency"); set => SetPropertyValue<General.Currency>("MinimumAmountCurrency", value); }
                [ODataProperty]
                public General.DocumentAmountType? VATDeviationDocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("VATDeviationDocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("VATDeviationDocumentAmountType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace SalesOrdersOptionsRepository
            {
                public enum AllowedDirections
                {
                    NormalSale = 0,
                    SalesReturn = 1,
                    NoLimit = 2,
                    AllowAnyButNotBoth = 3
                }
                public enum ShipmentAllowance
                {
                    AlwaysAllow = 0,
                    WaitForAnyPayment = 1,
                    WaitForFullPayment = 2
                }
            }
        }
        [Entity(EntitySet = "Crm_SalesPersons", TableName = "Crm_Sales_Persons")]
        public partial class SalesPerson: EntityResource
        {
            public SalesPerson(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Crm_SalesPersons";
            public const string EntityTableName = "Crm_Sales_Persons";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Decimal? CommissionPercent { get => GetPropertyValue<Decimal?>("CommissionPercent"); set => SetPropertyValue<Decimal?>("CommissionPercent", value); }
            [ODataProperty]
            public Guid? CommissionPolicyId { get => GetPropertyValue<Guid?>("CommissionPolicyId"); set => SetPropertyValue<Guid?>("CommissionPolicyId", value); }
            [ODataProperty]
            public DateTime? ContractEndDate { get => GetPropertyValue<DateTime?>("ContractEndDate"); set => SetPropertyValue<DateTime?>("ContractEndDate", value); }
            [ODataProperty]
            public DateTime? ContractStartDate { get => GetPropertyValue<DateTime?>("ContractStartDate"); set => SetPropertyValue<DateTime?>("ContractStartDate", value); }
            [ODataProperty]
            public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
            [Owner]
            [ODataProperty]
            public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
            [ODataProperty]
            public Crm.Distribution.SalesPersonGroup? SalesPersonGroup { get => GetPropertyValue<Crm.Distribution.SalesPersonGroup>("SalesPersonGroup"); set => SetPropertyValue<Crm.Distribution.SalesPersonGroup>("SalesPersonGroup", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
    }
    namespace Finance
    {
        namespace Accounting
        {
            [Entity(EntitySet = "Finance_Accounting_Accounts", TableName = "Acc_Accounts")]
            public partial class Account: EntityResource
            {
                public Account(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_Accounts";
                public const string EntityTableName = "Acc_Accounts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? AccountFullNumber { get => GetPropertyValue<String?>("AccountFullNumber"); set => SetPropertyValue<String?>("AccountFullNumber", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Number { get => GetPropertyValue<String?>("Number"); set => SetPropertyValue<String?>("Number", value); }
                [ODataProperty]
                public Finance.Accounting.AccountsRepository.CurrencyValuationMethod? CurrencyValuationMethod { get => GetPropertyValue<Finance.Accounting.AccountsRepository.CurrencyValuationMethod?>("CurrencyValuationMethod"); set => SetPropertyValue<Finance.Accounting.AccountsRepository.CurrencyValuationMethod?>("CurrencyValuationMethod", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Boolean? Discontinued { get => GetPropertyValue<Boolean?>("Discontinued"); set => SetPropertyValue<Boolean?>("Discontinued", value); }
                [ODataProperty]
                public Finance.Accounting.AccountGroup? AccountGroup { get => GetPropertyValue<Finance.Accounting.AccountGroup>("AccountGroup"); set => SetPropertyValue<Finance.Accounting.AccountGroup>("AccountGroup", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public IEnumerable<Finance.Accounting.AccountRequiredProperty>? RequiredProperties { get => GetCollection<Finance.Accounting.AccountRequiredProperty>("RequiredProperties"); set => SetCollection<Finance.Accounting.AccountRequiredProperty>("RequiredProperties", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_AccountGroups", TableName = "Acc_Account_Groups")]
            public partial class AccountGroup: EntityResource
            {
                public AccountGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_AccountGroups";
                public const string EntityTableName = "Acc_Account_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Number { get => GetPropertyValue<String?>("Number"); set => SetPropertyValue<String?>("Number", value); }
                [ODataProperty]
                public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
                [ODataProperty]
                public Boolean? Discontinued { get => GetPropertyValue<Boolean?>("Discontinued"); set => SetPropertyValue<Boolean?>("Discontinued", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public Finance.Accounting.AccountGroup? Parent { get => GetPropertyValue<Finance.Accounting.AccountGroup>("Parent"); set => SetPropertyValue<Finance.Accounting.AccountGroup>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_AccountingVouchers", TableName = "Acc_Vouchers")]
            public partial class AccountingVoucher: General.Document
            {
                public AccountingVoucher(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Accounting_AccountingVouchers";
                public new const string EntityTableName = "Acc_Vouchers";
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public General.Document? DefaultReferencedDocument { get => GetPropertyValue<General.Document>("DefaultReferencedDocument"); set => SetPropertyValue<General.Document>("DefaultReferencedDocument", value); }
                [ODataProperty]
                public IEnumerable<Finance.Accounting.VoucherCorrespondance>? Correspondances { get => GetCollection<Finance.Accounting.VoucherCorrespondance>("Correspondances"); set => SetCollection<Finance.Accounting.VoucherCorrespondance>("Correspondances", value); }
                [ODataProperty]
                public IEnumerable<Finance.Accounting.AccountingVoucherLine>? Lines { get => GetCollection<Finance.Accounting.AccountingVoucherLine>("Lines"); set => SetCollection<Finance.Accounting.AccountingVoucherLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Accounting_AccountingVoucherLines", TableName = "Acc_Voucher_Lines")]
            public partial class AccountingVoucherLine: EntityResource
            {
                public AccountingVoucherLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_AccountingVoucherLines";
                public const string EntityTableName = "Acc_Voucher_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? CorrespondanceNo { get => GetPropertyValue<Int32?>("CorrespondanceNo"); set => SetPropertyValue<Int32?>("CorrespondanceNo", value); }
                [ODataProperty]
                public Decimal? CorrespondantAmount { get => GetPropertyValue<Decimal?>("CorrespondantAmount"); set => SetPropertyValue<Decimal?>("CorrespondantAmount", value); }
                [ODataProperty]
                public Amount? Credit { get => GetPropertyValue<Amount?>("Credit"); set => SetPropertyValue<Amount?>("Credit", value); }
                [ODataProperty]
                public Amount? CreditBase { get => GetPropertyValue<Amount?>("CreditBase"); set => SetPropertyValue<Amount?>("CreditBase", value); }
                [ODataProperty]
                public Amount? Debit { get => GetPropertyValue<Amount?>("Debit"); set => SetPropertyValue<Amount?>("Debit", value); }
                [ODataProperty]
                public Amount? DebitBase { get => GetPropertyValue<Amount?>("DebitBase"); set => SetPropertyValue<Amount?>("DebitBase", value); }
                [ODataProperty]
                public String? ItemKey { get => GetPropertyValue<String?>("ItemKey"); set => SetPropertyValue<String?>("ItemKey", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? RateDivisor { get => GetPropertyValue<Decimal?>("RateDivisor"); set => SetPropertyValue<Decimal?>("RateDivisor", value); }
                [ODataProperty]
                public Decimal? RateMultiplier { get => GetPropertyValue<Decimal?>("RateMultiplier"); set => SetPropertyValue<Decimal?>("RateMultiplier", value); }
                [ODataProperty]
                public Finance.Accounting.Account? Account { get => GetPropertyValue<Finance.Accounting.Account>("Account"); set => SetPropertyValue<Finance.Accounting.Account>("Account", value); }
                [ODataProperty]
                public Finance.Accounting.CostCenter? CostCenter { get => GetPropertyValue<Finance.Accounting.CostCenter>("CostCenter"); set => SetPropertyValue<Finance.Accounting.CostCenter>("CostCenter", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                [ODataProperty]
                public Finance.Accounting.ProfitCenter? ProfitCenter { get => GetPropertyValue<Finance.Accounting.ProfitCenter>("ProfitCenter"); set => SetPropertyValue<Finance.Accounting.ProfitCenter>("ProfitCenter", value); }
                [ODataProperty]
                public General.Document? ReferencedDocument { get => GetPropertyValue<General.Document>("ReferencedDocument"); set => SetPropertyValue<General.Document>("ReferencedDocument", value); }
                [Owner]
                [ODataProperty]
                public Finance.Accounting.AccountingVoucher? Voucher { get => GetPropertyValue<Finance.Accounting.AccountingVoucher>("Voucher"); set => SetPropertyValue<Finance.Accounting.AccountingVoucher>("Voucher", value); }
                [ODataProperty]
                public Finance.Accounting.AccountingVoucher? Document { get => GetPropertyValue<Finance.Accounting.AccountingVoucher>("Document"); set => SetPropertyValue<Finance.Accounting.AccountingVoucher>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_AccountRequiredProperties", TableName = "Acc_Account_Required_Properties")]
            public partial class AccountRequiredProperty: EntityResource
            {
                public AccountRequiredProperty(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_AccountRequiredProperties";
                public const string EntityTableName = "Acc_Account_Required_Properties";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? KeyOrder { get => GetPropertyValue<Int32?>("KeyOrder"); set => SetPropertyValue<Int32?>("KeyOrder", value); }
                [ODataProperty]
                public Boolean? KeyProperty { get => GetPropertyValue<Boolean?>("KeyProperty"); set => SetPropertyValue<Boolean?>("KeyProperty", value); }
                [Owner]
                [ODataProperty]
                public Finance.Accounting.Account? Account { get => GetPropertyValue<Finance.Accounting.Account>("Account"); set => SetPropertyValue<Finance.Accounting.Account>("Account", value); }
                [ODataProperty]
                public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace AccountsRepository
            {
                public enum CurrencyValuationMethod
                {
                    AccountCurrentBalance = 0,
                    DocumentCurrencyDirectory = 1,
                    BalanceReferenceDocument = 2
                }
            }
            [Entity(EntitySet = "Finance_Accounting_CostCenters", TableName = "Acc_Cost_Centers")]
            public partial class CostCenter: EntityResource
            {
                public CostCenter(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_CostCenters";
                public const string EntityTableName = "Acc_Cost_Centers";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Decimal? RelativeWeight { get => GetPropertyValue<Decimal?>("RelativeWeight"); set => SetPropertyValue<Decimal?>("RelativeWeight", value); }
                [ODataProperty]
                public Finance.Accounting.CostCenter? Parent { get => GetPropertyValue<Finance.Accounting.CostCenter>("Parent"); set => SetPropertyValue<Finance.Accounting.CostCenter>("Parent", value); }
                [ODataProperty]
                public Finance.Accounting.ProfitCenter? TransferCostToProfitCenter { get => GetPropertyValue<Finance.Accounting.ProfitCenter>("TransferCostToProfitCenter"); set => SetPropertyValue<Finance.Accounting.ProfitCenter>("TransferCostToProfitCenter", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_FinancialStatements", TableName = "Acc_Financial_Statements")]
            public partial class FinancialStatement: EntityResource
            {
                public FinancialStatement(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_FinancialStatements";
                public const string EntityTableName = "Acc_Financial_Statements";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public IEnumerable<Finance.Accounting.FinancialStatementNode>? Nodes { get => GetCollection<Finance.Accounting.FinancialStatementNode>("Nodes"); set => SetCollection<Finance.Accounting.FinancialStatementNode>("Nodes", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_FinancialStatementNodes", TableName = "Acc_Financial_Statement_Nodes")]
            public partial class FinancialStatementNode: EntityResource
            {
                public FinancialStatementNode(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_FinancialStatementNodes";
                public const string EntityTableName = "Acc_Financial_Statement_Nodes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? ParentFullPath { get => GetPropertyValue<String?>("ParentFullPath"); set => SetPropertyValue<String?>("ParentFullPath", value); }
                [Owner]
                [ODataProperty]
                public Finance.Accounting.FinancialStatement? FinancialStatement { get => GetPropertyValue<Finance.Accounting.FinancialStatement>("FinancialStatement"); set => SetPropertyValue<Finance.Accounting.FinancialStatement>("FinancialStatement", value); }
                [ODataProperty]
                public IEnumerable<Finance.Accounting.FinancialStatementNodeCorrespondance>? Correspondances { get => GetCollection<Finance.Accounting.FinancialStatementNodeCorrespondance>("Correspondances"); set => SetCollection<Finance.Accounting.FinancialStatementNodeCorrespondance>("Correspondances", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_FinancialStatementNodeCorrespondances", TableName = "Acc_Financial_Statement_Node_Correspondances")]
            public partial class FinancialStatementNodeCorrespondance: EntityResource
            {
                public FinancialStatementNodeCorrespondance(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_FinancialStatementNodeCorrespondances";
                public const string EntityTableName = "Acc_Financial_Statement_Node_Correspondances";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? Multiplier { get => GetPropertyValue<Decimal?>("Multiplier"); set => SetPropertyValue<Decimal?>("Multiplier", value); }
                [ODataProperty]
                public Finance.Accounting.AccountGroup? AccountGroup { get => GetPropertyValue<Finance.Accounting.AccountGroup>("AccountGroup"); set => SetPropertyValue<Finance.Accounting.AccountGroup>("AccountGroup", value); }
                [ODataProperty]
                public Finance.Accounting.AccountGroup? CorrespondantAccountGroup { get => GetPropertyValue<Finance.Accounting.AccountGroup>("CorrespondantAccountGroup"); set => SetPropertyValue<Finance.Accounting.AccountGroup>("CorrespondantAccountGroup", value); }
                [Owner]
                [ODataProperty]
                public Finance.Accounting.FinancialStatementNode? FinancialStatementNode { get => GetPropertyValue<Finance.Accounting.FinancialStatementNode>("FinancialStatementNode"); set => SetPropertyValue<Finance.Accounting.FinancialStatementNode>("FinancialStatementNode", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_Operations", TableName = "Acc_Operations")]
            public partial class Operation: General.Document
            {
                public Operation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Accounting_Operations";
                public new const string EntityTableName = "Acc_Operations";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Accounting_ProfitCenters", TableName = "Acc_Profit_Centers")]
            public partial class ProfitCenter: EntityResource
            {
                public ProfitCenter(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_ProfitCenters";
                public const string EntityTableName = "Acc_Profit_Centers";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Decimal? RelativeWeight { get => GetPropertyValue<Decimal?>("RelativeWeight"); set => SetPropertyValue<Decimal?>("RelativeWeight", value); }
                [ODataProperty]
                public Finance.Accounting.ProfitCenter? Parent { get => GetPropertyValue<Finance.Accounting.ProfitCenter>("Parent"); set => SetPropertyValue<Finance.Accounting.ProfitCenter>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_Templates", TableName = "Acc_Templates")]
            public partial class Template: EntityResource
            {
                public Template(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_Templates";
                public const string EntityTableName = "Acc_Templates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? VoucherDateSource { get => GetPropertyValue<String?>("VoucherDateSource"); set => SetPropertyValue<String?>("VoucherDateSource", value); }
                [ODataProperty]
                public String? VoucherDescriptionMask { get => GetPropertyValue<String?>("VoucherDescriptionMask"); set => SetPropertyValue<String?>("VoucherDescriptionMask", value); }
                [Owner]
                [ODataProperty]
                public Systems.Workflow.Route? Route { get => GetPropertyValue<Systems.Workflow.Route>("Route"); set => SetPropertyValue<Systems.Workflow.Route>("Route", value); }
                [ODataProperty]
                public IEnumerable<Finance.Accounting.TemplateLine>? Lines { get => GetCollection<Finance.Accounting.TemplateLine>("Lines"); set => SetCollection<Finance.Accounting.TemplateLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_TemplateLines", TableName = "Acc_Template_Lines")]
            public partial class TemplateLine: EntityResource
            {
                public TemplateLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_TemplateLines";
                public const string EntityTableName = "Acc_Template_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? AmountColumnName { get => GetPropertyValue<String?>("AmountColumnName"); set => SetPropertyValue<String?>("AmountColumnName", value); }
                [ODataProperty]
                public Finance.Accounting.TemplateLinesRepository.AmountCondition? AmountCondition { get => GetPropertyValue<Finance.Accounting.TemplateLinesRepository.AmountCondition?>("AmountCondition"); set => SetPropertyValue<Finance.Accounting.TemplateLinesRepository.AmountCondition?>("AmountCondition", value); }
                [ODataProperty]
                public Guid? AmountRowId { get => GetPropertyValue<Guid?>("AmountRowId"); set => SetPropertyValue<Guid?>("AmountRowId", value); }
                [ODataProperty]
                public String? AmountRowName { get => GetPropertyValue<String?>("AmountRowName"); set => SetPropertyValue<String?>("AmountRowName", value); }
                [ODataProperty]
                public String? AmountSourceFilter { get => GetPropertyValue<String?>("AmountSourceFilter"); set => SetPropertyValue<String?>("AmountSourceFilter", value); }
                [ODataProperty]
                public String? AmountSourceName { get => GetPropertyValue<String?>("AmountSourceName"); set => SetPropertyValue<String?>("AmountSourceName", value); }
                [ODataProperty]
                public String? FilterXML { get => GetPropertyValue<String?>("FilterXML"); set => SetPropertyValue<String?>("FilterXML", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? Multiplier { get => GetPropertyValue<Decimal?>("Multiplier"); set => SetPropertyValue<Decimal?>("Multiplier", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? ValidFromDate { get => GetPropertyValue<DateTime?>("ValidFromDate"); set => SetPropertyValue<DateTime?>("ValidFromDate", value); }
                [ODataProperty]
                public DateTime? ValidToDate { get => GetPropertyValue<DateTime?>("ValidToDate"); set => SetPropertyValue<DateTime?>("ValidToDate", value); }
                [ODataProperty]
                public Finance.Accounting.Account? CreditAccount { get => GetPropertyValue<Finance.Accounting.Account>("CreditAccount"); set => SetPropertyValue<Finance.Accounting.Account>("CreditAccount", value); }
                [ODataProperty]
                public Finance.Accounting.Account? DebitAccount { get => GetPropertyValue<Finance.Accounting.Account>("DebitAccount"); set => SetPropertyValue<Finance.Accounting.Account>("DebitAccount", value); }
                [Owner]
                [ODataProperty]
                public Finance.Accounting.Template? Template { get => GetPropertyValue<Finance.Accounting.Template>("Template"); set => SetPropertyValue<Finance.Accounting.Template>("Template", value); }
                [ODataProperty]
                public IEnumerable<Finance.Accounting.TemplateLineProperty>? TemplateLineProperties { get => GetCollection<Finance.Accounting.TemplateLineProperty>("TemplateLineProperties"); set => SetCollection<Finance.Accounting.TemplateLineProperty>("TemplateLineProperties", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_TemplateLineProperties", TableName = "Acc_Template_Line_Properties")]
            public partial class TemplateLineProperty: EntityResource
            {
                public TemplateLineProperty(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_TemplateLineProperties";
                public const string EntityTableName = "Acc_Template_Line_Properties";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Guid? ConstantValueId { get => GetPropertyValue<Guid?>("ConstantValueId"); set => SetPropertyValue<Guid?>("ConstantValueId", value); }
                [ODataProperty]
                public Boolean? IsDebit { get => GetPropertyValue<Boolean?>("IsDebit"); set => SetPropertyValue<Boolean?>("IsDebit", value); }
                [ODataProperty]
                public MultilanguageString? PropertyDescription { get => GetPropertyValue<MultilanguageString?>("PropertyDescription"); set => SetPropertyValue<MultilanguageString?>("PropertyDescription", value); }
                [ODataProperty]
                public Int32? PropertyNo { get => GetPropertyValue<Int32?>("PropertyNo"); set => SetPropertyValue<Int32?>("PropertyNo", value); }
                [ODataProperty]
                public String? PropertyValueSource { get => GetPropertyValue<String?>("PropertyValueSource"); set => SetPropertyValue<String?>("PropertyValueSource", value); }
                [ODataProperty]
                public String? PropertyValueSourceType { get => GetPropertyValue<String?>("PropertyValueSourceType"); set => SetPropertyValue<String?>("PropertyValueSourceType", value); }
                [ODataProperty]
                public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
                [Owner]
                [ODataProperty]
                public Finance.Accounting.TemplateLine? TemplateLine { get => GetPropertyValue<Finance.Accounting.TemplateLine>("TemplateLine"); set => SetPropertyValue<Finance.Accounting.TemplateLine>("TemplateLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace TemplateLinesRepository
            {
                public enum AmountCondition
                {
                    Positive = 0,
                    Negative = 1
                }
            }
            [Entity(EntitySet = "Finance_Accounting_TemplateRouteLinks", TableName = "Acc_Template_Route_Links")]
            public partial class TemplateRouteLink: EntityResource
            {
                public TemplateRouteLink(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_TemplateRouteLinks";
                public const string EntityTableName = "Acc_Template_Route_Links";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [Owner]
                [ODataProperty]
                public Systems.Workflow.Route? Route { get => GetPropertyValue<Systems.Workflow.Route>("Route"); set => SetPropertyValue<Systems.Workflow.Route>("Route", value); }
                [ODataProperty]
                public Finance.Accounting.Template? Template { get => GetPropertyValue<Finance.Accounting.Template>("Template"); set => SetPropertyValue<Finance.Accounting.Template>("Template", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Accounting_VoucherCorrespondances", TableName = "Acc_Voucher_Correspondances")]
            public partial class VoucherCorrespondance: EntityResource
            {
                public VoucherCorrespondance(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Accounting_VoucherCorrespondances";
                public const string EntityTableName = "Acc_Voucher_Correspondances";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? AmountBase { get => GetPropertyValue<Decimal?>("AmountBase"); set => SetPropertyValue<Decimal?>("AmountBase", value); }
                [ODataProperty]
                public Decimal? CreditAmount { get => GetPropertyValue<Decimal?>("CreditAmount"); set => SetPropertyValue<Decimal?>("CreditAmount", value); }
                [ODataProperty]
                public Guid? CreditVoucherLineId { get => GetPropertyValue<Guid?>("CreditVoucherLineId"); set => SetPropertyValue<Guid?>("CreditVoucherLineId", value); }
                [ODataProperty]
                public Decimal? DebitAmount { get => GetPropertyValue<Decimal?>("DebitAmount"); set => SetPropertyValue<Decimal?>("DebitAmount", value); }
                [ODataProperty]
                public Guid? DebitVoucherLineId { get => GetPropertyValue<Guid?>("DebitVoucherLineId"); set => SetPropertyValue<Guid?>("DebitVoucherLineId", value); }
                [Owner]
                [ODataProperty]
                public Finance.Accounting.AccountingVoucher? Voucher { get => GetPropertyValue<Finance.Accounting.AccountingVoucher>("Voucher"); set => SetPropertyValue<Finance.Accounting.AccountingVoucher>("Voucher", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Assets
        {
            [Entity(EntitySet = "Finance_Assets_Assets", TableName = "Ast_Assets")]
            public partial class Asset: EntityResource
            {
                public Asset(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_Assets";
                public const string EntityTableName = "Ast_Assets";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public DateTime? DeploymentDate { get => GetPropertyValue<DateTime?>("DeploymentDate"); set => SetPropertyValue<DateTime?>("DeploymentDate", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? PurchaseDate { get => GetPropertyValue<DateTime?>("PurchaseDate"); set => SetPropertyValue<DateTime?>("PurchaseDate", value); }
                [ODataProperty]
                public String? SerialNumber { get => GetPropertyValue<String?>("SerialNumber"); set => SetPropertyValue<String?>("SerialNumber", value); }
                [ODataProperty]
                public Finance.Assets.AssetCategory? AssetCategory { get => GetPropertyValue<Finance.Assets.AssetCategory>("AssetCategory"); set => SetPropertyValue<Finance.Assets.AssetCategory>("AssetCategory", value); }
                [ODataProperty]
                public Finance.Assets.AssetGroup? AssetGroup { get => GetPropertyValue<Finance.Assets.AssetGroup>("AssetGroup"); set => SetPropertyValue<Finance.Assets.AssetGroup>("AssetGroup", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Finance.Assets.ValuationModel? PrimaryValuationModel { get => GetPropertyValue<Finance.Assets.ValuationModel>("PrimaryValuationModel"); set => SetPropertyValue<Finance.Assets.ValuationModel>("PrimaryValuationModel", value); }
                [ODataProperty]
                public General.Currency? ValuationCurrency { get => GetPropertyValue<General.Currency>("ValuationCurrency"); set => SetPropertyValue<General.Currency>("ValuationCurrency", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Assets_AssetCategories", TableName = "Ast_Asset_Categories")]
            public partial class AssetCategory: EntityResource
            {
                public AssetCategory(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_AssetCategories";
                public const string EntityTableName = "Ast_Asset_Categories";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public General.Products.ProductType? ProductType { get => GetPropertyValue<General.Products.ProductType>("ProductType"); set => SetPropertyValue<General.Products.ProductType>("ProductType", value); }
                [ODataProperty]
                public IEnumerable<Finance.Assets.DepreciationPlanTemplate>? DepreciationPlanTemplates { get => GetCollection<Finance.Assets.DepreciationPlanTemplate>("DepreciationPlanTemplates"); set => SetCollection<Finance.Assets.DepreciationPlanTemplate>("DepreciationPlanTemplates", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Assets_AssetGroups", TableName = "Ast_Asset_Groups")]
            public partial class AssetGroup: EntityResource
            {
                public AssetGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_AssetGroups";
                public const string EntityTableName = "Ast_Asset_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Finance.Assets.ValuationModel? DefaultValuationModel { get => GetPropertyValue<Finance.Assets.ValuationModel>("DefaultValuationModel"); set => SetPropertyValue<Finance.Assets.ValuationModel>("DefaultValuationModel", value); }
                [ODataProperty]
                public Finance.Assets.AssetGroup? Parent { get => GetPropertyValue<Finance.Assets.AssetGroup>("Parent"); set => SetPropertyValue<Finance.Assets.AssetGroup>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Assets_AssetOrders", TableName = "Ast_Asset_Orders")]
            public partial class AssetOrder: General.Document
            {
                public AssetOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Assets_AssetOrders";
                public new const string EntityTableName = "Ast_Asset_Orders";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public Finance.Assets.AssetOrdersRepository.Operation? Operation { get => GetPropertyValue<Finance.Assets.AssetOrdersRepository.Operation?>("Operation"); set => SetPropertyValue<Finance.Assets.AssetOrdersRepository.Operation?>("Operation", value); }
                [ODataProperty]
                public IEnumerable<Finance.Assets.AssetOrderLine>? Lines { get => GetCollection<Finance.Assets.AssetOrderLine>("Lines"); set => SetCollection<Finance.Assets.AssetOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Assets_AssetOrderLines", TableName = "Ast_Asset_Order_Lines")]
            public partial class AssetOrderLine: EntityResource
            {
                public AssetOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_AssetOrderLines";
                public const string EntityTableName = "Ast_Asset_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? AssetValue { get => GetPropertyValue<Amount?>("AssetValue"); set => SetPropertyValue<Amount?>("AssetValue", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Int32? Quantity { get => GetPropertyValue<Int32?>("Quantity"); set => SetPropertyValue<Int32?>("Quantity", value); }
                [ODataProperty]
                public Finance.Assets.Asset? Asset { get => GetPropertyValue<Finance.Assets.Asset>("Asset"); set => SetPropertyValue<Finance.Assets.Asset>("Asset", value); }
                [Owner]
                [ODataProperty]
                public Finance.Assets.AssetOrder? AssetOrder { get => GetPropertyValue<Finance.Assets.AssetOrder>("AssetOrder"); set => SetPropertyValue<Finance.Assets.AssetOrder>("AssetOrder", value); }
                [ODataProperty]
                public Finance.Assets.AssetOrder? Document { get => GetPropertyValue<Finance.Assets.AssetOrder>("Document"); set => SetPropertyValue<Finance.Assets.AssetOrder>("Document", value); }
                [ODataProperty]
                public General.Currency? AssetValueCurrency { get => GetPropertyValue<General.Currency>("AssetValueCurrency"); set => SetPropertyValue<General.Currency>("AssetValueCurrency", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace AssetOrdersRepository
            {
                public enum Operation
                {
                    Purchase = 0,
                    Sale = 1
                }
            }
            [Entity(EntitySet = "Finance_Assets_AssetTransactions", TableName = "Ast_Asset_Transactions")]
            public partial class AssetTransaction: General.Document
            {
                public AssetTransaction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Assets_AssetTransactions";
                public new const string EntityTableName = "Ast_Asset_Transactions";
                [ODataProperty]
                public DateTime? AssetTransactionDate { get => GetPropertyValue<DateTime?>("AssetTransactionDate"); set => SetPropertyValue<DateTime?>("AssetTransactionDate", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public IEnumerable<Finance.Assets.AssetTransactionLine>? Lines { get => GetCollection<Finance.Assets.AssetTransactionLine>("Lines"); set => SetCollection<Finance.Assets.AssetTransactionLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Assets_AssetTransactionLines", TableName = "Ast_Asset_Transaction_Lines")]
            public partial class AssetTransactionLine: EntityResource
            {
                public AssetTransactionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_AssetTransactionLines";
                public const string EntityTableName = "Ast_Asset_Transaction_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? DepreciationValue { get => GetPropertyValue<Amount?>("DepreciationValue"); set => SetPropertyValue<Amount?>("DepreciationValue", value); }
                [ODataProperty]
                public Amount? DepreciationValueBase { get => GetPropertyValue<Amount?>("DepreciationValueBase"); set => SetPropertyValue<Amount?>("DepreciationValueBase", value); }
                [ODataProperty]
                public Amount? NegativeReserveValue { get => GetPropertyValue<Amount?>("NegativeReserveValue"); set => SetPropertyValue<Amount?>("NegativeReserveValue", value); }
                [ODataProperty]
                public Amount? NegativeReserveValueBase { get => GetPropertyValue<Amount?>("NegativeReserveValueBase"); set => SetPropertyValue<Amount?>("NegativeReserveValueBase", value); }
                [ODataProperty]
                public Finance.Assets.AssetTransactionLinesRepository.OperationType? OperationType { get => GetPropertyValue<Finance.Assets.AssetTransactionLinesRepository.OperationType?>("OperationType"); set => SetPropertyValue<Finance.Assets.AssetTransactionLinesRepository.OperationType?>("OperationType", value); }
                [ODataProperty]
                public Amount? PositiveReserveValue { get => GetPropertyValue<Amount?>("PositiveReserveValue"); set => SetPropertyValue<Amount?>("PositiveReserveValue", value); }
                [ODataProperty]
                public Amount? PositiveReserveValueBase { get => GetPropertyValue<Amount?>("PositiveReserveValueBase"); set => SetPropertyValue<Amount?>("PositiveReserveValueBase", value); }
                [ODataProperty]
                public Amount? PurchaseValue { get => GetPropertyValue<Amount?>("PurchaseValue"); set => SetPropertyValue<Amount?>("PurchaseValue", value); }
                [ODataProperty]
                public Amount? PurchaseValueBase { get => GetPropertyValue<Amount?>("PurchaseValueBase"); set => SetPropertyValue<Amount?>("PurchaseValueBase", value); }
                [ODataProperty]
                public Amount? SalvageValue { get => GetPropertyValue<Amount?>("SalvageValue"); set => SetPropertyValue<Amount?>("SalvageValue", value); }
                [ODataProperty]
                public Amount? SalvageValueBase { get => GetPropertyValue<Amount?>("SalvageValueBase"); set => SetPropertyValue<Amount?>("SalvageValueBase", value); }
                [ODataProperty]
                public Finance.Assets.Asset? Asset { get => GetPropertyValue<Finance.Assets.Asset>("Asset"); set => SetPropertyValue<Finance.Assets.Asset>("Asset", value); }
                [Owner]
                [ODataProperty]
                public Finance.Assets.AssetTransaction? AssetTransaction { get => GetPropertyValue<Finance.Assets.AssetTransaction>("AssetTransaction"); set => SetPropertyValue<Finance.Assets.AssetTransaction>("AssetTransaction", value); }
                [ODataProperty]
                public Finance.Assets.ValuationModel? ValuationModel { get => GetPropertyValue<Finance.Assets.ValuationModel>("ValuationModel"); set => SetPropertyValue<Finance.Assets.ValuationModel>("ValuationModel", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace AssetTransactionLinesRepository
            {
                public enum OperationType
                {
                    Adjustment = 0,
                    Depreciation = 1,
                    Purchase = 2,
                    Sale = 3,
                    Reevaluation = 4
                }
            }
            [Entity(EntitySet = "Finance_Assets_Depreciations", TableName = "Ast_Depreciations")]
            public partial class Depreciation: General.Document
            {
                public Depreciation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Assets_Depreciations";
                public new const string EntityTableName = "Ast_Depreciations";
                [ODataProperty]
                public Finance.Assets.DepreciationsRepository.DepreciationRange? DepreciationRange { get => GetPropertyValue<Finance.Assets.DepreciationsRepository.DepreciationRange?>("DepreciationRange"); set => SetPropertyValue<Finance.Assets.DepreciationsRepository.DepreciationRange?>("DepreciationRange", value); }
                [ODataProperty]
                public DateTime? EndDate { get => GetPropertyValue<DateTime?>("EndDate"); set => SetPropertyValue<DateTime?>("EndDate", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? StartDate { get => GetPropertyValue<DateTime?>("StartDate"); set => SetPropertyValue<DateTime?>("StartDate", value); }
                [ODataProperty]
                public IEnumerable<Finance.Assets.DepreciationAsset>? Assets { get => GetCollection<Finance.Assets.DepreciationAsset>("Assets"); set => SetCollection<Finance.Assets.DepreciationAsset>("Assets", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Assets_DepreciationAssets", TableName = "Ast_Depreciation_Assets")]
            public partial class DepreciationAsset: EntityResource
            {
                public DepreciationAsset(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_DepreciationAssets";
                public const string EntityTableName = "Ast_Depreciation_Assets";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Assets.Asset? Asset { get => GetPropertyValue<Finance.Assets.Asset>("Asset"); set => SetPropertyValue<Finance.Assets.Asset>("Asset", value); }
                [Owner]
                [ODataProperty]
                public Finance.Assets.Depreciation? Depreciation { get => GetPropertyValue<Finance.Assets.Depreciation>("Depreciation"); set => SetPropertyValue<Finance.Assets.Depreciation>("Depreciation", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Assets_DepreciationMethods", TableName = "Ast_Depreciation_Methods")]
            public partial class DepreciationMethod: EntityResource
            {
                public DepreciationMethod(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_DepreciationMethods";
                public const string EntityTableName = "Ast_Depreciation_Methods";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Assets.DepreciationMethodsRepository.DepreciationFunction? DepreciationFunction { get => GetPropertyValue<Finance.Assets.DepreciationMethodsRepository.DepreciationFunction?>("DepreciationFunction"); set => SetPropertyValue<Finance.Assets.DepreciationMethodsRepository.DepreciationFunction?>("DepreciationFunction", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Decimal? Factor { get => GetPropertyValue<Decimal?>("Factor"); set => SetPropertyValue<Decimal?>("Factor", value); }
                [ODataProperty]
                public Boolean? IsSystem { get => GetPropertyValue<Boolean?>("IsSystem"); set => SetPropertyValue<Boolean?>("IsSystem", value); }
                [ODataProperty]
                public Int32? MonthsInAPeriod { get => GetPropertyValue<Int32?>("MonthsInAPeriod"); set => SetPropertyValue<Int32?>("MonthsInAPeriod", value); }
                [ODataProperty]
                public Finance.Assets.DepreciationMethodsRepository.PeriodDeterminationMethod? PeriodDeterminationMethod { get => GetPropertyValue<Finance.Assets.DepreciationMethodsRepository.PeriodDeterminationMethod?>("PeriodDeterminationMethod"); set => SetPropertyValue<Finance.Assets.DepreciationMethodsRepository.PeriodDeterminationMethod?>("PeriodDeterminationMethod", value); }
                [ODataProperty]
                public Boolean? StartFromNextMonth { get => GetPropertyValue<Boolean?>("StartFromNextMonth"); set => SetPropertyValue<Boolean?>("StartFromNextMonth", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DepreciationMethodsRepository
            {
                public enum DepreciationFunction
                {
                    DepreciationChangeByFactor = 0,
                    StraightLine = 1,
                    SumOfYearsDigits = 2,
                    UserDefinedWithTable = 3
                }
                public enum PeriodDeterminationMethod
                {
                    NextMonth = 0,
                    CurrentMonth = 1,
                    ByDays = 2
                }
            }
            [Entity(EntitySet = "Finance_Assets_DepreciationPlans", TableName = "Ast_Depreciation_Plans")]
            public partial class DepreciationPlan: General.Document
            {
                public DepreciationPlan(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Assets_DepreciationPlans";
                public new const string EntityTableName = "Ast_Depreciation_Plans";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public IEnumerable<Finance.Assets.DepreciationPlanLine>? Lines { get => GetCollection<Finance.Assets.DepreciationPlanLine>("Lines"); set => SetCollection<Finance.Assets.DepreciationPlanLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Assets_DepreciationPlanLines", TableName = "Ast_Depreciation_Plan_Lines")]
            public partial class DepreciationPlanLine: EntityResource
            {
                public DepreciationPlanLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_DepreciationPlanLines";
                public const string EntityTableName = "Ast_Depreciation_Plan_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? DepreciationEndDate { get => GetPropertyValue<DateTime?>("DepreciationEndDate"); set => SetPropertyValue<DateTime?>("DepreciationEndDate", value); }
                [ODataProperty]
                public DateTime? DepreciationStartDate { get => GetPropertyValue<DateTime?>("DepreciationStartDate"); set => SetPropertyValue<DateTime?>("DepreciationStartDate", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Amount? PlanDepreciationValue { get => GetPropertyValue<Amount?>("PlanDepreciationValue"); set => SetPropertyValue<Amount?>("PlanDepreciationValue", value); }
                [ODataProperty]
                public Finance.Assets.Asset? Asset { get => GetPropertyValue<Finance.Assets.Asset>("Asset"); set => SetPropertyValue<Finance.Assets.Asset>("Asset", value); }
                [ODataProperty]
                public Finance.Assets.DepreciationMethod? DepreciationMethod { get => GetPropertyValue<Finance.Assets.DepreciationMethod>("DepreciationMethod"); set => SetPropertyValue<Finance.Assets.DepreciationMethod>("DepreciationMethod", value); }
                [Owner]
                [ODataProperty]
                public Finance.Assets.DepreciationPlan? DepreciationPlan { get => GetPropertyValue<Finance.Assets.DepreciationPlan>("DepreciationPlan"); set => SetPropertyValue<Finance.Assets.DepreciationPlan>("DepreciationPlan", value); }
                [ODataProperty]
                public Finance.Assets.DepreciationPlan? Document { get => GetPropertyValue<Finance.Assets.DepreciationPlan>("Document"); set => SetPropertyValue<Finance.Assets.DepreciationPlan>("Document", value); }
                [ODataProperty]
                public Finance.Assets.ValuationModel? ValuationModel { get => GetPropertyValue<Finance.Assets.ValuationModel>("ValuationModel"); set => SetPropertyValue<Finance.Assets.ValuationModel>("ValuationModel", value); }
                [ODataProperty]
                public IEnumerable<Finance.Assets.DepreciationPlanLineFixedValue>? FixedValues { get => GetCollection<Finance.Assets.DepreciationPlanLineFixedValue>("FixedValues"); set => SetCollection<Finance.Assets.DepreciationPlanLineFixedValue>("FixedValues", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Assets_DepreciationPlanLineFixedValues", TableName = "Ast_Depreciation_Plan_Line_Fixed_Values")]
            public partial class DepreciationPlanLineFixedValue: EntityResource
            {
                public DepreciationPlanLineFixedValue(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_DepreciationPlanLineFixedValues";
                public const string EntityTableName = "Ast_Depreciation_Plan_Line_Fixed_Values";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? DepreciationValue { get => GetPropertyValue<Amount?>("DepreciationValue"); set => SetPropertyValue<Amount?>("DepreciationValue", value); }
                [ODataProperty]
                public Byte? FixedValuePeriodMonth { get => GetPropertyValue<Byte?>("FixedValuePeriodMonth"); set => SetPropertyValue<Byte?>("FixedValuePeriodMonth", value); }
                [ODataProperty]
                public Int16? FixedValuePeriodYear { get => GetPropertyValue<Int16?>("FixedValuePeriodYear"); set => SetPropertyValue<Int16?>("FixedValuePeriodYear", value); }
                [Owner]
                [ODataProperty]
                public Finance.Assets.DepreciationPlanLine? DepreciationPlanLine { get => GetPropertyValue<Finance.Assets.DepreciationPlanLine>("DepreciationPlanLine"); set => SetPropertyValue<Finance.Assets.DepreciationPlanLine>("DepreciationPlanLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Assets_DepreciationPlanTemplates", TableName = "Ast_Depreciation_Plan_Templates")]
            public partial class DepreciationPlanTemplate: EntityResource
            {
                public DepreciationPlanTemplate(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_DepreciationPlanTemplates";
                public const string EntityTableName = "Ast_Depreciation_Plan_Templates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? AssetLife { get => GetPropertyValue<Int32?>("AssetLife"); set => SetPropertyValue<Int32?>("AssetLife", value); }
                [Owner]
                [ODataProperty]
                public Finance.Assets.AssetCategory? AssetCategory { get => GetPropertyValue<Finance.Assets.AssetCategory>("AssetCategory"); set => SetPropertyValue<Finance.Assets.AssetCategory>("AssetCategory", value); }
                [ODataProperty]
                public Finance.Assets.DepreciationMethod? DepreciationMethod { get => GetPropertyValue<Finance.Assets.DepreciationMethod>("DepreciationMethod"); set => SetPropertyValue<Finance.Assets.DepreciationMethod>("DepreciationMethod", value); }
                [ODataProperty]
                public Finance.Assets.ValuationModel? ValuationModel { get => GetPropertyValue<Finance.Assets.ValuationModel>("ValuationModel"); set => SetPropertyValue<Finance.Assets.ValuationModel>("ValuationModel", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DepreciationsRepository
            {
                public enum DepreciationRange
                {
                    AllAssets = 0,
                    SpecifiedAssets = 1
                }
            }
            [Entity(EntitySet = "Finance_Assets_ValuationModels", TableName = "Ast_Valuation_Models")]
            public partial class ValuationModel: EntityResource
            {
                public ValuationModel(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Assets_ValuationModels";
                public const string EntityTableName = "Ast_Valuation_Models";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsSystem { get => GetPropertyValue<Boolean?>("IsSystem"); set => SetPropertyValue<Boolean?>("IsSystem", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Finance.Assets.DepreciationMethod? DefaultDepreciationMethod { get => GetPropertyValue<Finance.Assets.DepreciationMethod>("DefaultDepreciationMethod"); set => SetPropertyValue<Finance.Assets.DepreciationMethod>("DefaultDepreciationMethod", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Cost
        {
            [Entity(EntitySet = "Finance_Cost_AllocationModels", TableName = "Cost_Allocation_Models")]
            public partial class AllocationModel: EntityResource
            {
                public AllocationModel(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_AllocationModels";
                public const string EntityTableName = "Cost_Allocation_Models";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? CostAllocationModelName { get => GetPropertyValue<String?>("CostAllocationModelName"); set => SetPropertyValue<String?>("CostAllocationModelName", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_Calculations", TableName = "Cost_Calculations")]
            public partial class Calculation: General.Document
            {
                public Calculation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Cost_Calculations";
                public new const string EntityTableName = "Cost_Calculations";
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
                [ODataProperty]
                public Finance.Cost.Template? CostTemplate { get => GetPropertyValue<Finance.Cost.Template>("CostTemplate"); set => SetPropertyValue<Finance.Cost.Template>("CostTemplate", value); }
                [ODataProperty]
                public IEnumerable<Finance.Cost.CalculationCost>? Costs { get => GetCollection<Finance.Cost.CalculationCost>("Costs"); set => SetCollection<Finance.Cost.CalculationCost>("Costs", value); }
                [ODataProperty]
                public IEnumerable<Finance.Cost.CalculationProductOutput>? ProductOutputs { get => GetCollection<Finance.Cost.CalculationProductOutput>("ProductOutputs"); set => SetCollection<Finance.Cost.CalculationProductOutput>("ProductOutputs", value); }
                [ODataProperty]
                public IEnumerable<Finance.Cost.CalculationResult>? Results { get => GetCollection<Finance.Cost.CalculationResult>("Results"); set => SetCollection<Finance.Cost.CalculationResult>("Results", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Cost_CalculationCosts", TableName = "Cost_Calculation_Costs")]
            public partial class CalculationCost: EntityResource
            {
                public CalculationCost(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_CalculationCosts";
                public const string EntityTableName = "Cost_Calculation_Costs";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? Amount { get => GetPropertyValue<Decimal?>("Amount"); set => SetPropertyValue<Decimal?>("Amount", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Guid? ProjectId { get => GetPropertyValue<Guid?>("ProjectId"); set => SetPropertyValue<Guid?>("ProjectId", value); }
                [Owner]
                [ODataProperty]
                public Finance.Cost.Calculation? Calculation { get => GetPropertyValue<Finance.Cost.Calculation>("Calculation"); set => SetPropertyValue<Finance.Cost.Calculation>("Calculation", value); }
                [ODataProperty]
                public Finance.Accounting.CostCenter? CostCenter { get => GetPropertyValue<Finance.Accounting.CostCenter>("CostCenter"); set => SetPropertyValue<Finance.Accounting.CostCenter>("CostCenter", value); }
                [ODataProperty]
                public Finance.Cost.CostType? CostType { get => GetPropertyValue<Finance.Cost.CostType>("CostType"); set => SetPropertyValue<Finance.Cost.CostType>("CostType", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrder? SalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder", value); }
                [ODataProperty]
                public Production.Resources.Workgroup? Workgroup { get => GetPropertyValue<Production.Resources.Workgroup>("Workgroup"); set => SetPropertyValue<Production.Resources.Workgroup>("Workgroup", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_CalculationProductOutputs", TableName = "Cost_Calculation_Product_Outputs")]
            public partial class CalculationProductOutput: EntityResource
            {
                public CalculationProductOutput(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_CalculationProductOutputs";
                public const string EntityTableName = "Cost_Calculation_Product_Outputs";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Guid? ProjectId { get => GetPropertyValue<Guid?>("ProjectId"); set => SetPropertyValue<Guid?>("ProjectId", value); }
                [ODataProperty]
                public Decimal? Quantity { get => GetPropertyValue<Decimal?>("Quantity"); set => SetPropertyValue<Decimal?>("Quantity", value); }
                [Owner]
                [ODataProperty]
                public Finance.Cost.Calculation? Calculation { get => GetPropertyValue<Finance.Cost.Calculation>("Calculation"); set => SetPropertyValue<Finance.Cost.Calculation>("Calculation", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public Finance.Cost.CalculationProductOutput? Parent { get => GetPropertyValue<Finance.Cost.CalculationProductOutput>("Parent"); set => SetPropertyValue<Finance.Cost.CalculationProductOutput>("Parent", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Finance.Accounting.ProfitCenter? ProfitCenter { get => GetPropertyValue<Finance.Accounting.ProfitCenter>("ProfitCenter"); set => SetPropertyValue<Finance.Accounting.ProfitCenter>("ProfitCenter", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrder? SalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrder? WorkOrder { get => GetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder"); set => SetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder", value); }
                [ODataProperty]
                public Production.Resources.Workgroup? Workgroup { get => GetPropertyValue<Production.Resources.Workgroup>("Workgroup"); set => SetPropertyValue<Production.Resources.Workgroup>("Workgroup", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_CalculationResults", TableName = "Cost_Calculation_Results")]
            public partial class CalculationResult: EntityResource
            {
                public CalculationResult(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_CalculationResults";
                public const string EntityTableName = "Cost_Calculation_Results";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? FullCost { get => GetPropertyValue<Decimal?>("FullCost"); set => SetPropertyValue<Decimal?>("FullCost", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Guid? ProjectId { get => GetPropertyValue<Guid?>("ProjectId"); set => SetPropertyValue<Guid?>("ProjectId", value); }
                [ODataProperty]
                public Decimal? Quantity { get => GetPropertyValue<Decimal?>("Quantity"); set => SetPropertyValue<Decimal?>("Quantity", value); }
                [Owner]
                [ODataProperty]
                public Finance.Cost.Calculation? Calculation { get => GetPropertyValue<Finance.Cost.Calculation>("Calculation"); set => SetPropertyValue<Finance.Cost.Calculation>("Calculation", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Finance.Accounting.ProfitCenter? ProfitCenter { get => GetPropertyValue<Finance.Accounting.ProfitCenter>("ProfitCenter"); set => SetPropertyValue<Finance.Accounting.ProfitCenter>("ProfitCenter", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrder? SalesOrder { get => GetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder"); set => SetPropertyValue<Crm.Sales.SalesOrder>("SalesOrder", value); }
                [ODataProperty]
                public Production.Resources.Workgroup? Workgroup { get => GetPropertyValue<Production.Resources.Workgroup>("Workgroup"); set => SetPropertyValue<Production.Resources.Workgroup>("Workgroup", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_CostTypes", TableName = "Cost_Types")]
            public partial class CostType: EntityResource
            {
                public CostType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_CostTypes";
                public const string EntityTableName = "Cost_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_Distributions", TableName = "Cost_Distributions")]
            public partial class Distribution: General.Document
            {
                public Distribution(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Cost_Distributions";
                public new const string EntityTableName = "Cost_Distributions";
                [ODataProperty]
                public DateTime? EndDate { get => GetPropertyValue<DateTime?>("EndDate"); set => SetPropertyValue<DateTime?>("EndDate", value); }
                [ODataProperty]
                public DateTime? StartDate { get => GetPropertyValue<DateTime?>("StartDate"); set => SetPropertyValue<DateTime?>("StartDate", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public IEnumerable<Finance.Cost.DistributionCost>? Costs { get => GetCollection<Finance.Cost.DistributionCost>("Costs"); set => SetCollection<Finance.Cost.DistributionCost>("Costs", value); }
                [ODataProperty]
                public IEnumerable<Finance.Cost.DistributionOutput>? Outputs { get => GetCollection<Finance.Cost.DistributionOutput>("Outputs"); set => SetCollection<Finance.Cost.DistributionOutput>("Outputs", value); }
                [ODataProperty]
                public IEnumerable<Finance.Cost.DistributionResult>? Results { get => GetCollection<Finance.Cost.DistributionResult>("Results"); set => SetCollection<Finance.Cost.DistributionResult>("Results", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Cost_DistributionCosts", TableName = "Cost_Distribution_Costs")]
            public partial class DistributionCost: EntityResource
            {
                public DistributionCost(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_DistributionCosts";
                public const string EntityTableName = "Cost_Distribution_Costs";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? AmountBase { get => GetPropertyValue<Amount?>("AmountBase"); set => SetPropertyValue<Amount?>("AmountBase", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public Finance.Cost.Distribution? CostDistribution { get => GetPropertyValue<Finance.Cost.Distribution>("CostDistribution"); set => SetPropertyValue<Finance.Cost.Distribution>("CostDistribution", value); }
                [ODataProperty]
                public Finance.Cost.CostType? CostType { get => GetPropertyValue<Finance.Cost.CostType>("CostType"); set => SetPropertyValue<Finance.Cost.CostType>("CostType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_DistributionOutputs", TableName = "Cost_Distribution_Outputs")]
            public partial class DistributionOutput: EntityResource
            {
                public DistributionOutput(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_DistributionOutputs";
                public const string EntityTableName = "Cost_Distribution_Outputs";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? WeightCoefficient { get => GetPropertyValue<Decimal?>("WeightCoefficient"); set => SetPropertyValue<Decimal?>("WeightCoefficient", value); }
                [Owner]
                [ODataProperty]
                public Finance.Cost.Distribution? CostDistribution { get => GetPropertyValue<Finance.Cost.Distribution>("CostDistribution"); set => SetPropertyValue<Finance.Cost.Distribution>("CostDistribution", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransactionLine? StoreTransactionLine { get => GetPropertyValue<Logistics.Inventory.StoreTransactionLine>("StoreTransactionLine"); set => SetPropertyValue<Logistics.Inventory.StoreTransactionLine>("StoreTransactionLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_DistributionResults", TableName = "Cost_Distribution_Results")]
            public partial class DistributionResult: EntityResource
            {
                public DistributionResult(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_DistributionResults";
                public const string EntityTableName = "Cost_Distribution_Results";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? DistributedAmountBase { get => GetPropertyValue<Amount?>("DistributedAmountBase"); set => SetPropertyValue<Amount?>("DistributedAmountBase", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Int32? OutputLineNo { get => GetPropertyValue<Int32?>("OutputLineNo"); set => SetPropertyValue<Int32?>("OutputLineNo", value); }
                [Owner]
                [ODataProperty]
                public Finance.Cost.Distribution? CostDistribution { get => GetPropertyValue<Finance.Cost.Distribution>("CostDistribution"); set => SetPropertyValue<Finance.Cost.Distribution>("CostDistribution", value); }
                [ODataProperty]
                public Finance.Cost.CostType? CostType { get => GetPropertyValue<Finance.Cost.CostType>("CostType"); set => SetPropertyValue<Finance.Cost.CostType>("CostType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_Templates", TableName = "Cost_Templates")]
            public partial class Template: EntityResource
            {
                public Template(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_Templates";
                public const string EntityTableName = "Cost_Templates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? CostTemplateCode { get => GetPropertyValue<String?>("CostTemplateCode"); set => SetPropertyValue<String?>("CostTemplateCode", value); }
                [ODataProperty]
                public String? CostTemplateName { get => GetPropertyValue<String?>("CostTemplateName"); set => SetPropertyValue<String?>("CostTemplateName", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                [ODataProperty]
                public IEnumerable<Finance.Cost.TemplateCostType>? CostTypes { get => GetCollection<Finance.Cost.TemplateCostType>("CostTypes"); set => SetCollection<Finance.Cost.TemplateCostType>("CostTypes", value); }
                [ODataProperty]
                public IEnumerable<Finance.Cost.TemplateLevel>? Levels { get => GetCollection<Finance.Cost.TemplateLevel>("Levels"); set => SetCollection<Finance.Cost.TemplateLevel>("Levels", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_TemplateCostTypes", TableName = "Cost_Template_Cost_Types")]
            public partial class TemplateCostType: EntityResource
            {
                public TemplateCostType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_TemplateCostTypes";
                public const string EntityTableName = "Cost_Template_Cost_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? HierarchyLevel { get => GetPropertyValue<Int32?>("HierarchyLevel"); set => SetPropertyValue<Int32?>("HierarchyLevel", value); }
                [Owner]
                [ODataProperty]
                public Finance.Cost.Template? CostTemplate { get => GetPropertyValue<Finance.Cost.Template>("CostTemplate"); set => SetPropertyValue<Finance.Cost.Template>("CostTemplate", value); }
                [ODataProperty]
                public Finance.Cost.CostType? CostType { get => GetPropertyValue<Finance.Cost.CostType>("CostType"); set => SetPropertyValue<Finance.Cost.CostType>("CostType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Cost_TemplateLevels", TableName = "Cost_Template_Levels")]
            public partial class TemplateLevel: EntityResource
            {
                public TemplateLevel(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Cost_TemplateLevels";
                public const string EntityTableName = "Cost_Template_Levels";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? HierarchyLevel { get => GetPropertyValue<Int32?>("HierarchyLevel"); set => SetPropertyValue<Int32?>("HierarchyLevel", value); }
                [ODataProperty]
                public String? LevelName { get => GetPropertyValue<String?>("LevelName"); set => SetPropertyValue<String?>("LevelName", value); }
                [Owner]
                [ODataProperty]
                public Finance.Cost.Template? CostTemplate { get => GetPropertyValue<Finance.Cost.Template>("CostTemplate"); set => SetPropertyValue<Finance.Cost.Template>("CostTemplate", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Excise
        {
            [Entity(EntitySet = "Finance_Excise_ExciseAdministrativeDocuments", TableName = "Exc_Excise_Administrative_Documents")]
            public partial class ExciseAdministrativeDocument: General.Document
            {
                public ExciseAdministrativeDocument(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Excise_ExciseAdministrativeDocuments";
                public new const string EntityTableName = "Exc_Excise_Administrative_Documents";
                [ODataProperty]
                public Boolean? AccrueExciseDuty { get => GetPropertyValue<Boolean?>("AccrueExciseDuty"); set => SetPropertyValue<Boolean?>("AccrueExciseDuty", value); }
                [ODataProperty]
                public String? AdministrativeReferenceCode { get => GetPropertyValue<String?>("AdministrativeReferenceCode"); set => SetPropertyValue<String?>("AdministrativeReferenceCode", value); }
                [ODataProperty]
                public Logistics.Inventory.MovementType? Direction { get => GetPropertyValue<Logistics.Inventory.MovementType?>("Direction"); set => SetPropertyValue<Logistics.Inventory.MovementType?>("Direction", value); }
                [ODataProperty]
                public Boolean? IsDeferredSubmission { get => GetPropertyValue<Boolean?>("IsDeferredSubmission"); set => SetPropertyValue<Boolean?>("IsDeferredSubmission", value); }
                [ODataProperty]
                public General.Contacts.Party? DeliveryParty { get => GetPropertyValue<General.Contacts.Party>("DeliveryParty"); set => SetPropertyValue<General.Contacts.Party>("DeliveryParty", value); }
                [ODataProperty]
                public General.Contacts.Party? OtherParty { get => GetPropertyValue<General.Contacts.Party>("OtherParty"); set => SetPropertyValue<General.Contacts.Party>("OtherParty", value); }
                [ODataProperty]
                public General.Contacts.Person? ReportingPerson { get => GetPropertyValue<General.Contacts.Person>("ReportingPerson"); set => SetPropertyValue<General.Contacts.Person>("ReportingPerson", value); }
                [ODataProperty]
                public Finance.Excise.TaxWarehouse? TaxWarehouse { get => GetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse"); set => SetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse", value); }
                [ODataProperty]
                public Logistics.Shipment.Carrier? TransportationCarrier { get => GetPropertyValue<Logistics.Shipment.Carrier>("TransportationCarrier"); set => SetPropertyValue<Logistics.Shipment.Carrier>("TransportationCarrier", value); }
                [ODataProperty]
                public Logistics.Shipment.TransportationVehicle? TransportationVehicle { get => GetPropertyValue<Logistics.Shipment.TransportationVehicle>("TransportationVehicle"); set => SetPropertyValue<Logistics.Shipment.TransportationVehicle>("TransportationVehicle", value); }
                [ODataProperty]
                public IEnumerable<Finance.Excise.ExciseAdministrativeDocumentLine>? Lines { get => GetCollection<Finance.Excise.ExciseAdministrativeDocumentLine>("Lines"); set => SetCollection<Finance.Excise.ExciseAdministrativeDocumentLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseAdministrativeDocumentLines", TableName = "Exc_Excise_Administrative_Document_Lines")]
            public partial class ExciseAdministrativeDocumentLine: EntityResource
            {
                public ExciseAdministrativeDocumentLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExciseAdministrativeDocumentLines";
                public const string EntityTableName = "Exc_Excise_Administrative_Document_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? ExciseAlcoholicStrength { get => GetPropertyValue<Decimal?>("ExciseAlcoholicStrength"); set => SetPropertyValue<Decimal?>("ExciseAlcoholicStrength", value); }
                [ODataProperty]
                public Amount? ExciseAmount { get => GetPropertyValue<Amount?>("ExciseAmount"); set => SetPropertyValue<Amount?>("ExciseAmount", value); }
                [ODataProperty]
                public Decimal? ExciseAmountBase { get => GetPropertyValue<Decimal?>("ExciseAmountBase"); set => SetPropertyValue<Decimal?>("ExciseAmountBase", value); }
                [ODataProperty]
                public Decimal? ExciseDutyRateValue { get => GetPropertyValue<Decimal?>("ExciseDutyRateValue"); set => SetPropertyValue<Decimal?>("ExciseDutyRateValue", value); }
                [ODataProperty]
                public Quantity? ExciseQuantity { get => GetPropertyValue<Quantity?>("ExciseQuantity"); set => SetPropertyValue<Quantity?>("ExciseQuantity", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [Owner]
                [ODataProperty]
                public Finance.Excise.ExciseAdministrativeDocument? ExciseAdministrativeDocument { get => GetPropertyValue<Finance.Excise.ExciseAdministrativeDocument>("ExciseAdministrativeDocument"); set => SetPropertyValue<Finance.Excise.ExciseAdministrativeDocument>("ExciseAdministrativeDocument", value); }
                [ODataProperty]
                public Finance.Excise.ExciseAdministrativeDocument? Document { get => GetPropertyValue<Finance.Excise.ExciseAdministrativeDocument>("Document"); set => SetPropertyValue<Finance.Excise.ExciseAdministrativeDocument>("Document", value); }
                [ODataProperty]
                public Finance.Excise.ExciseDutyRate? ExciseDutyRate { get => GetPropertyValue<Finance.Excise.ExciseDutyRate>("ExciseDutyRate"); set => SetPropertyValue<Finance.Excise.ExciseDutyRate>("ExciseDutyRate", value); }
                [ODataProperty]
                public Finance.Excise.ExciseProduct? ExciseProduct { get => GetPropertyValue<Finance.Excise.ExciseProduct>("ExciseProduct"); set => SetPropertyValue<Finance.Excise.ExciseProduct>("ExciseProduct", value); }
                [ODataProperty]
                public Finance.Excise.ExcisePurposeCode? ExcisePurposeCode { get => GetPropertyValue<Finance.Excise.ExcisePurposeCode>("ExcisePurposeCode"); set => SetPropertyValue<Finance.Excise.ExcisePurposeCode>("ExcisePurposeCode", value); }
                [ODataProperty]
                public General.MeasurementUnit? ExciseQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("ExciseQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("ExciseQuantityUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public Finance.Excise.MeasuringTransaction? MeasuringTransaction { get => GetPropertyValue<Finance.Excise.MeasuringTransaction>("MeasuringTransaction"); set => SetPropertyValue<Finance.Excise.MeasuringTransaction>("MeasuringTransaction", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseDeclarations", TableName = "Exc_Excise_Declarations")]
            public partial class ExciseDeclaration: General.Document
            {
                public ExciseDeclaration(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Excise_ExciseDeclarations";
                public new const string EntityTableName = "Exc_Excise_Declarations";
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public DateTime? ToDate { get => GetPropertyValue<DateTime?>("ToDate"); set => SetPropertyValue<DateTime?>("ToDate", value); }
                [ODataProperty]
                public General.Contacts.Person? ReportingPerson { get => GetPropertyValue<General.Contacts.Person>("ReportingPerson"); set => SetPropertyValue<General.Contacts.Person>("ReportingPerson", value); }
                [ODataProperty]
                public Finance.Excise.TaxWarehouse? TaxWarehouse { get => GetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse"); set => SetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseDutyRates", TableName = "Exc_Excise_Duty_Rates")]
            public partial class ExciseDutyRate: EntityResource
            {
                public ExciseDutyRate(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExciseDutyRates";
                public const string EntityTableName = "Exc_Excise_Duty_Rates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? ExciseDutyRateField { get => GetPropertyValue<Decimal?>("ExciseDutyRateField"); set => SetPropertyValue<Decimal?>("ExciseDutyRateField", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.MeasurementUnit? ExciseMeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("ExciseMeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("ExciseMeasurementUnit", value); }
                [ODataProperty]
                public Finance.Excise.ExciseProduct? ExciseProduct { get => GetPropertyValue<Finance.Excise.ExciseProduct>("ExciseProduct"); set => SetPropertyValue<Finance.Excise.ExciseProduct>("ExciseProduct", value); }
                [ODataProperty]
                public Finance.Excise.ExcisePurposeCode? ExcisePurposeCode { get => GetPropertyValue<Finance.Excise.ExcisePurposeCode>("ExcisePurposeCode"); set => SetPropertyValue<Finance.Excise.ExcisePurposeCode>("ExcisePurposeCode", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseOperationTypes", TableName = "Exc_Excise_Operation_Types")]
            public partial class ExciseOperationType: EntityResource
            {
                public ExciseOperationType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExciseOperationTypes";
                public const string EntityTableName = "Exc_Excise_Operation_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseProducts", TableName = "Exc_Excise_Products")]
            public partial class ExciseProduct: EntityResource
            {
                public ExciseProduct(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExciseProducts";
                public const string EntityTableName = "Exc_Excise_Products";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Finance.Excise.ExciseProductCategory? ExciseProductCategory { get => GetPropertyValue<Finance.Excise.ExciseProductCategory>("ExciseProductCategory"); set => SetPropertyValue<Finance.Excise.ExciseProductCategory>("ExciseProductCategory", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ExciseProductCategoriesRepository
            {
                public enum CalculationAlgorithm
                {
                    NoОperation = 0,
                    Qty = 1,
                    QtyByAlcoholicStrength = 2,
                    QtyByAlcoholicStrengthDiv100 = 3
                }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseProductCategories", TableName = "Exc_Excise_Product_Categories")]
            public partial class ExciseProductCategory: EntityResource
            {
                public ExciseProductCategory(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExciseProductCategories";
                public const string EntityTableName = "Exc_Excise_Product_Categories";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Excise.ExciseProductCategoriesRepository.CalculationAlgorithm? CalculationAlgorithm { get => GetPropertyValue<Finance.Excise.ExciseProductCategoriesRepository.CalculationAlgorithm?>("CalculationAlgorithm"); set => SetPropertyValue<Finance.Excise.ExciseProductCategoriesRepository.CalculationAlgorithm?>("CalculationAlgorithm", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseProductTypes", TableName = "Exc_Excise_Product_Types")]
            public partial class ExciseProductType: EntityResource
            {
                public ExciseProductType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExciseProductTypes";
                public const string EntityTableName = "Exc_Excise_Product_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? AlcoholicStrength { get => GetPropertyValue<Decimal?>("AlcoholicStrength"); set => SetPropertyValue<Decimal?>("AlcoholicStrength", value); }
                [ODataProperty]
                public Decimal? Capacity { get => GetPropertyValue<Decimal?>("Capacity"); set => SetPropertyValue<Decimal?>("Capacity", value); }
                [ODataProperty]
                public Finance.Excise.ExciseProductTypesRepository.Category? Category { get => GetPropertyValue<Finance.Excise.ExciseProductTypesRepository.Category?>("Category"); set => SetPropertyValue<Finance.Excise.ExciseProductTypesRepository.Category?>("Category", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public Decimal? ExciseAmountPerStamp { get => GetPropertyValue<Decimal?>("ExciseAmountPerStamp"); set => SetPropertyValue<Decimal?>("ExciseAmountPerStamp", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Finance.Intrastat.CommodityCode? CommodityCode { get => GetPropertyValue<Finance.Intrastat.CommodityCode>("CommodityCode"); set => SetPropertyValue<Finance.Intrastat.CommodityCode>("CommodityCode", value); }
                [ODataProperty]
                public Finance.Excise.ExciseProduct? ExciseProduct { get => GetPropertyValue<Finance.Excise.ExciseProduct>("ExciseProduct"); set => SetPropertyValue<Finance.Excise.ExciseProduct>("ExciseProduct", value); }
                [ODataProperty]
                public General.MeasurementUnit? MeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("MeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("MeasurementUnit", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ExciseProductTypesRepository
            {
                public enum Category
                {
                    ExciseStampForTobaccoProducts = 0,
                    ExciseStampForAlcoholProducts = 1,
                    DutyFree = 2
                }
            }
            [Entity(EntitySet = "Finance_Excise_ExcisePurposeCodes", TableName = "Exc_Excise_Purpose_Codes")]
            public partial class ExcisePurposeCode: EntityResource
            {
                public ExcisePurposeCode(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExcisePurposeCodes";
                public const string EntityTableName = "Exc_Excise_Purpose_Codes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseStampLots", TableName = "Exc_Excise_Stamp_Lots")]
            public partial class ExciseStampLot: EntityResource
            {
                public ExciseStampLot(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExciseStampLots";
                public const string EntityTableName = "Exc_Excise_Stamp_Lots";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? BatchNumber { get => GetPropertyValue<String?>("BatchNumber"); set => SetPropertyValue<String?>("BatchNumber", value); }
                [ODataProperty]
                public String? EndNumber { get => GetPropertyValue<String?>("EndNumber"); set => SetPropertyValue<String?>("EndNumber", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? PurchaseLotNumber { get => GetPropertyValue<String?>("PurchaseLotNumber"); set => SetPropertyValue<String?>("PurchaseLotNumber", value); }
                [ODataProperty]
                public Int32? Quantity { get => GetPropertyValue<Int32?>("Quantity"); set => SetPropertyValue<Int32?>("Quantity", value); }
                [ODataProperty]
                public String? StartNumber { get => GetPropertyValue<String?>("StartNumber"); set => SetPropertyValue<String?>("StartNumber", value); }
                [ODataProperty]
                public Finance.Excise.ExciseProductType? ExciseProductType { get => GetPropertyValue<Finance.Excise.ExciseProductType>("ExciseProductType"); set => SetPropertyValue<Finance.Excise.ExciseProductType>("ExciseProductType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseStampOperations", TableName = "Exc_Excise_Stamp_Operations")]
            public partial class ExciseStampOperation: General.Document
            {
                public ExciseStampOperation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Excise_ExciseStampOperations";
                public new const string EntityTableName = "Exc_Excise_Stamp_Operations";
                [ODataProperty]
                public Finance.Excise.ExciseStampOperationType? ExciseStampOperationType { get => GetPropertyValue<Finance.Excise.ExciseStampOperationType>("ExciseStampOperationType"); set => SetPropertyValue<Finance.Excise.ExciseStampOperationType>("ExciseStampOperationType", value); }
                [ODataProperty]
                public Finance.Excise.TaxWarehouse? TaxWarehouse { get => GetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse"); set => SetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse", value); }
                [ODataProperty]
                public IEnumerable<Finance.Excise.ExciseStampOperationLine>? Lines { get => GetCollection<Finance.Excise.ExciseStampOperationLine>("Lines"); set => SetCollection<Finance.Excise.ExciseStampOperationLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseStampOperationLines", TableName = "Exc_Excise_Stamp_Operation_Lines")]
            public partial class ExciseStampOperationLine: EntityResource
            {
                public ExciseStampOperationLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExciseStampOperationLines";
                public const string EntityTableName = "Exc_Excise_Stamp_Operation_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? EndNumber { get => GetPropertyValue<String?>("EndNumber"); set => SetPropertyValue<String?>("EndNumber", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Int32? Quantity { get => GetPropertyValue<Int32?>("Quantity"); set => SetPropertyValue<Int32?>("Quantity", value); }
                [ODataProperty]
                public String? StartNumber { get => GetPropertyValue<String?>("StartNumber"); set => SetPropertyValue<String?>("StartNumber", value); }
                [ODataProperty]
                public Finance.Excise.ExciseProductType? ExciseProductType { get => GetPropertyValue<Finance.Excise.ExciseProductType>("ExciseProductType"); set => SetPropertyValue<Finance.Excise.ExciseProductType>("ExciseProductType", value); }
                [ODataProperty]
                public Finance.Excise.ExciseStampLot? ExciseStampLot { get => GetPropertyValue<Finance.Excise.ExciseStampLot>("ExciseStampLot"); set => SetPropertyValue<Finance.Excise.ExciseStampLot>("ExciseStampLot", value); }
                [Owner]
                [ODataProperty]
                public Finance.Excise.ExciseStampOperation? ExciseStampOperation { get => GetPropertyValue<Finance.Excise.ExciseStampOperation>("ExciseStampOperation"); set => SetPropertyValue<Finance.Excise.ExciseStampOperation>("ExciseStampOperation", value); }
                [ODataProperty]
                public Finance.Excise.ExciseStampOperation? Document { get => GetPropertyValue<Finance.Excise.ExciseStampOperation>("Document"); set => SetPropertyValue<Finance.Excise.ExciseStampOperation>("Document", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Excise_ExciseStampOperationTypes", TableName = "Exc_Excise_Stamp_Operation_Types")]
            public partial class ExciseStampOperationType: EntityResource
            {
                public ExciseStampOperationType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_ExciseStampOperationTypes";
                public const string EntityTableName = "Exc_Excise_Stamp_Operation_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Excise.ExciseStampOperationTypeEnum? Box1Effect { get => GetPropertyValue<Finance.Excise.ExciseStampOperationTypeEnum?>("Box1Effect"); set => SetPropertyValue<Finance.Excise.ExciseStampOperationTypeEnum?>("Box1Effect", value); }
                [ODataProperty]
                public Finance.Excise.ExciseStampOperationTypeEnum? Box2Effect { get => GetPropertyValue<Finance.Excise.ExciseStampOperationTypeEnum?>("Box2Effect"); set => SetPropertyValue<Finance.Excise.ExciseStampOperationTypeEnum?>("Box2Effect", value); }
                [ODataProperty]
                public Finance.Excise.ExciseStampOperationTypeEnum? Box3Effect { get => GetPropertyValue<Finance.Excise.ExciseStampOperationTypeEnum?>("Box3Effect"); set => SetPropertyValue<Finance.Excise.ExciseStampOperationTypeEnum?>("Box3Effect", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            public enum ExciseStampOperationTypeEnum
            {
                NoChange = 0,
                Plus = 1,
                Minus = 2
            }
            [Entity(EntitySet = "Finance_Excise_MeasuringTransactions", TableName = "Exc_Measuring_Transactions")]
            public partial class MeasuringTransaction: EntityResource
            {
                public MeasuringTransaction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_MeasuringTransactions";
                public const string EntityTableName = "Exc_Measuring_Transactions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? AlcoholDegree { get => GetPropertyValue<Decimal?>("AlcoholDegree"); set => SetPropertyValue<Decimal?>("AlcoholDegree", value); }
                [ODataProperty]
                public Int32? AlcoholDensity { get => GetPropertyValue<Int32?>("AlcoholDensity"); set => SetPropertyValue<Int32?>("AlcoholDensity", value); }
                [ODataProperty]
                public Int32? AlcoholTemperature { get => GetPropertyValue<Int32?>("AlcoholTemperature"); set => SetPropertyValue<Int32?>("AlcoholTemperature", value); }
                [ODataProperty]
                public Finance.Excise.MeasuringTransactionsRepository.Direction? Direction { get => GetPropertyValue<Finance.Excise.MeasuringTransactionsRepository.Direction?>("Direction"); set => SetPropertyValue<Finance.Excise.MeasuringTransactionsRepository.Direction?>("Direction", value); }
                [ODataProperty]
                public DateTime? EndTimeUtc { get => GetPropertyValue<DateTime?>("EndTimeUtc"); set => SetPropertyValue<DateTime?>("EndTimeUtc", value); }
                [ODataProperty]
                public String? MeasuringDeviceCode { get => GetPropertyValue<String?>("MeasuringDeviceCode"); set => SetPropertyValue<String?>("MeasuringDeviceCode", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public DateTime? StartTimeUtc { get => GetPropertyValue<DateTime?>("StartTimeUtc"); set => SetPropertyValue<DateTime?>("StartTimeUtc", value); }
                [ODataProperty]
                public Decimal? TotalCounterEnd { get => GetPropertyValue<Decimal?>("TotalCounterEnd"); set => SetPropertyValue<Decimal?>("TotalCounterEnd", value); }
                [ODataProperty]
                public Decimal? TotalCounterStart { get => GetPropertyValue<Decimal?>("TotalCounterStart"); set => SetPropertyValue<Decimal?>("TotalCounterStart", value); }
                [ODataProperty]
                public String? TransactionNumber { get => GetPropertyValue<String?>("TransactionNumber"); set => SetPropertyValue<String?>("TransactionNumber", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Finance.Excise.TaxWarehouse? TaxWarehouse { get => GetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse"); set => SetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace MeasuringTransactionsRepository
            {
                public enum Direction
                {
                    IN = 0,
                    OUT = 1
                }
            }
            [Entity(EntitySet = "Finance_Excise_TaxWarehouses", TableName = "Exc_Tax_Warehouses")]
            public partial class TaxWarehouse: EntityResource
            {
                public TaxWarehouse(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Excise_TaxWarehouses";
                public const string EntityTableName = "Exc_Tax_Warehouses";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? CustomsOffice { get => GetPropertyValue<String?>("CustomsOffice"); set => SetPropertyValue<String?>("CustomsOffice", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? TaxWarehouseExciseNumber { get => GetPropertyValue<String?>("TaxWarehouseExciseNumber"); set => SetPropertyValue<String?>("TaxWarehouseExciseNumber", value); }
                [ODataProperty]
                public String? TraderExciseNumber { get => GetPropertyValue<String?>("TraderExciseNumber"); set => SetPropertyValue<String?>("TraderExciseNumber", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Intrastat
        {
            [Entity(EntitySet = "Finance_Intrastat_CommodityCodes", TableName = "Its_Commodity_Codes")]
            public partial class CommodityCode: EntityResource
            {
                public CommodityCode(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Intrastat_CommodityCodes";
                public const string EntityTableName = "Its_Commodity_Codes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? CommodityCodeField { get => GetPropertyValue<String?>("CommodityCodeField"); set => SetPropertyValue<String?>("CommodityCodeField", value); }
                [ODataProperty]
                public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
                [ODataProperty]
                public String? SupplementaryUnit { get => GetPropertyValue<String?>("SupplementaryUnit"); set => SetPropertyValue<String?>("SupplementaryUnit", value); }
                [ODataProperty]
                public DateTime? ValidFrom { get => GetPropertyValue<DateTime?>("ValidFrom"); set => SetPropertyValue<DateTime?>("ValidFrom", value); }
                [ODataProperty]
                public DateTime? ValidTo { get => GetPropertyValue<DateTime?>("ValidTo"); set => SetPropertyValue<DateTime?>("ValidTo", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Intrastat_Declarations", TableName = "Its_Declarations")]
            public partial class Declaration: General.Document
            {
                public Declaration(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Intrastat_Declarations";
                public new const string EntityTableName = "Its_Declarations";
                [ODataProperty]
                public Finance.Intrastat.DeclarationsRepository.DeclarationFunction? DeclarationFunction { get => GetPropertyValue<Finance.Intrastat.DeclarationsRepository.DeclarationFunction?>("DeclarationFunction"); set => SetPropertyValue<Finance.Intrastat.DeclarationsRepository.DeclarationFunction?>("DeclarationFunction", value); }
                [ODataProperty]
                public Boolean? DeclareStatisticalValues { get => GetPropertyValue<Boolean?>("DeclareStatisticalValues"); set => SetPropertyValue<Boolean?>("DeclareStatisticalValues", value); }
                [ODataProperty]
                public Finance.Intrastat.DeclarationsRepository.GoodsFlowDirection? GoodsFlowDirection { get => GetPropertyValue<Finance.Intrastat.DeclarationsRepository.GoodsFlowDirection?>("GoodsFlowDirection"); set => SetPropertyValue<Finance.Intrastat.DeclarationsRepository.GoodsFlowDirection?>("GoodsFlowDirection", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? PostalCode { get => GetPropertyValue<String?>("PostalCode"); set => SetPropertyValue<String?>("PostalCode", value); }
                [ODataProperty]
                public Finance.Intrastat.DeclarationsRepository.ReferenceMonth? ReferenceMonth { get => GetPropertyValue<Finance.Intrastat.DeclarationsRepository.ReferenceMonth?>("ReferenceMonth"); set => SetPropertyValue<Finance.Intrastat.DeclarationsRepository.ReferenceMonth?>("ReferenceMonth", value); }
                [ODataProperty]
                public Int16? ReferenceYear { get => GetPropertyValue<Int16?>("ReferenceYear"); set => SetPropertyValue<Int16?>("ReferenceYear", value); }
                [ODataProperty]
                public General.Contacts.Person? AuthorizedPerson { get => GetPropertyValue<General.Contacts.Person>("AuthorizedPerson"); set => SetPropertyValue<General.Contacts.Person>("AuthorizedPerson", value); }
                [ODataProperty]
                public General.Contacts.Company? ThirdDeclaringParty { get => GetPropertyValue<General.Contacts.Company>("ThirdDeclaringParty"); set => SetPropertyValue<General.Contacts.Company>("ThirdDeclaringParty", value); }
                [ODataProperty]
                public IEnumerable<Finance.Intrastat.DeclarationLine>? Lines { get => GetCollection<Finance.Intrastat.DeclarationLine>("Lines"); set => SetCollection<Finance.Intrastat.DeclarationLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Intrastat_DeclarationLines", TableName = "Its_Declaration_Lines")]
            public partial class DeclarationLine: EntityResource
            {
                public DeclarationLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Intrastat_DeclarationLines";
                public const string EntityTableName = "Its_Declaration_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Intrastat.DeliveryTerms? DeliveryTerms { get => GetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTerms"); set => SetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTerms", value); }
                [ODataProperty]
                public Amount? InvoicedValueAmountBase { get => GetPropertyValue<Amount?>("InvoicedValueAmountBase"); set => SetPropertyValue<Amount?>("InvoicedValueAmountBase", value); }
                [ODataProperty]
                public Finance.Intrastat.DeclarationLinesRepository.LineAction? LineAction { get => GetPropertyValue<Finance.Intrastat.DeclarationLinesRepository.LineAction?>("LineAction"); set => SetPropertyValue<Finance.Intrastat.DeclarationLinesRepository.LineAction?>("LineAction", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? NetMassKg { get => GetPropertyValue<Decimal?>("NetMassKg"); set => SetPropertyValue<Decimal?>("NetMassKg", value); }
                [ODataProperty]
                public Decimal? QuantitySupplementaryUnit { get => GetPropertyValue<Decimal?>("QuantitySupplementaryUnit"); set => SetPropertyValue<Decimal?>("QuantitySupplementaryUnit", value); }
                [ODataProperty]
                public Amount? StatisticalValueAmountBase { get => GetPropertyValue<Amount?>("StatisticalValueAmountBase"); set => SetPropertyValue<Amount?>("StatisticalValueAmountBase", value); }
                [ODataProperty]
                public Finance.Intrastat.TransactionNature? TransactionNature { get => GetPropertyValue<Finance.Intrastat.TransactionNature?>("TransactionNature"); set => SetPropertyValue<Finance.Intrastat.TransactionNature?>("TransactionNature", value); }
                [ODataProperty]
                public Finance.Intrastat.TransportMode? TransportMode { get => GetPropertyValue<Finance.Intrastat.TransportMode?>("TransportMode"); set => SetPropertyValue<Finance.Intrastat.TransportMode?>("TransportMode", value); }
                [ODataProperty]
                public General.Geography.AdministrativeRegion? AdministrativeRegion { get => GetPropertyValue<General.Geography.AdministrativeRegion>("AdministrativeRegion"); set => SetPropertyValue<General.Geography.AdministrativeRegion>("AdministrativeRegion", value); }
                [ODataProperty]
                public Finance.Intrastat.CommodityCode? IntrastatCommodityCode { get => GetPropertyValue<Finance.Intrastat.CommodityCode>("IntrastatCommodityCode"); set => SetPropertyValue<Finance.Intrastat.CommodityCode>("IntrastatCommodityCode", value); }
                [Owner]
                [ODataProperty]
                public Finance.Intrastat.Declaration? IntrastatDeclaration { get => GetPropertyValue<Finance.Intrastat.Declaration>("IntrastatDeclaration"); set => SetPropertyValue<Finance.Intrastat.Declaration>("IntrastatDeclaration", value); }
                [ODataProperty]
                public General.Geography.Country? OriginCountry { get => GetPropertyValue<General.Geography.Country>("OriginCountry"); set => SetPropertyValue<General.Geography.Country>("OriginCountry", value); }
                [ODataProperty]
                public General.Geography.Country? PartyCountry { get => GetPropertyValue<General.Geography.Country>("PartyCountry"); set => SetPropertyValue<General.Geography.Country>("PartyCountry", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public General.Geography.Country? TransportCountry { get => GetPropertyValue<General.Geography.Country>("TransportCountry"); set => SetPropertyValue<General.Geography.Country>("TransportCountry", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DeclarationLinesRepository
            {
                public enum LineAction
                {
                    New = 0,
                    EditedNew = 1,
                    EditedOld = 2,
                    Deleted = 3
                }
            }
            namespace DeclarationsRepository
            {
                public enum DeclarationFunction
                {
                    Regular = 0,
                    Corrective = 1
                }
                public enum GoodsFlowDirection
                {
                    Arrival = 0,
                    Dispatch = 1
                }
                public enum ReferenceMonth
                {
                    January = 1,
                    February = 2,
                    March = 3,
                    April = 4,
                    May = 5,
                    June = 6,
                    July = 7,
                    August = 8,
                    September = 9,
                    October = 10,
                    November = 11,
                    December = 12
                }
            }
            public enum DeliveryTerms
            {
                ExWorks = 0,
                FrancoCarrier = 1,
                FreeAlongsideShip = 2,
                FreeOnBoard = 3,
                CostAndFreightCF = 4,
                CostInsuranceAndFreight = 5,
                CarriagePaidTo = 6,
                CarriageAndInsurancePaidTo = 7,
                DeliveredAtPlace = 8,
                DeliveredAtTerminal = 9,
                DeliveredDutyPaid = 10,
                DeliveredAtPlaceUnloaded = 11
            }
            [Entity(EntitySet = "Finance_Intrastat_DocumentAmountTypeSettings", TableName = "Its_Document_Amount_Type_Settings")]
            public partial class DocumentAmountTypeSetting: EntityResource
            {
                public DocumentAmountTypeSetting(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Intrastat_DocumentAmountTypeSettings";
                public const string EntityTableName = "Its_Document_Amount_Type_Settings";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? AddToInvoicedValue { get => GetPropertyValue<Boolean?>("AddToInvoicedValue"); set => SetPropertyValue<Boolean?>("AddToInvoicedValue", value); }
                [ODataProperty]
                public Boolean? AddToStatisticalValue { get => GetPropertyValue<Boolean?>("AddToStatisticalValue"); set => SetPropertyValue<Boolean?>("AddToStatisticalValue", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentAmountType? DocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("DocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("DocumentAmountType", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            public enum TransactionNature
            {
                OutrightPurchaseOrSale = 0,
                SupplyForSale = 1,
                BarterTrade = 2,
                FinancialLeasing = 3,
                OtherTransactions = 4,
                ReturnStokilizing = 5,
                ReplacementForReturnedGoods = 6,
                ReplacementOfGoodsNotBeingReturned = 7,
                ReturnOrExchangeOfOtherGoods = 8,
                SpecificTransactions = 9,
                OperationsOnJointProjects = 10,
                TransactionsOfConstructionMaterialsAndEquipment = 11,
                OtherTransactionsLeasing = 12,
                OtherTransactionsOther = 13,
                DealsThatIncludePropertyTransfersWithoutFinancialCompensationOrCompensationInKind = 14,
                GoodsThatAreExpectedToBeReturnedToSender = 15,
                GoodsThatAreNotExpectedToBeReturnedToSender = 16,
                GoodsThatAreReturnedToSender = 17,
                GoodsThatAreNotReturnedToSender = 18
            }
            public enum TransportMode
            {
                Shipping = 0,
                RailwayTransport = 1,
                RoadTransport = 2,
                AirTransport = 3,
                Mail = 4,
                FixedTransportInstallations = 5,
                RiverTransport = 6,
                SelfPropelled = 7
            }
        }
        namespace Payments
        {
            [Entity(EntitySet = "Finance_Payments_BulkPaymentOrders", TableName = "Cash_Bulk_Payment_Orders")]
            public partial class BulkPaymentOrder: General.Document
            {
                public BulkPaymentOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Payments_BulkPaymentOrders";
                public new const string EntityTableName = "Cash_Bulk_Payment_Orders";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public IEnumerable<Finance.Payments.BulkPaymentOrderLine>? Lines { get => GetCollection<Finance.Payments.BulkPaymentOrderLine>("Lines"); set => SetCollection<Finance.Payments.BulkPaymentOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Payments_BulkPaymentOrderLines", TableName = "Cash_Bulk_Payment_Order_Lines")]
            public partial class BulkPaymentOrderLine: EntityResource
            {
                public BulkPaymentOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_BulkPaymentOrderLines";
                public const string EntityTableName = "Cash_Bulk_Payment_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Payments.BulkPaymentOrderLinesRepository.BillTo? BillTo { get => GetPropertyValue<Finance.Payments.BulkPaymentOrderLinesRepository.BillTo?>("BillTo"); set => SetPropertyValue<Finance.Payments.BulkPaymentOrderLinesRepository.BillTo?>("BillTo", value); }
                [ODataProperty]
                public Finance.Payments.BulkPaymentOrderLinesRepository.Direction? Direction { get => GetPropertyValue<Finance.Payments.BulkPaymentOrderLinesRepository.Direction?>("Direction"); set => SetPropertyValue<Finance.Payments.BulkPaymentOrderLinesRepository.Direction?>("Direction", value); }
                [ODataProperty]
                public DateTime? DueDate { get => GetPropertyValue<DateTime?>("DueDate"); set => SetPropertyValue<DateTime?>("DueDate", value); }
                [ODataProperty]
                public Int32? InstallmentNumber { get => GetPropertyValue<Int32?>("InstallmentNumber"); set => SetPropertyValue<Int32?>("InstallmentNumber", value); }
                [ODataProperty]
                public Amount? InvoiceAmount { get => GetPropertyValue<Amount?>("InvoiceAmount"); set => SetPropertyValue<Amount?>("InvoiceAmount", value); }
                [ODataProperty]
                public Boolean? IsAmountWithVAT { get => GetPropertyValue<Boolean?>("IsAmountWithVAT"); set => SetPropertyValue<Boolean?>("IsAmountWithVAT", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? RefDocumentDate { get => GetPropertyValue<DateTime?>("RefDocumentDate"); set => SetPropertyValue<DateTime?>("RefDocumentDate", value); }
                [ODataProperty]
                public String? RefDocumentNo { get => GetPropertyValue<String?>("RefDocumentNo"); set => SetPropertyValue<String?>("RefDocumentNo", value); }
                [ODataProperty]
                public DateTime? RefInvoiceApplyDate { get => GetPropertyValue<DateTime?>("RefInvoiceApplyDate"); set => SetPropertyValue<DateTime?>("RefInvoiceApplyDate", value); }
                [ODataProperty]
                public DateTime? RefInvoiceDocumentDate { get => GetPropertyValue<DateTime?>("RefInvoiceDocumentDate"); set => SetPropertyValue<DateTime?>("RefInvoiceDocumentDate", value); }
                [ODataProperty]
                public String? RefInvoiceDocumentNo { get => GetPropertyValue<String?>("RefInvoiceDocumentNo"); set => SetPropertyValue<String?>("RefInvoiceDocumentNo", value); }
                [ODataProperty]
                public Amount? TotalAmount { get => GetPropertyValue<Amount?>("TotalAmount"); set => SetPropertyValue<Amount?>("TotalAmount", value); }
                [Owner]
                [ODataProperty]
                public Finance.Payments.BulkPaymentOrder? BulkPaymentOrder { get => GetPropertyValue<Finance.Payments.BulkPaymentOrder>("BulkPaymentOrder"); set => SetPropertyValue<Finance.Payments.BulkPaymentOrder>("BulkPaymentOrder", value); }
                [ODataProperty]
                public General.Currency? InvoiceAmountCurrency { get => GetPropertyValue<General.Currency>("InvoiceAmountCurrency"); set => SetPropertyValue<General.Currency>("InvoiceAmountCurrency", value); }
                [ODataProperty]
                public General.Contacts.Party? LocationParty { get => GetPropertyValue<General.Contacts.Party>("LocationParty"); set => SetPropertyValue<General.Contacts.Party>("LocationParty", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public General.DocumentType? RefDocumentType { get => GetPropertyValue<General.DocumentType>("RefDocumentType"); set => SetPropertyValue<General.DocumentType>("RefDocumentType", value); }
                [ODataProperty]
                public General.DocumentType? RefInvoiceDocumentType { get => GetPropertyValue<General.DocumentType>("RefInvoiceDocumentType"); set => SetPropertyValue<General.DocumentType>("RefInvoiceDocumentType", value); }
                [ODataProperty]
                public General.Currency? TotalAmountCurrency { get => GetPropertyValue<General.Currency>("TotalAmountCurrency"); set => SetPropertyValue<General.Currency>("TotalAmountCurrency", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace BulkPaymentOrderLinesRepository
            {
                public enum BillTo
                {
                    Company = 0,
                    CompanyLocation = 1
                }
                public enum Direction
                {
                    Expense = 0,
                    Income = 1
                }
            }
            [Entity(EntitySet = "Finance_Payments_InvoiceReconciliations", TableName = "Cash_Invoice_Reconciliations")]
            public partial class InvoiceReconciliation: General.Document
            {
                public InvoiceReconciliation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Payments_InvoiceReconciliations";
                public new const string EntityTableName = "Cash_Invoice_Reconciliations";
                [ODataProperty]
                public General.Document? DefaultInvoiceDocument { get => GetPropertyValue<General.Document>("DefaultInvoiceDocument"); set => SetPropertyValue<General.Document>("DefaultInvoiceDocument", value); }
                [ODataProperty]
                public General.Document? DefaultPaymentTransactionDocument { get => GetPropertyValue<General.Document>("DefaultPaymentTransactionDocument"); set => SetPropertyValue<General.Document>("DefaultPaymentTransactionDocument", value); }
                [ODataProperty]
                public IEnumerable<Finance.Payments.InvoiceReconciliationLine>? Lines { get => GetCollection<Finance.Payments.InvoiceReconciliationLine>("Lines"); set => SetCollection<Finance.Payments.InvoiceReconciliationLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Payments_InvoiceReconciliationLines", TableName = "Cash_Invoice_Reconciliation_Lines")]
            public partial class InvoiceReconciliationLine: EntityResource
            {
                public InvoiceReconciliationLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_InvoiceReconciliationLines";
                public const string EntityTableName = "Cash_Invoice_Reconciliation_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? CoveredInvoiceAmount { get => GetPropertyValue<Decimal?>("CoveredInvoiceAmount"); set => SetPropertyValue<Decimal?>("CoveredInvoiceAmount", value); }
                [ODataProperty]
                public General.Document? InvoiceDocument { get => GetPropertyValue<General.Document>("InvoiceDocument"); set => SetPropertyValue<General.Document>("InvoiceDocument", value); }
                [Owner]
                [ODataProperty]
                public Finance.Payments.InvoiceReconciliation? InvoiceReconciliation { get => GetPropertyValue<Finance.Payments.InvoiceReconciliation>("InvoiceReconciliation"); set => SetPropertyValue<Finance.Payments.InvoiceReconciliation>("InvoiceReconciliation", value); }
                [ODataProperty]
                public General.Document? PaymentTransactionDocument { get => GetPropertyValue<General.Document>("PaymentTransactionDocument"); set => SetPropertyValue<General.Document>("PaymentTransactionDocument", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Payments_OrderBalances")]
            public partial class OrderBalance: EntityResource
            {
                public OrderBalance(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_OrderBalances";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Finance.Payments.PaymentOrdersRepository.Direction? Direction { get => GetPropertyValue<Finance.Payments.PaymentOrdersRepository.Direction?>("Direction"); set => SetPropertyValue<Finance.Payments.PaymentOrdersRepository.Direction?>("Direction", value); }
                [ODataProperty]
                public DateTime? DueDate { get => GetPropertyValue<DateTime?>("DueDate"); set => SetPropertyValue<DateTime?>("DueDate", value); }
                [ODataProperty]
                public DateTime? DueStartDate { get => GetPropertyValue<DateTime?>("DueStartDate"); set => SetPropertyValue<DateTime?>("DueStartDate", value); }
                [ODataProperty]
                public Boolean? IsInvoiced { get => GetPropertyValue<Boolean?>("IsInvoiced"); set => SetPropertyValue<Boolean?>("IsInvoiced", value); }
                [ODataProperty]
                public Amount? OrderAmount { get => GetPropertyValue<Amount?>("OrderAmount"); set => SetPropertyValue<Amount?>("OrderAmount", value); }
                [ODataProperty]
                public Amount? PaidAmount { get => GetPropertyValue<Amount?>("PaidAmount"); set => SetPropertyValue<Amount?>("PaidAmount", value); }
                [ODataProperty]
                public DateTime? RefDocumentDate { get => GetPropertyValue<DateTime?>("RefDocumentDate"); set => SetPropertyValue<DateTime?>("RefDocumentDate", value); }
                [ODataProperty]
                public String? RefDocumentNo { get => GetPropertyValue<String?>("RefDocumentNo"); set => SetPropertyValue<String?>("RefDocumentNo", value); }
                [ODataProperty]
                public DateTime? RefInvoiceDocumentDate { get => GetPropertyValue<DateTime?>("RefInvoiceDocumentDate"); set => SetPropertyValue<DateTime?>("RefInvoiceDocumentDate", value); }
                [ODataProperty]
                public String? RefInvoiceDocumentNo { get => GetPropertyValue<String?>("RefInvoiceDocumentNo"); set => SetPropertyValue<String?>("RefInvoiceDocumentNo", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.Party? LocationParty { get => GetPropertyValue<General.Contacts.Party>("LocationParty"); set => SetPropertyValue<General.Contacts.Party>("LocationParty", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public Finance.Payments.PaymentOrder? PaymentOrder { get => GetPropertyValue<Finance.Payments.PaymentOrder>("PaymentOrder"); set => SetPropertyValue<Finance.Payments.PaymentOrder>("PaymentOrder", value); }
                [ODataProperty]
                public General.Document? RefDocument { get => GetPropertyValue<General.Document>("RefDocument"); set => SetPropertyValue<General.Document>("RefDocument", value); }
                [ODataProperty]
                public General.DocumentType? RefDocumentType { get => GetPropertyValue<General.DocumentType>("RefDocumentType"); set => SetPropertyValue<General.DocumentType>("RefDocumentType", value); }
                [ODataProperty]
                public General.Document? RefInvoiceDocument { get => GetPropertyValue<General.Document>("RefInvoiceDocument"); set => SetPropertyValue<General.Document>("RefInvoiceDocument", value); }
                [ODataProperty]
                public General.DocumentType? RefInvoiceDocumentType { get => GetPropertyValue<General.DocumentType>("RefInvoiceDocumentType"); set => SetPropertyValue<General.DocumentType>("RefInvoiceDocumentType", value); }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentAccounts", TableName = "Cash_Payment_Accounts")]
            public partial class PaymentAccount: EntityResource
            {
                public PaymentAccount(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_PaymentAccounts";
                public const string EntityTableName = "Cash_Payment_Accounts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                [ODataProperty]
                public General.Contacts.PartyBankAccount? BankAccount { get => GetPropertyValue<General.Contacts.PartyBankAccount>("BankAccount"); set => SetPropertyValue<General.Contacts.PartyBankAccount>("BankAccount", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentOrders", TableName = "Cash_Payment_Orders")]
            public partial class PaymentOrder: General.Document
            {
                public PaymentOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Payments_PaymentOrders";
                public new const string EntityTableName = "Cash_Payment_Orders";
                [ODataProperty]
                public Boolean? AllowCloseNotPaid { get => GetPropertyValue<Boolean?>("AllowCloseNotPaid"); set => SetPropertyValue<Boolean?>("AllowCloseNotPaid", value); }
                [ODataProperty]
                public Finance.Payments.PaymentOrdersRepository.BillTo? BillTo { get => GetPropertyValue<Finance.Payments.PaymentOrdersRepository.BillTo?>("BillTo"); set => SetPropertyValue<Finance.Payments.PaymentOrdersRepository.BillTo?>("BillTo", value); }
                [ODataProperty]
                public Finance.Payments.PaymentOrdersRepository.Direction? Direction { get => GetPropertyValue<Finance.Payments.PaymentOrdersRepository.Direction?>("Direction"); set => SetPropertyValue<Finance.Payments.PaymentOrdersRepository.Direction?>("Direction", value); }
                [ODataProperty]
                public DateTime? DueDate { get => GetPropertyValue<DateTime?>("DueDate"); set => SetPropertyValue<DateTime?>("DueDate", value); }
                [ODataProperty]
                public DateTime? DueStartDate { get => GetPropertyValue<DateTime?>("DueStartDate"); set => SetPropertyValue<DateTime?>("DueStartDate", value); }
                [ODataProperty]
                public Int32? InstallmentNumber { get => GetPropertyValue<Int32?>("InstallmentNumber"); set => SetPropertyValue<Int32?>("InstallmentNumber", value); }
                [ODataProperty]
                public Amount? InvoiceAmount { get => GetPropertyValue<Amount?>("InvoiceAmount"); set => SetPropertyValue<Amount?>("InvoiceAmount", value); }
                [ODataProperty]
                public Boolean? IsAmountWithVAT { get => GetPropertyValue<Boolean?>("IsAmountWithVAT"); set => SetPropertyValue<Boolean?>("IsAmountWithVAT", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? RefDocumentDate { get => GetPropertyValue<DateTime?>("RefDocumentDate"); set => SetPropertyValue<DateTime?>("RefDocumentDate", value); }
                [ODataProperty]
                public String? RefDocumentNo { get => GetPropertyValue<String?>("RefDocumentNo"); set => SetPropertyValue<String?>("RefDocumentNo", value); }
                [ODataProperty]
                public DateTime? RefInvoiceApplyDate { get => GetPropertyValue<DateTime?>("RefInvoiceApplyDate"); set => SetPropertyValue<DateTime?>("RefInvoiceApplyDate", value); }
                [ODataProperty]
                public DateTime? RefInvoiceDocumentDate { get => GetPropertyValue<DateTime?>("RefInvoiceDocumentDate"); set => SetPropertyValue<DateTime?>("RefInvoiceDocumentDate", value); }
                [ODataProperty]
                public String? RefInvoiceDocumentNo { get => GetPropertyValue<String?>("RefInvoiceDocumentNo"); set => SetPropertyValue<String?>("RefInvoiceDocumentNo", value); }
                [ODataProperty]
                public Amount? TotalAmount { get => GetPropertyValue<Amount?>("TotalAmount"); set => SetPropertyValue<Amount?>("TotalAmount", value); }
                [ODataProperty]
                public Crm.Pos.Device? FiscalPrinterPosDevice { get => GetPropertyValue<Crm.Pos.Device>("FiscalPrinterPosDevice"); set => SetPropertyValue<Crm.Pos.Device>("FiscalPrinterPosDevice", value); }
                [ODataProperty]
                public General.Currency? InvoiceAmountCurrency { get => GetPropertyValue<General.Currency>("InvoiceAmountCurrency"); set => SetPropertyValue<General.Currency>("InvoiceAmountCurrency", value); }
                [ODataProperty]
                public General.Contacts.Party? LocationParty { get => GetPropertyValue<General.Contacts.Party>("LocationParty"); set => SetPropertyValue<General.Contacts.Party>("LocationParty", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public General.Document? RefDocument { get => GetPropertyValue<General.Document>("RefDocument"); set => SetPropertyValue<General.Document>("RefDocument", value); }
                [ODataProperty]
                public General.DocumentType? RefDocumentType { get => GetPropertyValue<General.DocumentType>("RefDocumentType"); set => SetPropertyValue<General.DocumentType>("RefDocumentType", value); }
                [ODataProperty]
                public General.Document? RefInvoiceDocument { get => GetPropertyValue<General.Document>("RefInvoiceDocument"); set => SetPropertyValue<General.Document>("RefInvoiceDocument", value); }
                [ODataProperty]
                public General.DocumentType? RefInvoiceDocumentType { get => GetPropertyValue<General.DocumentType>("RefInvoiceDocumentType"); set => SetPropertyValue<General.DocumentType>("RefInvoiceDocumentType", value); }
                [ODataProperty]
                public General.Currency? TotalAmountCurrency { get => GetPropertyValue<General.Currency>("TotalAmountCurrency"); set => SetPropertyValue<General.Currency>("TotalAmountCurrency", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            namespace PaymentOrdersRepository
            {
                public enum BillTo
                {
                    Company = 0,
                    CompanyLocation = 1
                }
                public enum Direction
                {
                    Expense = 0,
                    Income = 1
                }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentReasons", TableName = "Cash_Payment_Reasons")]
            public partial class PaymentReason: EntityResource
            {
                public PaymentReason(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_PaymentReasons";
                public const string EntityTableName = "Cash_Payment_Reasons";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Boolean? IsSystem { get => GetPropertyValue<Boolean?>("IsSystem"); set => SetPropertyValue<Boolean?>("IsSystem", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentSlips", TableName = "Cash_Payment_Slips")]
            public partial class PaymentSlip: General.Document
            {
                public PaymentSlip(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Payments_PaymentSlips";
                public new const string EntityTableName = "Cash_Payment_Slips";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? PaymentSlipNo { get => GetPropertyValue<String?>("PaymentSlipNo"); set => SetPropertyValue<String?>("PaymentSlipNo", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public IEnumerable<Finance.Payments.PaymentSlipAmount>? Amounts { get => GetCollection<Finance.Payments.PaymentSlipAmount>("Amounts"); set => SetCollection<Finance.Payments.PaymentSlipAmount>("Amounts", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentSlipAmounts", TableName = "Cash_Payment_Slip_Amounts")]
            public partial class PaymentSlipAmount: EntityResource
            {
                public PaymentSlipAmount(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_PaymentSlipAmounts";
                public const string EntityTableName = "Cash_Payment_Slip_Amounts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Finance.Payments.PaymentOrdersRepository.Direction? Direction { get => GetPropertyValue<Finance.Payments.PaymentOrdersRepository.Direction?>("Direction"); set => SetPropertyValue<Finance.Payments.PaymentOrdersRepository.Direction?>("Direction", value); }
                [ODataProperty]
                public Boolean? IsPartyPayment { get => GetPropertyValue<Boolean?>("IsPartyPayment"); set => SetPropertyValue<Boolean?>("IsPartyPayment", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public MultilanguageString? PartyName { get => GetPropertyValue<MultilanguageString?>("PartyName"); set => SetPropertyValue<MultilanguageString?>("PartyName", value); }
                [ODataProperty]
                public DateTime? PaymentDate { get => GetPropertyValue<DateTime?>("PaymentDate"); set => SetPropertyValue<DateTime?>("PaymentDate", value); }
                [ODataProperty]
                public Amount? TotalAmount { get => GetPropertyValue<Amount?>("TotalAmount"); set => SetPropertyValue<Amount?>("TotalAmount", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public Finance.Payments.PaymentReason? PaymentReason { get => GetPropertyValue<Finance.Payments.PaymentReason>("PaymentReason"); set => SetPropertyValue<Finance.Payments.PaymentReason>("PaymentReason", value); }
                [Owner]
                [ODataProperty]
                public Finance.Payments.PaymentSlip? PaymentSlip { get => GetPropertyValue<Finance.Payments.PaymentSlip>("PaymentSlip"); set => SetPropertyValue<Finance.Payments.PaymentSlip>("PaymentSlip", value); }
                [ODataProperty]
                public IEnumerable<Finance.Payments.PaymentSlipLine>? PaymentSlipLines { get => GetCollection<Finance.Payments.PaymentSlipLine>("PaymentSlipLines"); set => SetCollection<Finance.Payments.PaymentSlipLine>("PaymentSlipLines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentSlipLines", TableName = "Cash_Payment_Slip_Lines")]
            public partial class PaymentSlipLine: EntityResource
            {
                public PaymentSlipLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_PaymentSlipLines";
                public const string EntityTableName = "Cash_Payment_Slip_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? Amount { get => GetPropertyValue<Amount?>("Amount"); set => SetPropertyValue<Amount?>("Amount", value); }
                [ODataProperty]
                public Amount? CoveredOrderAmount { get => GetPropertyValue<Amount?>("CoveredOrderAmount"); set => SetPropertyValue<Amount?>("CoveredOrderAmount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentOrder? PaymentOrder { get => GetPropertyValue<Finance.Payments.PaymentOrder>("PaymentOrder"); set => SetPropertyValue<Finance.Payments.PaymentOrder>("PaymentOrder", value); }
                [Owner]
                [ODataProperty]
                public Finance.Payments.PaymentSlipAmount? PaymentSlipAmount { get => GetPropertyValue<Finance.Payments.PaymentSlipAmount>("PaymentSlipAmount"); set => SetPropertyValue<Finance.Payments.PaymentSlipAmount>("PaymentSlipAmount", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentSlipPaymentTransactionsTemplates", TableName = "Cash_Payment_Slip_Payment_Transactions_Templates")]
            public partial class PaymentSlipPaymentTransactionsTemplate: EntityResource
            {
                public PaymentSlipPaymentTransactionsTemplate(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_PaymentSlipPaymentTransactionsTemplates";
                public const string EntityTableName = "Cash_Payment_Slip_Payment_Transactions_Templates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? CreateExpensePayments { get => GetPropertyValue<Boolean?>("CreateExpensePayments"); set => SetPropertyValue<Boolean?>("CreateExpensePayments", value); }
                [ODataProperty]
                public Boolean? CreateIncomePayments { get => GetPropertyValue<Boolean?>("CreateIncomePayments"); set => SetPropertyValue<Boolean?>("CreateIncomePayments", value); }
                [Owner]
                [ODataProperty]
                public Systems.Workflow.Route? Route { get => GetPropertyValue<Systems.Workflow.Route>("Route"); set => SetPropertyValue<Systems.Workflow.Route>("Route", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentTransactions", TableName = "Cash_Payment_Transactions")]
            public partial class PaymentTransaction: General.Document
            {
                public PaymentTransaction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Payments_PaymentTransactions";
                public new const string EntityTableName = "Cash_Payment_Transactions";
                [ODataProperty]
                public Finance.Payments.PaymentOrdersRepository.Direction? Direction { get => GetPropertyValue<Finance.Payments.PaymentOrdersRepository.Direction?>("Direction"); set => SetPropertyValue<Finance.Payments.PaymentOrdersRepository.Direction?>("Direction", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? PaymentSlipNo { get => GetPropertyValue<String?>("PaymentSlipNo"); set => SetPropertyValue<String?>("PaymentSlipNo", value); }
                [ODataProperty]
                public Boolean? RequiresAllocation { get => GetPropertyValue<Boolean?>("RequiresAllocation"); set => SetPropertyValue<Boolean?>("RequiresAllocation", value); }
                [ODataProperty]
                public Finance.Payments.PaymentTransactionsRepository.ReversalReason? ReversalReason { get => GetPropertyValue<Finance.Payments.PaymentTransactionsRepository.ReversalReason?>("ReversalReason"); set => SetPropertyValue<Finance.Payments.PaymentTransactionsRepository.ReversalReason?>("ReversalReason", value); }
                [ODataProperty]
                public Amount? TotalAmount { get => GetPropertyValue<Amount?>("TotalAmount"); set => SetPropertyValue<Amount?>("TotalAmount", value); }
                [ODataProperty]
                public Crm.Pos.Device? FiscalPrinterPosDevice { get => GetPropertyValue<Crm.Pos.Device>("FiscalPrinterPosDevice"); set => SetPropertyValue<Crm.Pos.Device>("FiscalPrinterPosDevice", value); }
                [ODataProperty]
                public Finance.Payments.PaymentTransaction? OriginalPaymentTransaction { get => GetPropertyValue<Finance.Payments.PaymentTransaction>("OriginalPaymentTransaction"); set => SetPropertyValue<Finance.Payments.PaymentTransaction>("OriginalPaymentTransaction", value); }
                [ODataProperty]
                public Finance.Payments.PaymentSlipAmount? ParentPaymentSlipAmount { get => GetPropertyValue<Finance.Payments.PaymentSlipAmount>("ParentPaymentSlipAmount"); set => SetPropertyValue<Finance.Payments.PaymentSlipAmount>("ParentPaymentSlipAmount", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentReason? PaymentReason { get => GetPropertyValue<Finance.Payments.PaymentReason>("PaymentReason"); set => SetPropertyValue<Finance.Payments.PaymentReason>("PaymentReason", value); }
                [ODataProperty]
                public Finance.Payments.PaymentSlip? PaymentSlip { get => GetPropertyValue<Finance.Payments.PaymentSlip>("PaymentSlip"); set => SetPropertyValue<Finance.Payments.PaymentSlip>("PaymentSlip", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public Crm.Pos.Location? PosLocation { get => GetPropertyValue<Crm.Pos.Location>("PosLocation"); set => SetPropertyValue<Crm.Pos.Location>("PosLocation", value); }
                [ODataProperty]
                public Crm.Pos.Operator? PosOperator { get => GetPropertyValue<Crm.Pos.Operator>("PosOperator"); set => SetPropertyValue<Crm.Pos.Operator>("PosOperator", value); }
                [ODataProperty]
                public General.Currency? TotalAmountCurrency { get => GetPropertyValue<General.Currency>("TotalAmountCurrency"); set => SetPropertyValue<General.Currency>("TotalAmountCurrency", value); }
                [ODataProperty]
                public IEnumerable<Finance.Payments.PaymentTransactionLine>? Lines { get => GetCollection<Finance.Payments.PaymentTransactionLine>("Lines"); set => SetCollection<Finance.Payments.PaymentTransactionLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentTransactionLines", TableName = "Cash_Payment_Transaction_Lines")]
            public partial class PaymentTransactionLine: EntityResource
            {
                public PaymentTransactionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_PaymentTransactionLines";
                public const string EntityTableName = "Cash_Payment_Transaction_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? AllowOverpayment { get => GetPropertyValue<Boolean?>("AllowOverpayment"); set => SetPropertyValue<Boolean?>("AllowOverpayment", value); }
                [ODataProperty]
                public Amount? Amount { get => GetPropertyValue<Amount?>("Amount"); set => SetPropertyValue<Amount?>("Amount", value); }
                [ODataProperty]
                public Amount? CoveredOrderAmount { get => GetPropertyValue<Amount?>("CoveredOrderAmount"); set => SetPropertyValue<Amount?>("CoveredOrderAmount", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Finance.Payments.PaymentOrder? PaymentOrder { get => GetPropertyValue<Finance.Payments.PaymentOrder>("PaymentOrder"); set => SetPropertyValue<Finance.Payments.PaymentOrder>("PaymentOrder", value); }
                [Owner]
                [ODataProperty]
                public Finance.Payments.PaymentTransaction? PaymentTransaction { get => GetPropertyValue<Finance.Payments.PaymentTransaction>("PaymentTransaction"); set => SetPropertyValue<Finance.Payments.PaymentTransaction>("PaymentTransaction", value); }
                [ODataProperty]
                public Finance.Payments.PaymentTransaction? Document { get => GetPropertyValue<Finance.Payments.PaymentTransaction>("Document"); set => SetPropertyValue<Finance.Payments.PaymentTransaction>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace PaymentTransactionsRepository
            {
                public enum ReversalReason
                {
                    OperatorError = 0,
                    TaxBaseReduction = 1,
                    Refund = 2
                }
            }
            [Entity(EntitySet = "Finance_Payments_PaymentTypes", TableName = "Cash_Payment_Types")]
            public partial class PaymentType: EntityResource
            {
                public PaymentType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Payments_PaymentTypes";
                public const string EntityTableName = "Cash_Payment_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Finance.Payments.PaymentTypesRepository.SystemType? SystemType { get => GetPropertyValue<Finance.Payments.PaymentTypesRepository.SystemType?>("SystemType"); set => SetPropertyValue<Finance.Payments.PaymentTypesRepository.SystemType?>("SystemType", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? DefaultPaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("DefaultPaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("DefaultPaymentAccount", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace PaymentTypesRepository
            {
                public enum SystemType
                {
                    Cash = 0,
                    ByCard = 1,
                    BankTransfer = 2,
                    Coupons = 3,
                    Check = 4,
                    UserDefined1 = 5,
                    UserDefined2 = 6,
                    Vouchers = 7,
                    Packaging = 8,
                    InternalUsage = 9,
                    Damage = 10,
                    Other = 11
                }
            }
            [Entity(EntitySet = "Finance_Payments_Transfers", TableName = "Cash_Transfers")]
            public partial class Transfer: General.Document
            {
                public Transfer(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Payments_Transfers";
                public new const string EntityTableName = "Cash_Transfers";
                [ODataProperty]
                public Amount? DestinationAmount { get => GetPropertyValue<Amount?>("DestinationAmount"); set => SetPropertyValue<Amount?>("DestinationAmount", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public Amount? SourceAmount { get => GetPropertyValue<Amount?>("SourceAmount"); set => SetPropertyValue<Amount?>("SourceAmount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? DestinationPaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("DestinationPaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("DestinationPaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? SourcePaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("SourcePaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("SourcePaymentAccount", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
        }
        namespace Vat
        {
            [Entity(EntitySet = "Finance_Vat_BGVATDeclarations", TableName = "Nat_BG_VAT_Declarations")]
            public partial class BGVATDeclaration: General.Document
            {
                public BGVATDeclaration(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Vat_BGVATDeclarations";
                public new const string EntityTableName = "Nat_BG_VAT_Declarations";
                [ODataProperty]
                public Decimal? CoefficientVATLArticle73 { get => GetPropertyValue<Decimal?>("CoefficientVATLArticle73"); set => SetPropertyValue<Decimal?>("CoefficientVATLArticle73", value); }
                [ODataProperty]
                public Amount? DeductedVATAmountArticle92Paragraph1 { get => GetPropertyValue<Amount?>("DeductedVATAmountArticle92Paragraph1"); set => SetPropertyValue<Amount?>("DeductedVATAmountArticle92Paragraph1", value); }
                [ODataProperty]
                public Amount? DepositedVATAmount { get => GetPropertyValue<Amount?>("DepositedVATAmount"); set => SetPropertyValue<Amount?>("DepositedVATAmount", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public Amount? VATAmountToRecoupArticle92Paragraph1 { get => GetPropertyValue<Amount?>("VATAmountToRecoupArticle92Paragraph1"); set => SetPropertyValue<Amount?>("VATAmountToRecoupArticle92Paragraph1", value); }
                [ODataProperty]
                public Amount? VATAmountToRecoupArticle92Paragraph3 { get => GetPropertyValue<Amount?>("VATAmountToRecoupArticle92Paragraph3"); set => SetPropertyValue<Amount?>("VATAmountToRecoupArticle92Paragraph3", value); }
                [ODataProperty]
                public Amount? VATAmountToRecoupArticle92Paragraph4 { get => GetPropertyValue<Amount?>("VATAmountToRecoupArticle92Paragraph4"); set => SetPropertyValue<Amount?>("VATAmountToRecoupArticle92Paragraph4", value); }
                [ODataProperty]
                public String? VATDeclarationRepresentingPersonPosition { get => GetPropertyValue<String?>("VATDeclarationRepresentingPersonPosition"); set => SetPropertyValue<String?>("VATDeclarationRepresentingPersonPosition", value); }
                [ODataProperty]
                public DateTime? VATPeriodEnd { get => GetPropertyValue<DateTime?>("VATPeriodEnd"); set => SetPropertyValue<DateTime?>("VATPeriodEnd", value); }
                [ODataProperty]
                public DateTime? VATPeriodStart { get => GetPropertyValue<DateTime?>("VATPeriodStart"); set => SetPropertyValue<DateTime?>("VATPeriodStart", value); }
                [ODataProperty]
                public Finance.Vat.BGVATDeclaringPerson? DeclaringPerson { get => GetPropertyValue<Finance.Vat.BGVATDeclaringPerson>("DeclaringPerson"); set => SetPropertyValue<Finance.Vat.BGVATDeclaringPerson>("DeclaringPerson", value); }
                [ODataProperty]
                public General.Contacts.Person? VATDeclarationRepresentingPerson { get => GetPropertyValue<General.Contacts.Person>("VATDeclarationRepresentingPerson"); set => SetPropertyValue<General.Contacts.Person>("VATDeclarationRepresentingPerson", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Vat_BGVATDeclaringPersons", TableName = "Nat_BG_VAT_Declaring_Persons")]
            public partial class BGVATDeclaringPerson: EntityResource
            {
                public BGVATDeclaringPerson(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Vat_BGVATDeclaringPersons";
                public const string EntityTableName = "Nat_BG_VAT_Declaring_Persons";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Vat.BGVATDeclaringPersonsRepository.DeclarerType? DeclarerType { get => GetPropertyValue<Finance.Vat.BGVATDeclaringPersonsRepository.DeclarerType?>("DeclarerType"); set => SetPropertyValue<Finance.Vat.BGVATDeclaringPersonsRepository.DeclarerType?>("DeclarerType", value); }
                [ODataProperty]
                public String? DeclaringPersonAddress { get => GetPropertyValue<String?>("DeclaringPersonAddress"); set => SetPropertyValue<String?>("DeclaringPersonAddress", value); }
                [ODataProperty]
                public String? DeclaringPersonCity { get => GetPropertyValue<String?>("DeclaringPersonCity"); set => SetPropertyValue<String?>("DeclaringPersonCity", value); }
                [ODataProperty]
                public String? DeclaringPersonPosition { get => GetPropertyValue<String?>("DeclaringPersonPosition"); set => SetPropertyValue<String?>("DeclaringPersonPosition", value); }
                [ODataProperty]
                public String? DeclaringPersonPostcode { get => GetPropertyValue<String?>("DeclaringPersonPostcode"); set => SetPropertyValue<String?>("DeclaringPersonPostcode", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [Owner]
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace BGVATDeclaringPersonsRepository
            {
                public enum DeclarerType
                {
                    Attorney = 0,
                    Representative = 1
                }
            }
            [Entity(EntitySet = "Finance_Vat_BGVATDocumentTypeVATCodes", TableName = "Nat_BG_VAT_Document_Type_VAT_Codes")]
            public partial class BGVATDocumentTypeVATCode: EntityResource
            {
                public BGVATDocumentTypeVATCode(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Vat_BGVATDocumentTypeVATCodes";
                public const string EntityTableName = "Nat_BG_VAT_Document_Type_VAT_Codes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Vat.BGVATDocumentTypeVATCodesRepository.CashReportingVATCode? CashReportingVATCode { get => GetPropertyValue<Finance.Vat.BGVATDocumentTypeVATCodesRepository.CashReportingVATCode?>("CashReportingVATCode"); set => SetPropertyValue<Finance.Vat.BGVATDocumentTypeVATCodesRepository.CashReportingVATCode?>("CashReportingVATCode", value); }
                [ODataProperty]
                public Finance.Vat.BGVATDocumentTypeVATCodesRepository.VATCode? VATCode { get => GetPropertyValue<Finance.Vat.BGVATDocumentTypeVATCodesRepository.VATCode?>("VATCode"); set => SetPropertyValue<Finance.Vat.BGVATDocumentTypeVATCodesRepository.VATCode?>("VATCode", value); }
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace BGVATDocumentTypeVATCodesRepository
            {
                public enum CashReportingVATCode
                {
                    Invoice = 0,
                    DebitNote = 1,
                    CreditNote = 2,
                    CallOffStockRegisterTheGoodsAreSentOrTransportedFromTheCountryToAnotherEUCountry = 3,
                    CallOffStockRegisterTheGoodsAreReceivedInTheCountry = 4,
                    CustomHouseEntry = 5,
                    Protocol = 6,
                    InvoiceCashReporting = 7,
                    DebitNoteCashReporting = 8,
                    CreditNoteCashReporting = 9,
                    ProtocolForChargingTheRequiredVATForFuelSuppliesForWhichCompensationHasBeenGranted = 10,
                    SalesReport = 11,
                    SpecialTaxOrderSalesReport = 12,
                    ReportOnSalesMadeWithFuelCompensationProvided = 13,
                    ReportOnTheSalesOfBread = 14,
                    ReportOnTheSalesOfFlour = 15,
                    RecordForRecoverableTaxByArticle151vAl3OfBGVATLaw = 16,
                    RecordForTaxCreditByArticle151gAl3OfBGVATLawOrReportByArt104zhAl14 = 17,
                    RecordForRecoverableTaxByArticle151vAl7OfBGVATLawWithNoCashReportingReceiver = 18,
                    RecordForRecoverableTaxByArticle151vAl7OfBGVATLawWithCashReportingReceiver = 19
                }
                public enum VATCode
                {
                    Invoice = 0,
                    DebitNote = 1,
                    CreditNote = 2,
                    CallOffStockRegisterTheGoodsAreSentOrTransportedFromTheCountryToAnotherEUCountry = 3,
                    CallOffStockRegisterTheGoodsAreReceivedInTheCountry = 4,
                    CustomHouseEntry = 5,
                    Protocol = 6,
                    InvoiceCashReporting = 7,
                    DebitNoteCashReporting = 8,
                    CreditNoteCashReporting = 9,
                    ProtocolForChargingTheRequiredVATForFuelSuppliesForWhichCompensationHasBeenGranted = 10,
                    SalesReport = 11,
                    SpecialTaxOrderSalesReport = 12,
                    ReportOnSalesMadeWithFuelCompensationProvided = 13,
                    ReportOnTheSalesOfBread = 14,
                    ReportOnTheSalesOfFlour = 15,
                    RecordForRecoverableTaxByArticle151vAl3OfBGVATLaw = 16,
                    RecordForTaxCreditByArticle151gAl3OfBGVATLawOrReportByArt104zhAl14 = 17,
                    RecordForRecoverableTaxByArticle151vAl7OfBGVATLawWithNoCashReportingReceiver = 18,
                    RecordForRecoverableTaxByArticle151vAl7OfBGVATLawWithCashReportingReceiver = 19
                }
            }
            [Entity(EntitySet = "Finance_Vat_BoxTypes", TableName = "VAT_Box_Types")]
            public partial class BoxType: EntityResource
            {
                public BoxType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Vat_BoxTypes";
                public const string EntityTableName = "VAT_Box_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Vat.BoxTypesRepository.CalculationType? CalculationType { get => GetPropertyValue<Finance.Vat.BoxTypesRepository.CalculationType?>("CalculationType"); set => SetPropertyValue<Finance.Vat.BoxTypesRepository.CalculationType?>("CalculationType", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Systems.Bpm.CalculatedAttribute? CalculatedAttribute { get => GetPropertyValue<Systems.Bpm.CalculatedAttribute>("CalculatedAttribute"); set => SetPropertyValue<Systems.Bpm.CalculatedAttribute>("CalculatedAttribute", value); }
                [ODataProperty]
                public General.Geography.Country? Country { get => GetPropertyValue<General.Geography.Country>("Country"); set => SetPropertyValue<General.Geography.Country>("Country", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Vat_BoxTypeDealTypes", TableName = "VAT_Box_Type_Deal_Types")]
            public partial class BoxTypeDealType: EntityResource
            {
                public BoxTypeDealType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Vat_BoxTypeDealTypes";
                public const string EntityTableName = "VAT_Box_Type_Deal_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Vat.BoxTypeDealTypesRepository.AmountCategory? AmountCategory { get => GetPropertyValue<Finance.Vat.BoxTypeDealTypesRepository.AmountCategory?>("AmountCategory"); set => SetPropertyValue<Finance.Vat.BoxTypeDealTypesRepository.AmountCategory?>("AmountCategory", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Finance.Vat.BoxType? BoxType { get => GetPropertyValue<Finance.Vat.BoxType>("BoxType"); set => SetPropertyValue<Finance.Vat.BoxType>("BoxType", value); }
                [ODataProperty]
                public Finance.Vat.DealType? DealType { get => GetPropertyValue<Finance.Vat.DealType>("DealType"); set => SetPropertyValue<Finance.Vat.DealType>("DealType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace BoxTypeDealTypesRepository
            {
                public enum AmountCategory
                {
                    VAT = 0,
                    BASE = 1,
                    TOTAL = 2
                }
            }
            namespace BoxTypesRepository
            {
                public enum CalculationType
                {
                    DealTypes = 0,
                    CalculatedAttribute = 1
                }
            }
            [Entity(EntitySet = "Finance_Vat_DealTypes", TableName = "VAT_Deal_Types")]
            public partial class DealType: EntityResource
            {
                public DealType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Vat_DealTypes";
                public const string EntityTableName = "VAT_Deal_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Finance.Vat.DealTypesRepository.EntryType? EntryType { get => GetPropertyValue<Finance.Vat.DealTypesRepository.EntryType?>("EntryType"); set => SetPropertyValue<Finance.Vat.DealTypesRepository.EntryType?>("EntryType", value); }
                [ODataProperty]
                public Boolean? IsSystem { get => GetPropertyValue<Boolean?>("IsSystem"); set => SetPropertyValue<Boolean?>("IsSystem", value); }
                [ODataProperty]
                public Finance.Vat.DealTypesRepository.TaxCode? TaxCode { get => GetPropertyValue<Finance.Vat.DealTypesRepository.TaxCode?>("TaxCode"); set => SetPropertyValue<Finance.Vat.DealTypesRepository.TaxCode?>("TaxCode", value); }
                [ODataProperty]
                public General.Geography.Country? Country { get => GetPropertyValue<General.Geography.Country>("Country"); set => SetPropertyValue<General.Geography.Country>("Country", value); }
                [ODataProperty]
                public IEnumerable<Finance.Vat.DealTypeDocumentAmount>? DocumentAmounts { get => GetCollection<Finance.Vat.DealTypeDocumentAmount>("DocumentAmounts"); set => SetCollection<Finance.Vat.DealTypeDocumentAmount>("DocumentAmounts", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Finance_Vat_DealTypeDocumentAmounts", TableName = "VAT_Deal_Type_Document_Amounts")]
            public partial class DealTypeDocumentAmount: EntityResource
            {
                public DealTypeDocumentAmount(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Vat_DealTypeDocumentAmounts";
                public const string EntityTableName = "VAT_Deal_Type_Document_Amounts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? LinePercent { get => GetPropertyValue<Decimal?>("LinePercent"); set => SetPropertyValue<Decimal?>("LinePercent", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public Finance.Vat.DealType? DealType { get => GetPropertyValue<Finance.Vat.DealType>("DealType"); set => SetPropertyValue<Finance.Vat.DealType>("DealType", value); }
                [ODataProperty]
                public General.DocumentAmountType? DocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("DocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("DocumentAmountType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DealTypesRepository
            {
                public enum EntryType
                {
                    Purchases = 0,
                    Sales = 1
                }
                public enum TaxCode
                {
                    StandardRate = 0,
                    ReducedRate = 1,
                    SuperReducedRates = 2,
                    IntermediaryParkingRates = 3,
                    TaxExempt = 4,
                    NonSubjectToTax = 5
                }
            }
            [Entity(EntitySet = "Finance_Vat_Declarations", TableName = "VAT_Declarations")]
            public partial class Declaration: General.Document
            {
                public Declaration(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Vat_Declarations";
                public new const string EntityTableName = "VAT_Declarations";
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public DateTime? ToDate { get => GetPropertyValue<DateTime?>("ToDate"); set => SetPropertyValue<DateTime?>("ToDate", value); }
                [ODataProperty]
                public General.Contacts.Person? ReportingPerson { get => GetPropertyValue<General.Contacts.Person>("ReportingPerson"); set => SetPropertyValue<General.Contacts.Person>("ReportingPerson", value); }
                [ODataProperty]
                public IEnumerable<Finance.Vat.DeclarationLine>? Lines { get => GetCollection<Finance.Vat.DeclarationLine>("Lines"); set => SetCollection<Finance.Vat.DeclarationLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Finance_Vat_DeclarationAmountDetails")]
            public partial class DeclarationAmountDetail: EntityResource
            {
                public DeclarationAmountDetail(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Vat_DeclarationAmountDetails";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Decimal? Amount { get => GetPropertyValue<Decimal?>("Amount"); set => SetPropertyValue<Decimal?>("Amount", value); }
                [ODataProperty]
                public Finance.Vat.BoxType? Box { get => GetPropertyValue<Finance.Vat.BoxType>("Box"); set => SetPropertyValue<Finance.Vat.BoxType>("Box", value); }
                [ODataProperty]
                public Finance.Vat.Declaration? Declaration { get => GetPropertyValue<Finance.Vat.Declaration>("Declaration"); set => SetPropertyValue<Finance.Vat.Declaration>("Declaration", value); }
                [ODataProperty]
                public Finance.Vat.Entry? VATEntry { get => GetPropertyValue<Finance.Vat.Entry>("VATEntry"); set => SetPropertyValue<Finance.Vat.Entry>("VATEntry", value); }
            }
            [Entity(EntitySet = "Finance_Vat_DeclarationLines", TableName = "VAT_Declaration_Lines")]
            public partial class DeclarationLine: EntityResource
            {
                public DeclarationLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Finance_Vat_DeclarationLines";
                public const string EntityTableName = "VAT_Declaration_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? AmountBase { get => GetPropertyValue<Decimal?>("AmountBase"); set => SetPropertyValue<Decimal?>("AmountBase", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Finance.Vat.BoxType? BoxType { get => GetPropertyValue<Finance.Vat.BoxType>("BoxType"); set => SetPropertyValue<Finance.Vat.BoxType>("BoxType", value); }
                [Owner]
                [ODataProperty]
                public Finance.Vat.Declaration? Declaration { get => GetPropertyValue<Finance.Vat.Declaration>("Declaration"); set => SetPropertyValue<Finance.Vat.Declaration>("Declaration", value); }
                [ODataProperty]
                public Finance.Vat.Declaration? Document { get => GetPropertyValue<Finance.Vat.Declaration>("Document"); set => SetPropertyValue<Finance.Vat.Declaration>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace EntriesRepository
            {
                public enum EntryType
                {
                    Purchases = 0,
                    Sales = 1
                }
            }
            [Entity(EntitySet = "Finance_Vat_Entries", TableName = "VAT_Entries")]
            public partial class Entry: General.Document
            {
                public Entry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Finance_Vat_Entries";
                public new const string EntityTableName = "VAT_Entries";
                [ODataProperty]
                public Amount? AmountBase { get => GetPropertyValue<Amount?>("AmountBase"); set => SetPropertyValue<Amount?>("AmountBase", value); }
                [ODataProperty]
                public DateTime? ApplyDate { get => GetPropertyValue<DateTime?>("ApplyDate"); set => SetPropertyValue<DateTime?>("ApplyDate", value); }
                [ODataProperty]
                public Boolean? CashReportingMode { get => GetPropertyValue<Boolean?>("CashReportingMode"); set => SetPropertyValue<Boolean?>("CashReportingMode", value); }
                [ODataProperty]
                public Finance.Vat.EntriesRepository.EntryType? EntryType { get => GetPropertyValue<Finance.Vat.EntriesRepository.EntryType?>("EntryType"); set => SetPropertyValue<Finance.Vat.EntriesRepository.EntryType?>("EntryType", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? ReferencedDocumentNo { get => GetPropertyValue<String?>("ReferencedDocumentNo"); set => SetPropertyValue<String?>("ReferencedDocumentNo", value); }
                [ODataProperty]
                public String? RegistrationNumber { get => GetPropertyValue<String?>("RegistrationNumber"); set => SetPropertyValue<String?>("RegistrationNumber", value); }
                [ODataProperty]
                public String? RegistrationVATNumber { get => GetPropertyValue<String?>("RegistrationVATNumber"); set => SetPropertyValue<String?>("RegistrationVATNumber", value); }
                [ODataProperty]
                public Amount? VATAmountBase { get => GetPropertyValue<Amount?>("VATAmountBase"); set => SetPropertyValue<Amount?>("VATAmountBase", value); }
                [ODataProperty]
                public Finance.Vat.DealType? DealType { get => GetPropertyValue<Finance.Vat.DealType>("DealType"); set => SetPropertyValue<Finance.Vat.DealType>("DealType", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public General.DocumentType? ReferencedDocumentType { get => GetPropertyValue<General.DocumentType>("ReferencedDocumentType"); set => SetPropertyValue<General.DocumentType>("ReferencedDocumentType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
        }
    }
    namespace General
    {
        namespace Contacts
        {
            namespace ActivitiesRepository
            {
                public enum SystemType
                {
                    Communication = 0,
                    Meeting = 1,
                    Task = 2
                }
            }
            [Entity(EntitySet = "General_Contacts_Activities", TableName = "Cm_Activities")]
            public partial class Activity: General.Document
            {
                public Activity(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "General_Contacts_Activities";
                public new const string EntityTableName = "Cm_Activities";
                [ODataProperty]
                public DateTime? DeadlineTime { get => GetPropertyValue<DateTime?>("DeadlineTime"); set => SetPropertyValue<DateTime?>("DeadlineTime", value); }
                [ODataProperty]
                public DateTime? EndTime { get => GetPropertyValue<DateTime?>("EndTime"); set => SetPropertyValue<DateTime?>("EndTime", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? PlannedDurationMinutes { get => GetPropertyValue<Int32?>("PlannedDurationMinutes"); set => SetPropertyValue<Int32?>("PlannedDurationMinutes", value); }
                [ODataProperty]
                public General.Priority? Priority { get => GetPropertyValue<General.Priority?>("Priority"); set => SetPropertyValue<General.Priority?>("Priority", value); }
                [ODataProperty]
                public Boolean? Private { get => GetPropertyValue<Boolean?>("Private"); set => SetPropertyValue<Boolean?>("Private", value); }
                [ODataProperty]
                public DateTime? ReminderTime { get => GetPropertyValue<DateTime?>("ReminderTime"); set => SetPropertyValue<DateTime?>("ReminderTime", value); }
                [ODataProperty]
                public DateTime? StartTime { get => GetPropertyValue<DateTime?>("StartTime"); set => SetPropertyValue<DateTime?>("StartTime", value); }
                [ODataProperty]
                public String? Subject { get => GetPropertyValue<String?>("Subject"); set => SetPropertyValue<String?>("Subject", value); }
                [ODataProperty]
                public General.Contacts.ActivitiesRepository.SystemType? SystemType { get => GetPropertyValue<General.Contacts.ActivitiesRepository.SystemType?>("SystemType"); set => SetPropertyValue<General.Contacts.ActivitiesRepository.SystemType?>("SystemType", value); }
                [ODataProperty]
                public General.Contacts.Person? ContactPerson { get => GetPropertyValue<General.Contacts.Person>("ContactPerson"); set => SetPropertyValue<General.Contacts.Person>("ContactPerson", value); }
                [ODataProperty]
                public General.Contacts.Party? OwnerParty { get => GetPropertyValue<General.Contacts.Party>("OwnerParty"); set => SetPropertyValue<General.Contacts.Party>("OwnerParty", value); }
                [ODataProperty]
                public Projects.ProjectTask? ProjectTask { get => GetPropertyValue<Projects.ProjectTask>("ProjectTask"); set => SetPropertyValue<Projects.ProjectTask>("ProjectTask", value); }
                [ODataProperty]
                public General.Contacts.Party? ResponsibleParty { get => GetPropertyValue<General.Contacts.Party>("ResponsibleParty"); set => SetPropertyValue<General.Contacts.Party>("ResponsibleParty", value); }
                [ODataProperty]
                public Communities.Social.Group? SocialGroup { get => GetPropertyValue<Communities.Social.Group>("SocialGroup"); set => SetPropertyValue<Communities.Social.Group>("SocialGroup", value); }
                [ODataProperty]
                public General.Contacts.Party? TargetParty { get => GetPropertyValue<General.Contacts.Party>("TargetParty"); set => SetPropertyValue<General.Contacts.Party>("TargetParty", value); }
                [ODataProperty]
                public IEnumerable<General.Contacts.ActivityParticipant>? Participants { get => GetCollection<General.Contacts.ActivityParticipant>("Participants"); set => SetCollection<General.Contacts.ActivityParticipant>("Participants", value); }
                [ODataProperty]
                public IEnumerable<General.Contacts.ActivityResource>? Resources { get => GetCollection<General.Contacts.ActivityResource>("Resources"); set => SetCollection<General.Contacts.ActivityResource>("Resources", value); }
                [ODataProperty]
                public IEnumerable<General.Contacts.Reminder>? Reminders { get => GetCollection<General.Contacts.Reminder>("Reminders"); set => SetCollection<General.Contacts.Reminder>("Reminders", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "General_Contacts_ActivityParticipants", TableName = "Cm_Activity_Participants")]
            public partial class ActivityParticipant: EntityResource
            {
                public ActivityParticipant(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_ActivityParticipants";
                public const string EntityTableName = "Cm_Activity_Participants";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Decimal? WorkLoadPercent { get => GetPropertyValue<Decimal?>("WorkLoadPercent"); set => SetPropertyValue<Decimal?>("WorkLoadPercent", value); }
                [Owner]
                [ODataProperty]
                public General.Contacts.Activity? Activity { get => GetPropertyValue<General.Contacts.Activity>("Activity"); set => SetPropertyValue<General.Contacts.Activity>("Activity", value); }
                [ODataProperty]
                public General.Contacts.Person? ParticipantPerson { get => GetPropertyValue<General.Contacts.Person>("ParticipantPerson"); set => SetPropertyValue<General.Contacts.Person>("ParticipantPerson", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_ActivityResources", TableName = "Cm_Activity_Resources")]
            public partial class ActivityResource: EntityResource
            {
                public ActivityResource(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_ActivityResources";
                public const string EntityTableName = "Cm_Activity_Resources";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Decimal? ResourceUsagePercent { get => GetPropertyValue<Decimal?>("ResourceUsagePercent"); set => SetPropertyValue<Decimal?>("ResourceUsagePercent", value); }
                [Owner]
                [ODataProperty]
                public General.Contacts.Activity? Activity { get => GetPropertyValue<General.Contacts.Activity>("Activity"); set => SetPropertyValue<General.Contacts.Activity>("Activity", value); }
                [ODataProperty]
                public General.Resources.Resource? Resource { get => GetPropertyValue<General.Resources.Resource>("Resource"); set => SetPropertyValue<General.Resources.Resource>("Resource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_ActivityTemplates", TableName = "Cm_Activity_Templates")]
            public partial class ActivityTemplate: EntityResource
            {
                public ActivityTemplate(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_ActivityTemplates";
                public const string EntityTableName = "Cm_Activity_Templates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ActivitySubjectMask { get => GetPropertyValue<String?>("ActivitySubjectMask"); set => SetPropertyValue<String?>("ActivitySubjectMask", value); }
                [ODataProperty]
                public Int32? AdditionalDays { get => GetPropertyValue<Int32?>("AdditionalDays"); set => SetPropertyValue<Int32?>("AdditionalDays", value); }
                [ODataProperty]
                public TimeSpan? ReminderTime { get => GetPropertyValue<TimeSpan?>("ReminderTime"); set => SetPropertyValue<TimeSpan?>("ReminderTime", value); }
                [ODataProperty]
                public String? SourceDateField { get => GetPropertyValue<String?>("SourceDateField"); set => SetPropertyValue<String?>("SourceDateField", value); }
                [ODataProperty]
                public TimeSpan? StartTime { get => GetPropertyValue<TimeSpan?>("StartTime"); set => SetPropertyValue<TimeSpan?>("StartTime", value); }
                [ODataProperty]
                public General.Contacts.Party? ResponsibleParty { get => GetPropertyValue<General.Contacts.Party>("ResponsibleParty"); set => SetPropertyValue<General.Contacts.Party>("ResponsibleParty", value); }
                [ODataProperty]
                public Systems.Workflow.Route? Route { get => GetPropertyValue<Systems.Workflow.Route>("Route"); set => SetPropertyValue<Systems.Workflow.Route>("Route", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_ActivityTimeIntervals", TableName = "Cm_Activity_Time_Intervals")]
            public partial class ActivityTimeInterval: EntityResource
            {
                public ActivityTimeInterval(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_ActivityTimeIntervals";
                public const string EntityTableName = "Cm_Activity_Time_Intervals";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? Date { get => GetPropertyValue<DateTime?>("Date"); set => SetPropertyValue<DateTime?>("Date", value); }
                [ODataProperty]
                public TimeSpan? EndTime { get => GetPropertyValue<TimeSpan?>("EndTime"); set => SetPropertyValue<TimeSpan?>("EndTime", value); }
                [ODataProperty]
                public Decimal? ExecutionCompletePercent { get => GetPropertyValue<Decimal?>("ExecutionCompletePercent"); set => SetPropertyValue<Decimal?>("ExecutionCompletePercent", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public TimeSpan? StartTime { get => GetPropertyValue<TimeSpan?>("StartTime"); set => SetPropertyValue<TimeSpan?>("StartTime", value); }
                [ODataProperty]
                public General.DocumentState? State { get => GetPropertyValue<General.DocumentState?>("State"); set => SetPropertyValue<General.DocumentState?>("State", value); }
                [ODataProperty]
                public General.Contacts.Activity? Activity { get => GetPropertyValue<General.Contacts.Activity>("Activity"); set => SetPropertyValue<General.Contacts.Activity>("Activity", value); }
                [Owner]
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public General.DocumentTypeUserStatus? UserStatus { get => GetPropertyValue<General.DocumentTypeUserStatus>("UserStatus"); set => SetPropertyValue<General.DocumentTypeUserStatus>("UserStatus", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_Companies", TableName = "Cm_Companies")]
            public partial class Company: General.Contacts.Party
            {
                public Company(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "General_Contacts_Companies";
                public new const string EntityTableName = "Cm_Companies";
                [ODataProperty]
                public Int32? BranchNumber { get => GetPropertyValue<Int32?>("BranchNumber"); set => SetPropertyValue<Int32?>("BranchNumber", value); }
                [ODataProperty]
                public MultilanguageString? City { get => GetPropertyValue<MultilanguageString?>("City"); set => SetPropertyValue<MultilanguageString?>("City", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
                [ODataProperty]
                public String? CreationUser { get => GetPropertyValue<String?>("CreationUser"); set => SetPropertyValue<String?>("CreationUser", value); }
                [ODataProperty]
                public Boolean? IsVATCashReportingRegistered { get => GetPropertyValue<Boolean?>("IsVATCashReportingRegistered"); set => SetPropertyValue<Boolean?>("IsVATCashReportingRegistered", value); }
                [ODataProperty]
                public Boolean? IsVATRegistered { get => GetPropertyValue<Boolean?>("IsVATRegistered"); set => SetPropertyValue<Boolean?>("IsVATRegistered", value); }
                [ODataProperty]
                public String? RegistrationNumber { get => GetPropertyValue<String?>("RegistrationNumber"); set => SetPropertyValue<String?>("RegistrationNumber", value); }
                [ODataProperty]
                public MultilanguageString? RegistrationPrimaryAddress { get => GetPropertyValue<MultilanguageString?>("RegistrationPrimaryAddress"); set => SetPropertyValue<MultilanguageString?>("RegistrationPrimaryAddress", value); }
                [ODataProperty]
                public MultilanguageString? RegistrationType { get => GetPropertyValue<MultilanguageString?>("RegistrationType"); set => SetPropertyValue<MultilanguageString?>("RegistrationType", value); }
                [ODataProperty]
                public String? RegistrationVATNumber { get => GetPropertyValue<String?>("RegistrationVATNumber"); set => SetPropertyValue<String?>("RegistrationVATNumber", value); }
                [ODataProperty]
                public MultilanguageString? ResponsiblePersonName { get => GetPropertyValue<MultilanguageString?>("ResponsiblePersonName"); set => SetPropertyValue<MultilanguageString?>("ResponsiblePersonName", value); }
                [ODataProperty]
                public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
                [ODataProperty]
                public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
                [ODataProperty]
                public General.Geography.Country? Country { get => GetPropertyValue<General.Geography.Country>("Country"); set => SetPropertyValue<General.Geography.Country>("Country", value); }
                [ODataProperty]
                public General.Contacts.Person? RegistrationResponsiblePerson { get => GetPropertyValue<General.Contacts.Person>("RegistrationResponsiblePerson"); set => SetPropertyValue<General.Contacts.Person>("RegistrationResponsiblePerson", value); }
                [ODataProperty]
                public IEnumerable<General.Contacts.CompanyDepartment>? Departments { get => GetCollection<General.Contacts.CompanyDepartment>("Departments"); set => SetCollection<General.Contacts.CompanyDepartment>("Departments", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_CompanyDepartments", TableName = "Cm_Company_Departments")]
            public partial class CompanyDepartment: EntityResource
            {
                public CompanyDepartment(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_CompanyDepartments";
                public const string EntityTableName = "Cm_Company_Departments";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? DepartmentName { get => GetPropertyValue<String?>("DepartmentName"); set => SetPropertyValue<String?>("DepartmentName", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public General.Contacts.Company? Company { get => GetPropertyValue<General.Contacts.Company>("Company"); set => SetPropertyValue<General.Contacts.Company>("Company", value); }
                [ODataProperty]
                public General.Contacts.CompanyDepartment? Parent { get => GetPropertyValue<General.Contacts.CompanyDepartment>("Parent"); set => SetPropertyValue<General.Contacts.CompanyDepartment>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_CompanyDivisions", TableName = "Cm_Company_Divisions")]
            public partial class CompanyDivision: General.Contacts.Party
            {
                public CompanyDivision(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "General_Contacts_CompanyDivisions";
                public new const string EntityTableName = "Cm_Company_Divisions";
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public General.Contacts.Company? Company { get => GetPropertyValue<General.Contacts.Company>("Company"); set => SetPropertyValue<General.Contacts.Company>("Company", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_CompanyEmployees", TableName = "Cm_Company_Employees")]
            public partial class CompanyEmployee: EntityResource
            {
                public CompanyEmployee(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_CompanyEmployees";
                public const string EntityTableName = "Cm_Company_Employees";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ContractCode { get => GetPropertyValue<String?>("ContractCode"); set => SetPropertyValue<String?>("ContractCode", value); }
                [ODataProperty]
                public DateTime? ContractEndDate { get => GetPropertyValue<DateTime?>("ContractEndDate"); set => SetPropertyValue<DateTime?>("ContractEndDate", value); }
                [ODataProperty]
                public DateTime? ContractStartDate { get => GetPropertyValue<DateTime?>("ContractStartDate"); set => SetPropertyValue<DateTime?>("ContractStartDate", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.Contacts.CompanyDepartment? CompanyDepartment { get => GetPropertyValue<General.Contacts.CompanyDepartment>("CompanyDepartment"); set => SetPropertyValue<General.Contacts.CompanyDepartment>("CompanyDepartment", value); }
                [ODataProperty]
                public General.Contacts.Company? Company { get => GetPropertyValue<General.Contacts.Company>("Company"); set => SetPropertyValue<General.Contacts.Company>("Company", value); }
                [Owner]
                [ODataProperty]
                public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_CompanyLocations", TableName = "Cm_Company_Locations")]
            public partial class CompanyLocation: General.Contacts.Party
            {
                public CompanyLocation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "General_Contacts_CompanyLocations";
                public new const string EntityTableName = "Cm_Company_Locations";
                [ODataProperty]
                public General.Contacts.CompanyLocationsRepository.BillTo? BillTo { get => GetPropertyValue<General.Contacts.CompanyLocationsRepository.BillTo?>("BillTo"); set => SetPropertyValue<General.Contacts.CompanyLocationsRepository.BillTo?>("BillTo", value); }
                [ODataProperty]
                public MultilanguageString? LocationName { get => GetPropertyValue<MultilanguageString?>("LocationName"); set => SetPropertyValue<MultilanguageString?>("LocationName", value); }
                [ODataProperty]
                public String? WorkingTime { get => GetPropertyValue<String?>("WorkingTime"); set => SetPropertyValue<String?>("WorkingTime", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                [ODataProperty]
                public General.Contacts.Company? Company { get => GetPropertyValue<General.Contacts.Company>("Company"); set => SetPropertyValue<General.Contacts.Company>("Company", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace CompanyLocationsRepository
            {
                public enum BillTo
                {
                    Company = 0,
                    CompanyLocation = 1
                }
            }
            [Entity(EntitySet = "General_Contacts_ContactMechanisms", TableName = "Cm_Contact_Mechanisms")]
            public partial class ContactMechanism: EntityResource
            {
                public ContactMechanism(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_ContactMechanisms";
                public const string EntityTableName = "Cm_Contact_Mechanisms";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public General.Contacts.ContactMechanismsRepository.ContactMechanismType? ContactMechanismType { get => GetPropertyValue<General.Contacts.ContactMechanismsRepository.ContactMechanismType?>("ContactMechanismType"); set => SetPropertyValue<General.Contacts.ContactMechanismsRepository.ContactMechanismType?>("ContactMechanismType", value); }
                [ODataProperty]
                public General.Geography.AdministrativeRegion? AdministrativeRegion { get => GetPropertyValue<General.Geography.AdministrativeRegion>("AdministrativeRegion"); set => SetPropertyValue<General.Geography.AdministrativeRegion>("AdministrativeRegion", value); }
                [ODataProperty]
                public General.Geography.GeoPoint? GeoPoint { get => GetPropertyValue<General.Geography.GeoPoint>("GeoPoint"); set => SetPropertyValue<General.Geography.GeoPoint>("GeoPoint", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_ContactMechanismPurposes", TableName = "Cm_Contact_Mechanism_Purposes")]
            public partial class ContactMechanismPurpos: EntityResource
            {
                public ContactMechanismPurpos(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_ContactMechanismPurposes";
                public const string EntityTableName = "Cm_Contact_Mechanism_Purposes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public General.Contacts.ContactMechanismsRepository.ContactMechanismType? ContactMechanismType { get => GetPropertyValue<General.Contacts.ContactMechanismsRepository.ContactMechanismType?>("ContactMechanismType"); set => SetPropertyValue<General.Contacts.ContactMechanismsRepository.ContactMechanismType?>("ContactMechanismType", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ContactMechanismsRepository
            {
                public enum ContactMechanismType
                {
                    Address = 0,
                    Mail = 1,
                    Fax = 2,
                    MobilePhone = 3,
                    Other = 4,
                    Telephone = 5,
                    WebSite = 6,
                    PostalCode = 7,
                    WebProfile = 8
                }
            }
            namespace PartiesRepository
            {
                public enum PartyType
                {
                    Company = 0,
                    CompanyLocation = 1,
                    Person = 2,
                    Store = 3,
                    CompanyDivision = 4
                }
            }
            [Entity(EntitySet = "General_Contacts_Parties", TableName = "Gen_Parties")]
            public partial class Party: EntityResource
            {
                public Party(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_Parties";
                public const string EntityTableName = "Gen_Parties";
                [ODataProperty]
                public Guid? PartyId { get => GetPropertyValue<Guid?>("PartyId"); set => SetPropertyValue<Guid?>("PartyId", value); }
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? PartyCreationTime { get => GetPropertyValue<DateTime?>("PartyCreationTime"); set => SetPropertyValue<DateTime?>("PartyCreationTime", value); }
                [ODataProperty]
                public String? PartyCreationUser { get => GetPropertyValue<String?>("PartyCreationUser"); set => SetPropertyValue<String?>("PartyCreationUser", value); }
                [ODataProperty]
                public String? GLN { get => GetPropertyValue<String?>("GLN"); set => SetPropertyValue<String?>("GLN", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? PartyNotes { get => GetPropertyValue<String?>("PartyNotes"); set => SetPropertyValue<String?>("PartyNotes", value); }
                [ODataProperty]
                public String? PartyCode { get => GetPropertyValue<String?>("PartyCode"); set => SetPropertyValue<String?>("PartyCode", value); }
                [ODataProperty]
                public MultilanguageString? PartyName { get => GetPropertyValue<MultilanguageString?>("PartyName"); set => SetPropertyValue<MultilanguageString?>("PartyName", value); }
                [ODataProperty]
                public General.Contacts.PartiesRepository.PartyType? PartyType { get => GetPropertyValue<General.Contacts.PartiesRepository.PartyType?>("PartyType"); set => SetPropertyValue<General.Contacts.PartiesRepository.PartyType?>("PartyType", value); }
                [ODataProperty]
                public String? PartyUniqueNumber { get => GetPropertyValue<String?>("PartyUniqueNumber"); set => SetPropertyValue<String?>("PartyUniqueNumber", value); }
                [ODataProperty]
                public DateTime? PartyUpdateTime { get => GetPropertyValue<DateTime?>("PartyUpdateTime"); set => SetPropertyValue<DateTime?>("PartyUpdateTime", value); }
                [ODataProperty]
                public String? PartyUpdateUser { get => GetPropertyValue<String?>("PartyUpdateUser"); set => SetPropertyValue<String?>("PartyUpdateUser", value); }
                [ODataProperty]
                public General.Geography.AdministrativeRegion? AdministrativeRegion { get => GetPropertyValue<General.Geography.AdministrativeRegion>("AdministrativeRegion"); set => SetPropertyValue<General.Geography.AdministrativeRegion>("AdministrativeRegion", value); }
                [ODataProperty]
                public General.Geography.Area? Area { get => GetPropertyValue<General.Geography.Area>("Area"); set => SetPropertyValue<General.Geography.Area>("Area", value); }
                [ODataProperty]
                public General.Products.CodingSystem? DefaultProductCodingSystem { get => GetPropertyValue<General.Products.CodingSystem>("DefaultProductCodingSystem"); set => SetPropertyValue<General.Products.CodingSystem>("DefaultProductCodingSystem", value); }
                [ODataProperty]
                public General.Contacts.Party? ParentParty { get => GetPropertyValue<General.Contacts.Party>("ParentParty"); set => SetPropertyValue<General.Contacts.Party>("ParentParty", value); }
                [ODataProperty]
                public IEnumerable<General.Contacts.ActivityTimeInterval>? ActivityTimeIntervals { get => GetCollection<General.Contacts.ActivityTimeInterval>("ActivityTimeIntervals"); set => SetCollection<General.Contacts.ActivityTimeInterval>("ActivityTimeIntervals", value); }
                [ODataProperty]
                public IEnumerable<General.Contacts.PartyContactMechanism>? ContactMechanisms { get => GetCollection<General.Contacts.PartyContactMechanism>("ContactMechanisms"); set => SetCollection<General.Contacts.PartyContactMechanism>("ContactMechanisms", value); }
                [ODataProperty]
                public IEnumerable<Crm.Distributor>? Distributors { get => GetCollection<Crm.Distributor>("Distributors"); set => SetCollection<Crm.Distributor>("Distributors", value); }
                [ODataProperty]
                public IEnumerable<General.PartyApplicableLegislation>? ApplicableLegislations { get => GetCollection<General.PartyApplicableLegislation>("ApplicableLegislations"); set => SetCollection<General.PartyApplicableLegislation>("ApplicableLegislations", value); }
                [ODataProperty]
                public IEnumerable<General.Contacts.PartyBankAccount>? BankAccounts { get => GetCollection<General.Contacts.PartyBankAccount>("BankAccounts"); set => SetCollection<General.Contacts.PartyBankAccount>("BankAccounts", value); }
                [ODataProperty]
                public IEnumerable<General.PartyLocationNumber>? LocationNumbers { get => GetCollection<General.PartyLocationNumber>("LocationNumbers"); set => SetCollection<General.PartyLocationNumber>("LocationNumbers", value); }
                [ODataProperty]
                public IEnumerable<General.Contacts.PartyPicture>? Pictures { get => GetCollection<General.Contacts.PartyPicture>("Pictures"); set => SetCollection<General.Contacts.PartyPicture>("Pictures", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_PartyBankAccounts", TableName = "Gen_Party_Bank_Accounts")]
            public partial class PartyBankAccount: EntityResource
            {
                public PartyBankAccount(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_PartyBankAccounts";
                public const string EntityTableName = "Gen_Party_Bank_Accounts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? BankAccountCode { get => GetPropertyValue<String?>("BankAccountCode"); set => SetPropertyValue<String?>("BankAccountCode", value); }
                [ODataProperty]
                public MultilanguageString? BankAddress { get => GetPropertyValue<MultilanguageString?>("BankAddress"); set => SetPropertyValue<MultilanguageString?>("BankAddress", value); }
                [ODataProperty]
                public MultilanguageString? BankBranchName { get => GetPropertyValue<MultilanguageString?>("BankBranchName"); set => SetPropertyValue<MultilanguageString?>("BankBranchName", value); }
                [ODataProperty]
                public String? BankCode { get => GetPropertyValue<String?>("BankCode"); set => SetPropertyValue<String?>("BankCode", value); }
                [ODataProperty]
                public MultilanguageString? BankName { get => GetPropertyValue<MultilanguageString?>("BankName"); set => SetPropertyValue<MultilanguageString?>("BankName", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_PartyContactMechanisms", TableName = "Cm_Party_Contact_Mechanisms")]
            public partial class PartyContactMechanism: EntityResource
            {
                public PartyContactMechanism(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_PartyContactMechanisms";
                public const string EntityTableName = "Cm_Party_Contact_Mechanisms";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public Boolean? NonSolicitation { get => GetPropertyValue<Boolean?>("NonSolicitation"); set => SetPropertyValue<Boolean?>("NonSolicitation", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
                [ODataProperty]
                public General.Contacts.ContactMechanism? ContactMechanism { get => GetPropertyValue<General.Contacts.ContactMechanism>("ContactMechanism"); set => SetPropertyValue<General.Contacts.ContactMechanism>("ContactMechanism", value); }
                [ODataProperty]
                public General.Contacts.ContactMechanismPurpos? ContactMechanismPurpose { get => GetPropertyValue<General.Contacts.ContactMechanismPurpos>("ContactMechanismPurpose"); set => SetPropertyValue<General.Contacts.ContactMechanismPurpos>("ContactMechanismPurpose", value); }
                [Owner]
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public Applications.PersonalData.PersonalDataProcess? PersonalDataProcess { get => GetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess"); set => SetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_PartyPictures", TableName = "Gen_Party_Pictures")]
            public partial class PartyPicture: EntityResource
            {
                public PartyPicture(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_PartyPictures";
                public const string EntityTableName = "Gen_Party_Pictures";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Comments { get => GetPropertyValue<String?>("Comments"); set => SetPropertyValue<String?>("Comments", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public Boolean? IsLogo { get => GetPropertyValue<Boolean?>("IsLogo"); set => SetPropertyValue<Boolean?>("IsLogo", value); }
                [ODataProperty]
                public Byte[]? Picture { get => GetPropertyValue<Byte[]?>("Picture"); set => SetPropertyValue<Byte[]?>("Picture", value); }
                [ODataProperty]
                public Int32? PictureNo { get => GetPropertyValue<Int32?>("PictureNo"); set => SetPropertyValue<Int32?>("PictureNo", value); }
                [Owner]
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_PartyRelationships", TableName = "Cm_Party_Relationships")]
            public partial class PartyRelationship: EntityResource
            {
                public PartyRelationship(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_PartyRelationships";
                public const string EntityTableName = "Cm_Party_Relationships";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? ToDate { get => GetPropertyValue<DateTime?>("ToDate"); set => SetPropertyValue<DateTime?>("ToDate", value); }
                [ODataProperty]
                public General.Contacts.Party? FromParty { get => GetPropertyValue<General.Contacts.Party>("FromParty"); set => SetPropertyValue<General.Contacts.Party>("FromParty", value); }
                [ODataProperty]
                public General.Contacts.PartyRelationshipType? RelationshipType { get => GetPropertyValue<General.Contacts.PartyRelationshipType>("RelationshipType"); set => SetPropertyValue<General.Contacts.PartyRelationshipType>("RelationshipType", value); }
                [ODataProperty]
                public General.Contacts.Party? ToParty { get => GetPropertyValue<General.Contacts.Party>("ToParty"); set => SetPropertyValue<General.Contacts.Party>("ToParty", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_PartyRelationshipTypes", TableName = "Cm_Party_Relationship_Types")]
            public partial class PartyRelationshipType: EntityResource
            {
                public PartyRelationshipType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_PartyRelationshipTypes";
                public const string EntityTableName = "Cm_Party_Relationship_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? RelationshipTypeName { get => GetPropertyValue<String?>("RelationshipTypeName"); set => SetPropertyValue<String?>("RelationshipTypeName", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Contacts_Persons", TableName = "Cm_Persons")]
            public partial class Person: General.Contacts.Party
            {
                public Person(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "General_Contacts_Persons";
                public new const string EntityTableName = "Cm_Persons";
                [ODataProperty]
                public DateTime? BirthDate { get => GetPropertyValue<DateTime?>("BirthDate"); set => SetPropertyValue<DateTime?>("BirthDate", value); }
                [ODataProperty]
                public MultilanguageString? City { get => GetPropertyValue<MultilanguageString?>("City"); set => SetPropertyValue<MultilanguageString?>("City", value); }
                [ODataProperty]
                public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
                [ODataProperty]
                public String? CreationUser { get => GetPropertyValue<String?>("CreationUser"); set => SetPropertyValue<String?>("CreationUser", value); }
                [ODataProperty]
                public MultilanguageString? FirstName { get => GetPropertyValue<MultilanguageString?>("FirstName"); set => SetPropertyValue<MultilanguageString?>("FirstName", value); }
                [ODataProperty]
                public General.Contacts.PersonsRepository.Gender? Gender { get => GetPropertyValue<General.Contacts.PersonsRepository.Gender?>("Gender"); set => SetPropertyValue<General.Contacts.PersonsRepository.Gender?>("Gender", value); }
                [ODataProperty]
                public MultilanguageString? LastName { get => GetPropertyValue<MultilanguageString?>("LastName"); set => SetPropertyValue<MultilanguageString?>("LastName", value); }
                [ODataProperty]
                public MultilanguageString? MiddleName { get => GetPropertyValue<MultilanguageString?>("MiddleName"); set => SetPropertyValue<MultilanguageString?>("MiddleName", value); }
                [ODataProperty]
                public String? NationalNumber { get => GetPropertyValue<String?>("NationalNumber"); set => SetPropertyValue<String?>("NationalNumber", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? PassportIssuingDate { get => GetPropertyValue<DateTime?>("PassportIssuingDate"); set => SetPropertyValue<DateTime?>("PassportIssuingDate", value); }
                [ODataProperty]
                public String? PassportNumber { get => GetPropertyValue<String?>("PassportNumber"); set => SetPropertyValue<String?>("PassportNumber", value); }
                [ODataProperty]
                public MultilanguageString? Title { get => GetPropertyValue<MultilanguageString?>("Title"); set => SetPropertyValue<MultilanguageString?>("Title", value); }
                [ODataProperty]
                public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
                [ODataProperty]
                public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
                [ODataProperty]
                public General.Geography.Country? Nationality { get => GetPropertyValue<General.Geography.Country>("Nationality"); set => SetPropertyValue<General.Geography.Country>("Nationality", value); }
                [ODataProperty]
                public IEnumerable<General.Contacts.CompanyEmployee>? CompanyEmployees { get => GetCollection<General.Contacts.CompanyEmployee>("CompanyEmployees"); set => SetCollection<General.Contacts.CompanyEmployee>("CompanyEmployees", value); }
                [ODataProperty]
                public IEnumerable<Crm.SalesPerson>? SalesPersons { get => GetCollection<Crm.SalesPerson>("SalesPersons"); set => SetCollection<Crm.SalesPerson>("SalesPersons", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace PersonsRepository
            {
                public enum Gender
                {
                    Female = 0,
                    Male = 1,
                    Other = 2,
                    PreferNotToSay = 3
                }
            }
            [Entity(EntitySet = "General_Contacts_Reminders", TableName = "Cm_Reminders")]
            public partial class Reminder: EntityResource
            {
                public Reminder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Contacts_Reminders";
                public const string EntityTableName = "Cm_Reminders";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public Boolean? IsDismissed { get => GetPropertyValue<Boolean?>("IsDismissed"); set => SetPropertyValue<Boolean?>("IsDismissed", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? ReminderTime { get => GetPropertyValue<DateTime?>("ReminderTime"); set => SetPropertyValue<DateTime?>("ReminderTime", value); }
                [Owner]
                [ODataProperty]
                public General.Contacts.Activity? Activity { get => GetPropertyValue<General.Contacts.Activity>("Activity"); set => SetPropertyValue<General.Contacts.Activity>("Activity", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        [Entity(EntitySet = "General_Currencies", TableName = "Gen_Currencies")]
        public partial class Currency: EntityResource
        {
            public Currency(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_Currencies";
            public const string EntityTableName = "Gen_Currencies";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public String? CurrencySign { get => GetPropertyValue<String?>("CurrencySign"); set => SetPropertyValue<String?>("CurrencySign", value); }
            [ODataProperty]
            public Int32? ShowOrder { get => GetPropertyValue<Int32?>("ShowOrder"); set => SetPropertyValue<Int32?>("ShowOrder", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_CurrencyDirectories", TableName = "Gen_Currency_Directories")]
        public partial class CurrencyDirectory: General.Document
        {
            public CurrencyDirectory(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public new const string EntitySetName = "General_CurrencyDirectories";
            public new const string EntityTableName = "Gen_Currency_Directories";
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
            [ODataProperty]
            public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
            [ODataProperty]
            public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
            [ODataProperty]
            public Boolean? IsValidField { get => GetPropertyValue<Boolean?>("IsValidField"); set => SetPropertyValue<Boolean?>("IsValidField", value); }
            [ODataProperty]
            public General.Currency? ToCurrency { get => GetPropertyValue<General.Currency>("ToCurrency"); set => SetPropertyValue<General.Currency>("ToCurrency", value); }
            [ODataProperty]
            public IEnumerable<General.CurrencyDirectoryLine>? Lines { get => GetCollection<General.CurrencyDirectoryLine>("Lines"); set => SetCollection<General.CurrencyDirectoryLine>("Lines", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
            public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
            public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
            public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
            public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
            public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
        }
        [Entity(EntitySet = "General_CurrencyDirectoryLines", TableName = "Gen_Currency_Directory_Lines")]
        public partial class CurrencyDirectoryLine: EntityResource
        {
            public CurrencyDirectoryLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_CurrencyDirectoryLines";
            public const string EntityTableName = "Gen_Currency_Directory_Lines";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Decimal? RateDivisor { get => GetPropertyValue<Decimal?>("RateDivisor"); set => SetPropertyValue<Decimal?>("RateDivisor", value); }
            [ODataProperty]
            public Decimal? RateMultiplier { get => GetPropertyValue<Decimal?>("RateMultiplier"); set => SetPropertyValue<Decimal?>("RateMultiplier", value); }
            [Owner]
            [ODataProperty]
            public General.CurrencyDirectory? CurrencyDirectory { get => GetPropertyValue<General.CurrencyDirectory>("CurrencyDirectory"); set => SetPropertyValue<General.CurrencyDirectory>("CurrencyDirectory", value); }
            [ODataProperty]
            public General.Currency? FromCurrency { get => GetPropertyValue<General.Currency>("FromCurrency"); set => SetPropertyValue<General.Currency>("FromCurrency", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace CustomPropertiesRepository
        {
            public enum PropertyType
            {
                Text = 0,
                Number = 1,
                Picture = 2,
                Date = 3
            }
        }
        [Entity(EntitySet = "General_CustomProperties", TableName = "Gen_Properties")]
        public partial class CustomProperty: EntityResource
        {
            public CustomProperty(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_CustomProperties";
            public const string EntityTableName = "Gen_Properties";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? AllowedValuesEntityName { get => GetPropertyValue<String?>("AllowedValuesEntityName"); set => SetPropertyValue<String?>("AllowedValuesEntityName", value); }
            [ODataProperty]
            public String? AllowedValuesFilterXML { get => GetPropertyValue<String?>("AllowedValuesFilterXML"); set => SetPropertyValue<String?>("AllowedValuesFilterXML", value); }
            [ODataProperty]
            public String? EntityName { get => GetPropertyValue<String?>("EntityName"); set => SetPropertyValue<String?>("EntityName", value); }
            [ODataProperty]
            public MultilanguageString? Hint { get => GetPropertyValue<MultilanguageString?>("Hint"); set => SetPropertyValue<MultilanguageString?>("Hint", value); }
            [ODataProperty]
            public Byte? KeyOrder { get => GetPropertyValue<Byte?>("KeyOrder"); set => SetPropertyValue<Byte?>("KeyOrder", value); }
            [ODataProperty]
            public Boolean? LimitToAllowedValues { get => GetPropertyValue<Boolean?>("LimitToAllowedValues"); set => SetPropertyValue<Boolean?>("LimitToAllowedValues", value); }
            [ODataProperty]
            public Int16? MaskLength { get => GetPropertyValue<Int16?>("MaskLength"); set => SetPropertyValue<Int16?>("MaskLength", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            [ODataProperty]
            public General.CustomPropertiesRepository.PropertyType? PropertyType { get => GetPropertyValue<General.CustomPropertiesRepository.PropertyType?>("PropertyType"); set => SetPropertyValue<General.CustomPropertiesRepository.PropertyType?>("PropertyType", value); }
            [ODataProperty]
            public General.CustomProperty? AllowedValuesParentProperty { get => GetPropertyValue<General.CustomProperty>("AllowedValuesParentProperty"); set => SetPropertyValue<General.CustomProperty>("AllowedValuesParentProperty", value); }
            [ODataProperty]
            public General.CustomProperty? AllowedValuesProperty { get => GetPropertyValue<General.CustomProperty>("AllowedValuesProperty"); set => SetPropertyValue<General.CustomProperty>("AllowedValuesProperty", value); }
            [ODataProperty]
            public General.PropertiesCategory? PropertiesCategory { get => GetPropertyValue<General.PropertiesCategory>("PropertiesCategory"); set => SetPropertyValue<General.PropertiesCategory>("PropertiesCategory", value); }
            [ODataProperty]
            public IEnumerable<General.CustomPropertyAllowedValue>? AllowedValues { get => GetCollection<General.CustomPropertyAllowedValue>("AllowedValues"); set => SetCollection<General.CustomPropertyAllowedValue>("AllowedValues", value); }
            [ODataProperty]
            public IEnumerable<General.PropertyEnterpriseCompanyFilter>? EnterpriseCompanyFilters { get => GetCollection<General.PropertyEnterpriseCompanyFilter>("EnterpriseCompanyFilters"); set => SetCollection<General.PropertyEnterpriseCompanyFilter>("EnterpriseCompanyFilters", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_CustomPropertyAllowedValues", TableName = "Gen_Property_Allowed_Values")]
        public partial class CustomPropertyAllowedValue: EntityResource
        {
            public CustomPropertyAllowedValue(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_CustomPropertyAllowedValues";
            public const string EntityTableName = "Gen_Property_Allowed_Values";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
            [ODataProperty]
            public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
            [ODataProperty]
            public String? LongDescription { get => GetPropertyValue<String?>("LongDescription"); set => SetPropertyValue<String?>("LongDescription", value); }
            [ODataProperty]
            public Guid? ParentAllowedValueId { get => GetPropertyValue<Guid?>("ParentAllowedValueId"); set => SetPropertyValue<Guid?>("ParentAllowedValueId", value); }
            [ODataProperty]
            public Byte[]? Picture { get => GetPropertyValue<Byte[]?>("Picture"); set => SetPropertyValue<Byte[]?>("Picture", value); }
            [ODataProperty]
            public String? PropertyAllowedValueField { get => GetPropertyValue<String?>("PropertyAllowedValueField"); set => SetPropertyValue<String?>("PropertyAllowedValueField", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [Owner]
            [ODataProperty]
            public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        public partial class CustomPropertyValue: ComplexTypeResource
        {
            public CustomPropertyValue(IDictionary<string, object?>? rawData = null): base(rawData) {}
            [ODataProperty]
            public String? Value { get => GetPropertyValue<String?>("Value"); set => SetPropertyValue<String?>("Value", value); }
            [ODataProperty]
            public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
            [ODataProperty]
            public Guid? ValueId { get => GetPropertyValue<Guid?>("ValueId"); set => SetPropertyValue<Guid?>("ValueId", value); }
        }
        [Entity(EntitySet = "General_Documents", TableName = "Gen_Documents")]
        public partial class Document: EntityResource
        {
            public Document(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_Documents";
            public const string EntityTableName = "Gen_Documents";
            [ODataProperty]
            public Guid? DocumentId { get => GetPropertyValue<Guid?>("DocumentId"); set => SetPropertyValue<Guid?>("DocumentId", value); }
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Int32? AdjustmentNumber { get => GetPropertyValue<Int32?>("AdjustmentNumber"); set => SetPropertyValue<Int32?>("AdjustmentNumber", value); }
            [ODataProperty]
            public DateTime? AdjustmentTime { get => GetPropertyValue<DateTime?>("AdjustmentTime"); set => SetPropertyValue<DateTime?>("AdjustmentTime", value); }
            [ODataProperty]
            public String? AdjustmentUser { get => GetPropertyValue<String?>("AdjustmentUser"); set => SetPropertyValue<String?>("AdjustmentUser", value); }
            [ODataProperty]
            public DateTime? CompleteTime { get => GetPropertyValue<DateTime?>("CompleteTime"); set => SetPropertyValue<DateTime?>("CompleteTime", value); }
            [ODataProperty]
            public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
            [ODataProperty]
            public String? CreationUser { get => GetPropertyValue<String?>("CreationUser"); set => SetPropertyValue<String?>("CreationUser", value); }
            [ODataProperty]
            public DateTime? DocumentDate { get => GetPropertyValue<DateTime?>("DocumentDate"); set => SetPropertyValue<DateTime?>("DocumentDate", value); }
            [ODataProperty]
            public String? DocumentNo { get => GetPropertyValue<String?>("DocumentNo"); set => SetPropertyValue<String?>("DocumentNo", value); }
            [ODataProperty]
            public Int32? DocumentVersion { get => GetPropertyValue<Int32?>("DocumentVersion"); set => SetPropertyValue<Int32?>("DocumentVersion", value); }
            [ODataProperty]
            public String? EntityName { get => GetPropertyValue<String?>("EntityName"); set => SetPropertyValue<String?>("EntityName", value); }
            [ODataProperty]
            public String? DocumentNotes { get => GetPropertyValue<String?>("DocumentNotes"); set => SetPropertyValue<String?>("DocumentNotes", value); }
            [ODataProperty]
            public General.ParentDocumentRelationshipType? ParentDocumentRelationshipType { get => GetPropertyValue<General.ParentDocumentRelationshipType?>("ParentDocumentRelationshipType"); set => SetPropertyValue<General.ParentDocumentRelationshipType?>("ParentDocumentRelationshipType", value); }
            [ODataProperty]
            public Boolean? PlanningOnly { get => GetPropertyValue<Boolean?>("PlanningOnly"); set => SetPropertyValue<Boolean?>("PlanningOnly", value); }
            [ODataProperty]
            public Boolean? ReadOnly { get => GetPropertyValue<Boolean?>("ReadOnly"); set => SetPropertyValue<Boolean?>("ReadOnly", value); }
            [ODataProperty]
            public DateTime? ReferenceDate { get => GetPropertyValue<DateTime?>("ReferenceDate"); set => SetPropertyValue<DateTime?>("ReferenceDate", value); }
            [ODataProperty]
            public String? ReferenceDocumentNo { get => GetPropertyValue<String?>("ReferenceDocumentNo"); set => SetPropertyValue<String?>("ReferenceDocumentNo", value); }
            [ODataProperty]
            public DateTime? ReleaseTime { get => GetPropertyValue<DateTime?>("ReleaseTime"); set => SetPropertyValue<DateTime?>("ReleaseTime", value); }
            [ODataProperty]
            public General.DocumentState? State { get => GetPropertyValue<General.DocumentState?>("State"); set => SetPropertyValue<General.DocumentState?>("State", value); }
            [ODataProperty]
            public Boolean? Void { get => GetPropertyValue<Boolean?>("Void"); set => SetPropertyValue<Boolean?>("Void", value); }
            [ODataProperty]
            public String? VoidReason { get => GetPropertyValue<String?>("VoidReason"); set => SetPropertyValue<String?>("VoidReason", value); }
            [ODataProperty]
            public DateTime? VoidTime { get => GetPropertyValue<DateTime?>("VoidTime"); set => SetPropertyValue<DateTime?>("VoidTime", value); }
            [ODataProperty]
            public String? VoidUser { get => GetPropertyValue<String?>("VoidUser"); set => SetPropertyValue<String?>("VoidUser", value); }
            [ODataProperty]
            public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
            [ODataProperty]
            public General.Document? AdjustedDocument { get => GetPropertyValue<General.Document>("AdjustedDocument"); set => SetPropertyValue<General.Document>("AdjustedDocument", value); }
            [ODataProperty]
            public Systems.Security.User? AssignedToUser { get => GetPropertyValue<Systems.Security.User>("AssignedToUser"); set => SetPropertyValue<Systems.Security.User>("AssignedToUser", value); }
            [ODataProperty]
            public General.CurrencyDirectory? CurrencyDirectory { get => GetPropertyValue<General.CurrencyDirectory>("CurrencyDirectory"); set => SetPropertyValue<General.CurrencyDirectory>("CurrencyDirectory", value); }
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
            [ODataProperty]
            public General.Contacts.CompanyDivision? FromCompanyDivision { get => GetPropertyValue<General.Contacts.CompanyDivision>("FromCompanyDivision"); set => SetPropertyValue<General.Contacts.CompanyDivision>("FromCompanyDivision", value); }
            [ODataProperty]
            public General.Contacts.Party? FromParty { get => GetPropertyValue<General.Contacts.Party>("FromParty"); set => SetPropertyValue<General.Contacts.Party>("FromParty", value); }
            [ODataProperty]
            public General.Document? MasterDocument { get => GetPropertyValue<General.Document>("MasterDocument"); set => SetPropertyValue<General.Document>("MasterDocument", value); }
            [ODataProperty]
            public General.Document? Parent { get => GetPropertyValue<General.Document>("Parent"); set => SetPropertyValue<General.Document>("Parent", value); }
            [ODataProperty]
            public General.Document? PrimeCauseDocument { get => GetPropertyValue<General.Document>("PrimeCauseDocument"); set => SetPropertyValue<General.Document>("PrimeCauseDocument", value); }
            [ODataProperty]
            public General.Contacts.Person? ResponsiblePerson { get => GetPropertyValue<General.Contacts.Person>("ResponsiblePerson"); set => SetPropertyValue<General.Contacts.Person>("ResponsiblePerson", value); }
            [ODataProperty]
            public General.Document? ReverseOfDocument { get => GetPropertyValue<General.Document>("ReverseOfDocument"); set => SetPropertyValue<General.Document>("ReverseOfDocument", value); }
            [ODataProperty]
            public Systems.Core.Sequence? Sequence { get => GetPropertyValue<Systems.Core.Sequence>("Sequence"); set => SetPropertyValue<Systems.Core.Sequence>("Sequence", value); }
            [ODataProperty]
            public General.Contacts.CompanyDivision? ToCompanyDivision { get => GetPropertyValue<General.Contacts.CompanyDivision>("ToCompanyDivision"); set => SetPropertyValue<General.Contacts.CompanyDivision>("ToCompanyDivision", value); }
            [ODataProperty]
            public General.Contacts.Party? ToParty { get => GetPropertyValue<General.Contacts.Party>("ToParty"); set => SetPropertyValue<General.Contacts.Party>("ToParty", value); }
            [ODataProperty]
            public General.DocumentTypeUserStatus? UserStatus { get => GetPropertyValue<General.DocumentTypeUserStatus>("UserStatus"); set => SetPropertyValue<General.DocumentTypeUserStatus>("UserStatus", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentAmount>? DocumentAmounts { get => GetCollection<General.DocumentAmount>("DocumentAmounts"); set => SetCollection<General.DocumentAmount>("DocumentAmounts", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentComment>? Comments { get => GetCollection<General.DocumentComment>("Comments"); set => SetCollection<General.DocumentComment>("Comments", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentDistributedAmount>? DistributedAmounts { get => GetCollection<General.DocumentDistributedAmount>("DistributedAmounts"); set => SetCollection<General.DocumentDistributedAmount>("DistributedAmounts", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentFileAttachment>? FileAttachments { get => GetCollection<General.DocumentFileAttachment>("FileAttachments"); set => SetCollection<General.DocumentFileAttachment>("FileAttachments", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentFulfillment>? Fulfillments { get => GetCollection<General.DocumentFulfillment>("Fulfillments"); set => SetCollection<General.DocumentFulfillment>("Fulfillments", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentLineAmount>? LineAmounts { get => GetCollection<General.DocumentLineAmount>("LineAmounts"); set => SetCollection<General.DocumentLineAmount>("LineAmounts", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentParty>? Parties { get => GetCollection<General.DocumentParty>("Parties"); set => SetCollection<General.DocumentParty>("Parties", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentPrint>? Prints { get => GetCollection<General.DocumentPrint>("Prints"); set => SetCollection<General.DocumentPrint>("Prints", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentStateChange>? StateChanges { get => GetCollection<General.DocumentStateChange>("StateChanges"); set => SetCollection<General.DocumentStateChange>("StateChanges", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
            public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
            public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
            public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
            public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
            public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
        }
        [Entity(EntitySet = "General_DocumentAmounts", TableName = "Gen_Document_Amounts")]
        public partial class DocumentAmount: EntityResource
        {
            public DocumentAmount(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentAmounts";
            public const string EntityTableName = "Gen_Document_Amounts";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Amount? BaseAmount { get => GetPropertyValue<Amount?>("BaseAmount"); set => SetPropertyValue<Amount?>("BaseAmount", value); }
            [ODataProperty]
            public Amount? InputAmount { get => GetPropertyValue<Amount?>("InputAmount"); set => SetPropertyValue<Amount?>("InputAmount", value); }
            [ODataProperty]
            public Decimal? InputPercent { get => GetPropertyValue<Decimal?>("InputPercent"); set => SetPropertyValue<Decimal?>("InputPercent", value); }
            [ODataProperty]
            public Amount? InputUnitAmount { get => GetPropertyValue<Amount?>("InputUnitAmount"); set => SetPropertyValue<Amount?>("InputUnitAmount", value); }
            [ODataProperty]
            public Amount? TotalDistributedAmount { get => GetPropertyValue<Amount?>("TotalDistributedAmount"); set => SetPropertyValue<Amount?>("TotalDistributedAmount", value); }
            [ODataProperty]
            public Boolean? UserCanChangeInput { get => GetPropertyValue<Boolean?>("UserCanChangeInput"); set => SetPropertyValue<Boolean?>("UserCanChangeInput", value); }
            [ODataProperty]
            public General.DocumentAmountType? DocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("DocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("DocumentAmountType", value); }
            [Owner]
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            [ODataProperty]
            public General.Currency? InputAmountCurrency { get => GetPropertyValue<General.Currency>("InputAmountCurrency"); set => SetPropertyValue<General.Currency>("InputAmountCurrency", value); }
            [ODataProperty]
            public General.MeasurementUnit? InputUnit { get => GetPropertyValue<General.MeasurementUnit>("InputUnit"); set => SetPropertyValue<General.MeasurementUnit>("InputUnit", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentAmountReferencedDocument>? ReferencedDocuments { get => GetCollection<General.DocumentAmountReferencedDocument>("ReferencedDocuments"); set => SetCollection<General.DocumentAmountReferencedDocument>("ReferencedDocuments", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentAmountReferencedDocuments", TableName = "Gen_Document_Amount_Referenced_Documents")]
        public partial class DocumentAmountReferencedDocument: EntityResource
        {
            public DocumentAmountReferencedDocument(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentAmountReferencedDocuments";
            public const string EntityTableName = "Gen_Document_Amount_Referenced_Documents";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentAmount? DocumentAmount { get => GetPropertyValue<General.DocumentAmount>("DocumentAmount"); set => SetPropertyValue<General.DocumentAmount>("DocumentAmount", value); }
            [ODataProperty]
            public General.Document? ReferencedDocument { get => GetPropertyValue<General.Document>("ReferencedDocument"); set => SetPropertyValue<General.Document>("ReferencedDocument", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentAmountTypes", TableName = "Gen_Document_Amount_Types")]
        public partial class DocumentAmountType: EntityResource
        {
            public DocumentAmountType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentAmountTypes";
            public const string EntityTableName = "Gen_Document_Amount_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? AddToCustomer { get => GetPropertyValue<Boolean?>("AddToCustomer"); set => SetPropertyValue<Boolean?>("AddToCustomer", value); }
            [ODataProperty]
            public Boolean? AddToLine { get => GetPropertyValue<Boolean?>("AddToLine"); set => SetPropertyValue<Boolean?>("AddToLine", value); }
            [ODataProperty]
            public General.DocumentAmountTypesRepository.AllowedDirections? AllowedDirections { get => GetPropertyValue<General.DocumentAmountTypesRepository.AllowedDirections?>("AllowedDirections"); set => SetPropertyValue<General.DocumentAmountTypesRepository.AllowedDirections?>("AllowedDirections", value); }
            [ODataProperty]
            public Boolean? AmountInputAllowed { get => GetPropertyValue<Boolean?>("AmountInputAllowed"); set => SetPropertyValue<Boolean?>("AmountInputAllowed", value); }
            [ODataProperty]
            public String? AmountTypeCode { get => GetPropertyValue<String?>("AmountTypeCode"); set => SetPropertyValue<String?>("AmountTypeCode", value); }
            [ODataProperty]
            public MultilanguageString? AmountTypeName { get => GetPropertyValue<MultilanguageString?>("AmountTypeName"); set => SetPropertyValue<MultilanguageString?>("AmountTypeName", value); }
            [ODataProperty]
            public Boolean? BaseOnLines { get => GetPropertyValue<Boolean?>("BaseOnLines"); set => SetPropertyValue<Boolean?>("BaseOnLines", value); }
            [ODataProperty]
            public Decimal? DefaultPercent { get => GetPropertyValue<Decimal?>("DefaultPercent"); set => SetPropertyValue<Decimal?>("DefaultPercent", value); }
            [ODataProperty]
            public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
            [ODataProperty]
            public General.DocumentAmountTypesRepository.DistributeBy? DistributeBy { get => GetPropertyValue<General.DocumentAmountTypesRepository.DistributeBy?>("DistributeBy"); set => SetPropertyValue<General.DocumentAmountTypesRepository.DistributeBy?>("DistributeBy", value); }
            [ODataProperty]
            public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
            [ODataProperty]
            public Boolean? PercentInputAllowed { get => GetPropertyValue<Boolean?>("PercentInputAllowed"); set => SetPropertyValue<Boolean?>("PercentInputAllowed", value); }
            [ODataProperty]
            public Int32? RoundScale { get => GetPropertyValue<Int32?>("RoundScale"); set => SetPropertyValue<Int32?>("RoundScale", value); }
            [ODataProperty]
            public Boolean? UnitAmountInputAllowed { get => GetPropertyValue<Boolean?>("UnitAmountInputAllowed"); set => SetPropertyValue<Boolean?>("UnitAmountInputAllowed", value); }
            [ODataProperty]
            public General.MeasurementCategory? DistributeByMeasurementCategory { get => GetPropertyValue<General.MeasurementCategory>("DistributeByMeasurementCategory"); set => SetPropertyValue<General.MeasurementCategory>("DistributeByMeasurementCategory", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentAmountTypeDependency>? Dependencies { get => GetCollection<General.DocumentAmountTypeDependency>("Dependencies"); set => SetCollection<General.DocumentAmountTypeDependency>("Dependencies", value); }
            [ODataProperty]
            public IEnumerable<Finance.Intrastat.DocumentAmountTypeSetting>? Settings { get => GetCollection<Finance.Intrastat.DocumentAmountTypeSetting>("Settings"); set => SetCollection<Finance.Intrastat.DocumentAmountTypeSetting>("Settings", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentAmountTypeDependencies", TableName = "Gen_Document_Amount_Type_Dependencies")]
        public partial class DocumentAmountTypeDependency: EntityResource
        {
            public DocumentAmountTypeDependency(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentAmountTypeDependencies";
            public const string EntityTableName = "Gen_Document_Amount_Type_Dependencies";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public General.DocumentAmountType? DependsOnDocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("DependsOnDocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("DependsOnDocumentAmountType", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentAmountType? DocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("DocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("DocumentAmountType", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace DocumentAmountTypesRepository
        {
            public enum AllowedDirections
            {
                AllowAll = 0,
                AllowOnlyPositive = 1,
                AllowOnlyNegative = -1
            }
            public enum DistributeBy
            {
                Amount = 0,
                Measurement = 1,
                ProductDefinition = 2,
                DealType = 3
            }
        }
        [Entity(EntitySet = "General_DocumentComments", TableName = "Gen_Document_Comments")]
        public partial class DocumentComment: EntityResource
        {
            public DocumentComment(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentComments";
            public const string EntityTableName = "Gen_Document_Comments";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Comment { get => GetPropertyValue<String?>("Comment"); set => SetPropertyValue<String?>("Comment", value); }
            [ODataProperty]
            public DateTime? CommentTimestamp { get => GetPropertyValue<DateTime?>("CommentTimestamp"); set => SetPropertyValue<DateTime?>("CommentTimestamp", value); }
            [ODataProperty]
            public Systems.Security.User? AssignToUser { get => GetPropertyValue<Systems.Security.User>("AssignToUser"); set => SetPropertyValue<Systems.Security.User>("AssignToUser", value); }
            [Owner]
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            [ODataProperty]
            public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        public enum DocumentCompletion
        {
            OnlyDocument = 0,
            WithAllChildren = 1,
            WithReleasedChildren = 2
        }
        [Entity(EntitySet = "General_DocumentDistributedAmounts", TableName = "Gen_Document_Distributed_Amounts")]
        public partial class DocumentDistributedAmount: EntityResource
        {
            public DocumentDistributedAmount(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentDistributedAmounts";
            public const string EntityTableName = "Gen_Document_Distributed_Amounts";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Amount? Amount { get => GetPropertyValue<Amount?>("Amount"); set => SetPropertyValue<Amount?>("Amount", value); }
            [ODataProperty]
            public Amount? BaseAmount { get => GetPropertyValue<Amount?>("BaseAmount"); set => SetPropertyValue<Amount?>("BaseAmount", value); }
            [ODataProperty]
            public Guid? DocumentLineId { get => GetPropertyValue<Guid?>("DocumentLineId"); set => SetPropertyValue<Guid?>("DocumentLineId", value); }
            [ODataProperty]
            public General.DocumentAmountType? DocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("DocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("DocumentAmountType", value); }
            [Owner]
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            [ODataProperty]
            public General.Document? ReferencedDocument { get => GetPropertyValue<General.Document>("ReferencedDocument"); set => SetPropertyValue<General.Document>("ReferencedDocument", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentFileAttachments", TableName = "Gen_Document_File_Attachments")]
        public partial class DocumentFileAttachment: EntityResource
        {
            public DocumentFileAttachment(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentFileAttachments";
            public const string EntityTableName = "Gen_Document_File_Attachments";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Byte[]? EmbeddedFileContents { get => GetPropertyValue<Byte[]?>("EmbeddedFileContents"); set => SetPropertyValue<Byte[]?>("EmbeddedFileContents", value); }
            [ODataProperty]
            public String? FileName { get => GetPropertyValue<String?>("FileName"); set => SetPropertyValue<String?>("FileName", value); }
            [ODataProperty]
            public Boolean? IsLinked { get => GetPropertyValue<Boolean?>("IsLinked"); set => SetPropertyValue<Boolean?>("IsLinked", value); }
            [ODataProperty]
            public String? LinkedFilePath { get => GetPropertyValue<String?>("LinkedFilePath"); set => SetPropertyValue<String?>("LinkedFilePath", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [Owner]
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentFulfillments", TableName = "Gen_Document_Fulfillments")]
        public partial class DocumentFulfillment: EntityResource
        {
            public DocumentFulfillment(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentFulfillments";
            public const string EntityTableName = "Gen_Document_Fulfillments";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
            [ODataProperty]
            public String? DestinationEntityName { get => GetPropertyValue<String?>("DestinationEntityName"); set => SetPropertyValue<String?>("DestinationEntityName", value); }
            [ODataProperty]
            public Guid? DocumentLineId { get => GetPropertyValue<Guid?>("DocumentLineId"); set => SetPropertyValue<Guid?>("DocumentLineId", value); }
            [ODataProperty]
            public General.DocumentFulfillmentsRepository.FulfillmentType? FulfillmentType { get => GetPropertyValue<General.DocumentFulfillmentsRepository.FulfillmentType?>("FulfillmentType"); set => SetPropertyValue<General.DocumentFulfillmentsRepository.FulfillmentType?>("FulfillmentType", value); }
            [ODataProperty]
            public Boolean? IsFinal { get => GetPropertyValue<Boolean?>("IsFinal"); set => SetPropertyValue<Boolean?>("IsFinal", value); }
            [ODataProperty]
            public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
            [ODataProperty]
            public String? LineType { get => GetPropertyValue<String?>("LineType"); set => SetPropertyValue<String?>("LineType", value); }
            [ODataProperty]
            public Decimal? QuantityBase { get => GetPropertyValue<Decimal?>("QuantityBase"); set => SetPropertyValue<Decimal?>("QuantityBase", value); }
            [ODataProperty]
            public Decimal? StandardQuantity { get => GetPropertyValue<Decimal?>("StandardQuantity"); set => SetPropertyValue<Decimal?>("StandardQuantity", value); }
            [ODataProperty]
            public Systems.Security.User? CreationUser { get => GetPropertyValue<Systems.Security.User>("CreationUser"); set => SetPropertyValue<Systems.Security.User>("CreationUser", value); }
            [Owner]
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            [ODataProperty]
            public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
            [ODataProperty]
            public General.DocumentFulfillment? ParentFulfillment { get => GetPropertyValue<General.DocumentFulfillment>("ParentFulfillment"); set => SetPropertyValue<General.DocumentFulfillment>("ParentFulfillment", value); }
            [ODataProperty]
            public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
            [ODataProperty]
            public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
            [ODataProperty]
            public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace DocumentFulfillmentsRepository
        {
            public enum FulfillmentType
            {
                Planned = 0,
                Completed = 1
            }
        }
        [Entity(EntitySet = "General_DocumentJobs", TableName = "Gen_Document_Jobs")]
        public partial class DocumentJob: Systems.Core.Job
        {
            public DocumentJob(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public new const string EntitySetName = "General_DocumentJobs";
            public new const string EntityTableName = "Gen_Document_Jobs";
            [ODataProperty]
            public String? FilterXml { get => GetPropertyValue<String?>("FilterXml"); set => SetPropertyValue<String?>("FilterXml", value); }
            [ODataProperty]
            public General.DocumentState? NewState { get => GetPropertyValue<General.DocumentState?>("NewState"); set => SetPropertyValue<General.DocumentState?>("NewState", value); }
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            [ODataProperty]
            public General.DocumentTypeUserStatus? NewUserStatus { get => GetPropertyValue<General.DocumentTypeUserStatus>("NewUserStatus"); set => SetPropertyValue<General.DocumentTypeUserStatus>("NewUserStatus", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentLineAmounts", TableName = "Gen_Document_Line_Amounts")]
        public partial class DocumentLineAmount: EntityResource
        {
            public DocumentLineAmount(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentLineAmounts";
            public const string EntityTableName = "Gen_Document_Line_Amounts";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Guid? DocumentLineId { get => GetPropertyValue<Guid?>("DocumentLineId"); set => SetPropertyValue<Guid?>("DocumentLineId", value); }
            [ODataProperty]
            public Decimal? LinePercent { get => GetPropertyValue<Decimal?>("LinePercent"); set => SetPropertyValue<Decimal?>("LinePercent", value); }
            [ODataProperty]
            public General.DocumentAmountType? DocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("DocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("DocumentAmountType", value); }
            [Owner]
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            [ODataProperty]
            public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
            [ODataProperty]
            public General.Document? ReferencedDocument { get => GetPropertyValue<General.Document>("ReferencedDocument"); set => SetPropertyValue<General.Document>("ReferencedDocument", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentLinks", TableName = "Gen_Document_Links")]
        public partial class DocumentLink: EntityResource
        {
            public DocumentLink(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentLinks";
            public const string EntityTableName = "Gen_Document_Links";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentManualDistributedAmounts", TableName = "Gen_Document_Manual_Distributed_Amounts")]
        public partial class DocumentManualDistributedAmount: EntityResource
        {
            public DocumentManualDistributedAmount(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentManualDistributedAmounts";
            public const string EntityTableName = "Gen_Document_Manual_Distributed_Amounts";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Guid? DocumentAmountTypeId { get => GetPropertyValue<Guid?>("DocumentAmountTypeId"); set => SetPropertyValue<Guid?>("DocumentAmountTypeId", value); }
            [ODataProperty]
            public Guid? DocumentId { get => GetPropertyValue<Guid?>("DocumentId"); set => SetPropertyValue<Guid?>("DocumentId", value); }
            [ODataProperty]
            public Guid? DocumentLineId { get => GetPropertyValue<Guid?>("DocumentLineId"); set => SetPropertyValue<Guid?>("DocumentLineId", value); }
            [ODataProperty]
            public Decimal? LinePercent { get => GetPropertyValue<Decimal?>("LinePercent"); set => SetPropertyValue<Decimal?>("LinePercent", value); }
            [ODataProperty]
            public Guid? ProductId { get => GetPropertyValue<Guid?>("ProductId"); set => SetPropertyValue<Guid?>("ProductId", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentParties", TableName = "Gen_Document_Parties")]
        public partial class DocumentParty: EntityResource
        {
            public DocumentParty(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentParties";
            public const string EntityTableName = "Gen_Document_Parties";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [Owner]
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            [ODataProperty]
            public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
            [ODataProperty]
            public General.DocumentPartyRole? Role { get => GetPropertyValue<General.DocumentPartyRole>("Role"); set => SetPropertyValue<General.DocumentPartyRole>("Role", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentPartyRoles", TableName = "Gen_Document_Party_Roles")]
        public partial class DocumentPartyRole: EntityResource
        {
            public DocumentPartyRole(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentPartyRoles";
            public const string EntityTableName = "Gen_Document_Party_Roles";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentPrints", TableName = "Gen_Document_Prints")]
        public partial class DocumentPrint: EntityResource
        {
            public DocumentPrint(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentPrints";
            public const string EntityTableName = "Gen_Document_Prints";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? AdditionalData { get => GetPropertyValue<String?>("AdditionalData"); set => SetPropertyValue<String?>("AdditionalData", value); }
            [ODataProperty]
            public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
            [ODataProperty]
            public Boolean? IsOriginal { get => GetPropertyValue<Boolean?>("IsOriginal"); set => SetPropertyValue<Boolean?>("IsOriginal", value); }
            [ODataProperty]
            public DateTime? PrintTime { get => GetPropertyValue<DateTime?>("PrintTime"); set => SetPropertyValue<DateTime?>("PrintTime", value); }
            [ODataProperty]
            public String? PrintUser { get => GetPropertyValue<String?>("PrintUser"); set => SetPropertyValue<String?>("PrintUser", value); }
            [ODataProperty]
            public General.DocumentPrintsRepository.PrintoutType? PrintoutType { get => GetPropertyValue<General.DocumentPrintsRepository.PrintoutType?>("PrintoutType"); set => SetPropertyValue<General.DocumentPrintsRepository.PrintoutType?>("PrintoutType", value); }
            [ODataProperty]
            public String? ReferenceNo { get => GetPropertyValue<String?>("ReferenceNo"); set => SetPropertyValue<String?>("ReferenceNo", value); }
            [Owner]
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            [ODataProperty]
            public General.DocumentPrintImage? DocumentPrintImage { get => GetPropertyValue<General.DocumentPrintImage>("DocumentPrintImage"); set => SetPropertyValue<General.DocumentPrintImage>("DocumentPrintImage", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentPrintImages", TableName = "Gen_Document_Print_Images")]
        public partial class DocumentPrintImage: EntityResource
        {
            public DocumentPrintImage(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentPrintImages";
            public const string EntityTableName = "Gen_Document_Print_Images";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Byte[]? PrintImage { get => GetPropertyValue<Byte[]?>("PrintImage"); set => SetPropertyValue<Byte[]?>("PrintImage", value); }
            [ODataProperty]
            public String? PrintImageFormat { get => GetPropertyValue<String?>("PrintImageFormat"); set => SetPropertyValue<String?>("PrintImageFormat", value); }
            [ODataProperty]
            public General.PrintoutLayout? PrintoutLayout { get => GetPropertyValue<General.PrintoutLayout>("PrintoutLayout"); set => SetPropertyValue<General.PrintoutLayout>("PrintoutLayout", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace DocumentPrintsRepository
        {
            public enum PrintoutType
            {
                PhysicalPrinterPrintout = 0,
                FiscalPrinterPrintout = 1,
                Export = 2,
                UserDownload = 3
            }
        }
        namespace DocumentsRepositoryBase
        {
            public enum VoidType
            {
                VoidDocument = 0,
                VoidWithSubDocuments = 1,
                VoidWithReleasedSubDocuments = 2
            }
        }
        public enum DocumentState
        {
            New = 0,
            Adjustment = 5,
            Planned = 10,
            FirmPlanned = 20,
            Released = 30,
            Completed = 40,
            Closed = 50
        }
        [Entity(EntitySet = "General_DocumentStateChanges", TableName = "Gen_Document_State_Changes")]
        public partial class DocumentStateChange: EntityResource
        {
            public DocumentStateChange(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentStateChanges";
            public const string EntityTableName = "Gen_Document_State_Changes";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public General.DocumentStateChangesRepository.NewState? NewState { get => GetPropertyValue<General.DocumentStateChangesRepository.NewState?>("NewState"); set => SetPropertyValue<General.DocumentStateChangesRepository.NewState?>("NewState", value); }
            [ODataProperty]
            public Boolean? SystemInitiated { get => GetPropertyValue<Boolean?>("SystemInitiated"); set => SetPropertyValue<Boolean?>("SystemInitiated", value); }
            [ODataProperty]
            public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
            [ODataProperty]
            public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
            [ODataProperty]
            public Boolean? Void { get => GetPropertyValue<Boolean?>("Void"); set => SetPropertyValue<Boolean?>("Void", value); }
            [Owner]
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            [ODataProperty]
            public General.DocumentTypeUserStatus? UserStatus { get => GetPropertyValue<General.DocumentTypeUserStatus>("UserStatus"); set => SetPropertyValue<General.DocumentTypeUserStatus>("UserStatus", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace DocumentStateChangesRepository
        {
            public enum NewState
            {
                New = 0,
                Corrective = 5,
                Planned = 10,
                FirmPlanned = 20,
                Released = 30,
                Completed = 40,
                Closed = 50
            }
        }
        public enum DocumentStateFlags
        {
            New = 1,
            Planned = 2,
            FirmPlanned = 4,
            Released = 8,
            Completed = 16,
            Adjustment = 32,
            Closed = 64
        }
        [Entity(EntitySet = "General_DocumentTypes", TableName = "Gen_Document_Types")]
        public partial class DocumentType: EntityResource
        {
            public DocumentType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentTypes";
            public const string EntityTableName = "Gen_Document_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public Boolean? CreateFulfillmentsOnCompletion { get => GetPropertyValue<Boolean?>("CreateFulfillmentsOnCompletion"); set => SetPropertyValue<Boolean?>("CreateFulfillmentsOnCompletion", value); }
            [ODataProperty]
            public Boolean? CreateManully { get => GetPropertyValue<Boolean?>("CreateManully"); set => SetPropertyValue<Boolean?>("CreateManully", value); }
            [ODataProperty]
            public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
            [ODataProperty]
            public Boolean? DisallowOppositeValuesGeneration { get => GetPropertyValue<Boolean?>("DisallowOppositeValuesGeneration"); set => SetPropertyValue<Boolean?>("DisallowOppositeValuesGeneration", value); }
            [ODataProperty]
            public String? EntityName { get => GetPropertyValue<String?>("EntityName"); set => SetPropertyValue<String?>("EntityName", value); }
            [ODataProperty]
            public Boolean? GenerateSingleDocument { get => GetPropertyValue<Boolean?>("GenerateSingleDocument"); set => SetPropertyValue<Boolean?>("GenerateSingleDocument", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public String? SchemaXML { get => GetPropertyValue<String?>("SchemaXML"); set => SetPropertyValue<String?>("SchemaXML", value); }
            [ODataProperty]
            public Boolean? TransitionalDocument { get => GetPropertyValue<Boolean?>("TransitionalDocument"); set => SetPropertyValue<Boolean?>("TransitionalDocument", value); }
            [ODataProperty]
            public MultilanguageString? TypeName { get => GetPropertyValue<MultilanguageString?>("TypeName"); set => SetPropertyValue<MultilanguageString?>("TypeName", value); }
            [ODataProperty]
            public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
            [ODataProperty]
            public Systems.Core.Sequence? Sequence { get => GetPropertyValue<Systems.Core.Sequence>("Sequence"); set => SetPropertyValue<Systems.Core.Sequence>("Sequence", value); }
            [ODataProperty]
            public IEnumerable<Crm.Sales.DefaultSalesOrderDocumentProperty>? DefaultSalesOrderDocumentProperties { get => GetCollection<Crm.Sales.DefaultSalesOrderDocumentProperty>("DefaultSalesOrderDocumentProperties"); set => SetCollection<Crm.Sales.DefaultSalesOrderDocumentProperty>("DefaultSalesOrderDocumentProperties", value); }
            [ODataProperty]
            public IEnumerable<Crm.Sales.DefaultSalesOrderPaymentPlan>? DefaultSalesOrderPaymentPlans { get => GetCollection<Crm.Sales.DefaultSalesOrderPaymentPlan>("DefaultSalesOrderPaymentPlans"); set => SetCollection<Crm.Sales.DefaultSalesOrderPaymentPlan>("DefaultSalesOrderPaymentPlans", value); }
            [ODataProperty]
            public IEnumerable<Crm.Sales.DocumentTypePaymentOption>? PaymentOptions { get => GetCollection<Crm.Sales.DocumentTypePaymentOption>("PaymentOptions"); set => SetCollection<Crm.Sales.DocumentTypePaymentOption>("PaymentOptions", value); }
            [ODataProperty]
            public IEnumerable<Crm.Invoicing.InvoicesOption>? InvoicesOptions { get => GetCollection<Crm.Invoicing.InvoicesOption>("InvoicesOptions"); set => SetCollection<Crm.Invoicing.InvoicesOption>("InvoicesOptions", value); }
            [ODataProperty]
            public IEnumerable<Crm.Presales.OffersOption>? OffersOptions { get => GetCollection<Crm.Presales.OffersOption>("OffersOptions"); set => SetCollection<Crm.Presales.OffersOption>("OffersOptions", value); }
            [ODataProperty]
            public IEnumerable<Crm.Sales.SalesOrdersOption>? SalesOrdersOptions { get => GetCollection<Crm.Sales.SalesOrdersOption>("SalesOrdersOptions"); set => SetCollection<Crm.Sales.SalesOrdersOption>("SalesOrdersOptions", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentTypeAmount>? Amounts { get => GetCollection<General.DocumentTypeAmount>("Amounts"); set => SetCollection<General.DocumentTypeAmount>("Amounts", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentTypeEnterpriseCompany>? EnterpriseCompanies { get => GetCollection<General.DocumentTypeEnterpriseCompany>("EnterpriseCompanies"); set => SetCollection<General.DocumentTypeEnterpriseCompany>("EnterpriseCompanies", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentTypeNotification>? Notifications { get => GetCollection<General.DocumentTypeNotification>("Notifications"); set => SetCollection<General.DocumentTypeNotification>("Notifications", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentTypeProperty>? DocumentTypeProperties { get => GetCollection<General.DocumentTypeProperty>("DocumentTypeProperties"); set => SetCollection<General.DocumentTypeProperty>("DocumentTypeProperties", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentTypeSecurityCondition>? SecurityConditions { get => GetCollection<General.DocumentTypeSecurityCondition>("SecurityConditions"); set => SetCollection<General.DocumentTypeSecurityCondition>("SecurityConditions", value); }
            [ODataProperty]
            public IEnumerable<General.DocumentTypeUserStatus>? UserStatuses { get => GetCollection<General.DocumentTypeUserStatus>("UserStatuses"); set => SetCollection<General.DocumentTypeUserStatus>("UserStatuses", value); }
            [ODataProperty]
            public IEnumerable<General.Printout>? Printouts { get => GetCollection<General.Printout>("Printouts"); set => SetCollection<General.Printout>("Printouts", value); }
            [ODataProperty]
            public IEnumerable<Logistics.Inventory.CostCorrectionsOption>? CostCorrectionsOptions { get => GetCollection<Logistics.Inventory.CostCorrectionsOption>("CostCorrectionsOptions"); set => SetCollection<Logistics.Inventory.CostCorrectionsOption>("CostCorrectionsOptions", value); }
            [ODataProperty]
            public IEnumerable<Logistics.Inventory.TransferOrdersOption>? TransferOrdersOptions { get => GetCollection<Logistics.Inventory.TransferOrdersOption>("TransferOrdersOptions"); set => SetCollection<Logistics.Inventory.TransferOrdersOption>("TransferOrdersOptions", value); }
            [ODataProperty]
            public IEnumerable<Production.WorkOrderDocumentTypesOption>? WorkOrderDocumentTypesOptions { get => GetCollection<Production.WorkOrderDocumentTypesOption>("WorkOrderDocumentTypesOptions"); set => SetCollection<Production.WorkOrderDocumentTypesOption>("WorkOrderDocumentTypesOptions", value); }
            [ODataProperty]
            public IEnumerable<Logistics.Procurement.PurchaseInvoicesOption>? PurchaseInvoicesOptions { get => GetCollection<Logistics.Procurement.PurchaseInvoicesOption>("PurchaseInvoicesOptions"); set => SetCollection<Logistics.Procurement.PurchaseInvoicesOption>("PurchaseInvoicesOptions", value); }
            [ODataProperty]
            public IEnumerable<Systems.Workflow.Route>? Routes { get => GetCollection<Systems.Workflow.Route>("Routes"); set => SetCollection<Systems.Workflow.Route>("Routes", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentTypeAmounts", TableName = "Gen_Document_Type_Amounts")]
        public partial class DocumentTypeAmount: EntityResource
        {
            public DocumentTypeAmount(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentTypeAmounts";
            public const string EntityTableName = "Gen_Document_Type_Amounts";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Decimal? DefaultPercent { get => GetPropertyValue<Decimal?>("DefaultPercent"); set => SetPropertyValue<Decimal?>("DefaultPercent", value); }
            [ODataProperty]
            public DateTime? RequiredFromDate { get => GetPropertyValue<DateTime?>("RequiredFromDate"); set => SetPropertyValue<DateTime?>("RequiredFromDate", value); }
            [ODataProperty]
            public DateTime? RequiredThruDate { get => GetPropertyValue<DateTime?>("RequiredThruDate"); set => SetPropertyValue<DateTime?>("RequiredThruDate", value); }
            [ODataProperty]
            public Boolean? UserCanChangeInput { get => GetPropertyValue<Boolean?>("UserCanChangeInput"); set => SetPropertyValue<Boolean?>("UserCanChangeInput", value); }
            [ODataProperty]
            public General.DocumentAmountType? DocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("DocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("DocumentAmountType", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentTypeEnterpriseCompanies", TableName = "Gen_Document_Type_Enterprise_Companies")]
        public partial class DocumentTypeEnterpriseCompany: EntityResource
        {
            public DocumentTypeEnterpriseCompany(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentTypeEnterpriseCompanies";
            public const string EntityTableName = "Gen_Document_Type_Enterprise_Companies";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentTypeNotifications", TableName = "Gen_Document_Type_Notifications")]
        public partial class DocumentTypeNotification: EntityResource
        {
            public DocumentTypeNotification(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentTypeNotifications";
            public const string EntityTableName = "Gen_Document_Type_Notifications";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? DocumentEvent { get => GetPropertyValue<String?>("DocumentEvent"); set => SetPropertyValue<String?>("DocumentEvent", value); }
            [ODataProperty]
            public String? FilterXML { get => GetPropertyValue<String?>("FilterXML"); set => SetPropertyValue<String?>("FilterXML", value); }
            [ODataProperty]
            public Int32? StateBitMask { get => GetPropertyValue<Int32?>("StateBitMask"); set => SetPropertyValue<Int32?>("StateBitMask", value); }
            [ODataProperty]
            public General.DocumentTypeNotificationsRepository.StatusChangeDirection? StatusChangeDirection { get => GetPropertyValue<General.DocumentTypeNotificationsRepository.StatusChangeDirection?>("StatusChangeDirection"); set => SetPropertyValue<General.DocumentTypeNotificationsRepository.StatusChangeDirection?>("StatusChangeDirection", value); }
            [ODataProperty]
            public String? ToEmailAddressList { get => GetPropertyValue<String?>("ToEmailAddressList"); set => SetPropertyValue<String?>("ToEmailAddressList", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            [ODataProperty]
            public General.DocumentTypeUserStatus? UserStatus { get => GetPropertyValue<General.DocumentTypeUserStatus>("UserStatus"); set => SetPropertyValue<General.DocumentTypeUserStatus>("UserStatus", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace DocumentTypeNotificationsRepository
        {
            public enum StatusChangeDirection
            {
                AnyChange = 0,
                NoChange = 1,
                PositiveChange = 2,
                NegativeChange = 3
            }
        }
        [Entity(EntitySet = "General_DocumentTypeProperties", TableName = "Gen_Document_Type_Properties")]
        public partial class DocumentTypeProperty: EntityResource
        {
            public DocumentTypeProperty(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentTypeProperties";
            public const string EntityTableName = "Gen_Document_Type_Properties";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? DefaultPropertyValue { get => GetPropertyValue<String?>("DefaultPropertyValue"); set => SetPropertyValue<String?>("DefaultPropertyValue", value); }
            [ODataProperty]
            public MultilanguageString? DefaultPropertyValueDescription { get => GetPropertyValue<MultilanguageString?>("DefaultPropertyValueDescription"); set => SetPropertyValue<MultilanguageString?>("DefaultPropertyValueDescription", value); }
            [ODataProperty]
            public Guid? DefaultValueId { get => GetPropertyValue<Guid?>("DefaultValueId"); set => SetPropertyValue<Guid?>("DefaultValueId", value); }
            [ODataProperty]
            public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
            [ODataProperty]
            public Boolean? Required { get => GetPropertyValue<Boolean?>("Required"); set => SetPropertyValue<Boolean?>("Required", value); }
            [ODataProperty]
            public DateTime? RequiredFromDate { get => GetPropertyValue<DateTime?>("RequiredFromDate"); set => SetPropertyValue<DateTime?>("RequiredFromDate", value); }
            [ODataProperty]
            public DateTime? RequiredThruDate { get => GetPropertyValue<DateTime?>("RequiredThruDate"); set => SetPropertyValue<DateTime?>("RequiredThruDate", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentTypeSecurityConditions", TableName = "Gen_Document_Type_Security_Conditions")]
        public partial class DocumentTypeSecurityCondition: EntityResource
        {
            public DocumentTypeSecurityCondition(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentTypeSecurityConditions";
            public const string EntityTableName = "Gen_Document_Type_Security_Conditions";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? ConditionFilterXml { get => GetPropertyValue<String?>("ConditionFilterXml"); set => SetPropertyValue<String?>("ConditionFilterXml", value); }
            [ODataProperty]
            public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
            [ODataProperty]
            public General.Priority? Priority { get => GetPropertyValue<General.Priority?>("Priority"); set => SetPropertyValue<General.Priority?>("Priority", value); }
            [ODataProperty]
            public Systems.Security.AccessKey? DocumentAccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("DocumentAccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("DocumentAccessKey", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentTypeUserStatuses", TableName = "Gen_Document_Type_User_Statuses")]
        public partial class DocumentTypeUserStatus: EntityResource
        {
            public DocumentTypeUserStatus(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentTypeUserStatuses";
            public const string EntityTableName = "Gen_Document_Type_User_Statuses";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
            [ODataProperty]
            public Int32? DisplayOrder { get => GetPropertyValue<Int32?>("DisplayOrder"); set => SetPropertyValue<Int32?>("DisplayOrder", value); }
            [ODataProperty]
            public String? Instructions { get => GetPropertyValue<String?>("Instructions"); set => SetPropertyValue<String?>("Instructions", value); }
            [ODataProperty]
            public Boolean? IsExitStatus { get => GetPropertyValue<Boolean?>("IsExitStatus"); set => SetPropertyValue<Boolean?>("IsExitStatus", value); }
            [ODataProperty]
            public General.DocumentState? State { get => GetPropertyValue<General.DocumentState?>("State"); set => SetPropertyValue<General.DocumentState?>("State", value); }
            [ODataProperty]
            public String? UserStatusName { get => GetPropertyValue<String?>("UserStatusName"); set => SetPropertyValue<String?>("UserStatusName", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_DocumentVersions", TableName = "Gen_Document_Versions")]
        public partial class DocumentVersion: EntityResource
        {
            public DocumentVersion(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_DocumentVersions";
            public const string EntityTableName = "Gen_Document_Versions";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Byte[]? DocumentData { get => GetPropertyValue<Byte[]?>("DocumentData"); set => SetPropertyValue<Byte[]?>("DocumentData", value); }
            [ODataProperty]
            public String? DocumentDataFormat { get => GetPropertyValue<String?>("DocumentDataFormat"); set => SetPropertyValue<String?>("DocumentDataFormat", value); }
            [ODataProperty]
            public String? DocumentDataXML { get => GetPropertyValue<String?>("DocumentDataXML"); set => SetPropertyValue<String?>("DocumentDataXML", value); }
            [ODataProperty]
            public General.DocumentVersionsRepository.State? State { get => GetPropertyValue<General.DocumentVersionsRepository.State?>("State"); set => SetPropertyValue<General.DocumentVersionsRepository.State?>("State", value); }
            [ODataProperty]
            public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
            [ODataProperty]
            public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
            [ODataProperty]
            public Int32? Version { get => GetPropertyValue<Int32?>("Version"); set => SetPropertyValue<Int32?>("Version", value); }
            [ODataProperty]
            public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace DocumentVersionsRepository
        {
            public enum State
            {
                New = 0,
                Adjustment = 5,
                Planned = 10,
                FirmPlanned = 20,
                Released = 30,
                Completed = 40,
                Closed = 50
            }
        }
        namespace EnterpriseCompaniesRepository
        {
            public enum DefaultCostingMethod
            {
                AverageCost = 0,
                ExplicitlySpecifyLot = 1,
                SetByBlockedForDocument = 2
            }
            public enum DefaultLanguage
            {
                Bulgarian = 0,
                English = 1
            }
        }
        [Entity(EntitySet = "General_EnterpriseCompanies", TableName = "Gen_Enterprise_Companies")]
        public partial class EnterpriseCompany: EntityResource
        {
            public EnterpriseCompany(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_EnterpriseCompanies";
            public const string EntityTableName = "Gen_Enterprise_Companies";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? BIStartDate { get => GetPropertyValue<DateTime?>("BIStartDate"); set => SetPropertyValue<DateTime?>("BIStartDate", value); }
            [ODataProperty]
            public General.EnterpriseCompaniesRepository.DefaultCostingMethod? DefaultCostingMethod { get => GetPropertyValue<General.EnterpriseCompaniesRepository.DefaultCostingMethod?>("DefaultCostingMethod"); set => SetPropertyValue<General.EnterpriseCompaniesRepository.DefaultCostingMethod?>("DefaultCostingMethod", value); }
            [ODataProperty]
            public Amount? DefaultCustomerCreditLimitBase { get => GetPropertyValue<Amount?>("DefaultCustomerCreditLimitBase"); set => SetPropertyValue<Amount?>("DefaultCustomerCreditLimitBase", value); }
            [ODataProperty]
            public General.EnterpriseCompaniesRepository.DefaultLanguage? DefaultLanguage { get => GetPropertyValue<General.EnterpriseCompaniesRepository.DefaultLanguage?>("DefaultLanguage"); set => SetPropertyValue<General.EnterpriseCompaniesRepository.DefaultLanguage?>("DefaultLanguage", value); }
            [ODataProperty]
            public DateTime? EditPeriodStartDate { get => GetPropertyValue<DateTime?>("EditPeriodStartDate"); set => SetPropertyValue<DateTime?>("EditPeriodStartDate", value); }
            [ODataProperty]
            public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
            [ODataProperty]
            public Int32? PrintImagesRetentionMonths { get => GetPropertyValue<Int32?>("PrintImagesRetentionMonths"); set => SetPropertyValue<Int32?>("PrintImagesRetentionMonths", value); }
            [ODataProperty]
            public Int32? UIBaseColor { get => GetPropertyValue<Int32?>("UIBaseColor"); set => SetPropertyValue<Int32?>("UIBaseColor", value); }
            [ODataProperty]
            public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
            [ODataProperty]
            public General.Products.Product? AdvanceProduct { get => GetPropertyValue<General.Products.Product>("AdvanceProduct"); set => SetPropertyValue<General.Products.Product>("AdvanceProduct", value); }
            [ODataProperty]
            public General.Currency? BaseCurrency { get => GetPropertyValue<General.Currency>("BaseCurrency"); set => SetPropertyValue<General.Currency>("BaseCurrency", value); }
            [ODataProperty]
            public General.Contacts.Company? Company { get => GetPropertyValue<General.Contacts.Company>("Company"); set => SetPropertyValue<General.Contacts.Company>("Company", value); }
            [ODataProperty]
            public Finance.Accounting.Account? ExchangeDifferenceCreditAccount { get => GetPropertyValue<Finance.Accounting.Account>("ExchangeDifferenceCreditAccount"); set => SetPropertyValue<Finance.Accounting.Account>("ExchangeDifferenceCreditAccount", value); }
            [ODataProperty]
            public Finance.Accounting.Account? ExchangeDifferenceDebitAccount { get => GetPropertyValue<Finance.Accounting.Account>("ExchangeDifferenceDebitAccount"); set => SetPropertyValue<Finance.Accounting.Account>("ExchangeDifferenceDebitAccount", value); }
            [ODataProperty]
            public General.DocumentAmountType? VATDocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("VATDocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("VATDocumentAmountType", value); }
            [ODataProperty]
            public IEnumerable<Applications.Fleet.Crew>? Crews { get => GetCollection<Applications.Fleet.Crew>("Crews"); set => SetCollection<Applications.Fleet.Crew>("Crews", value); }
            [ODataProperty]
            public IEnumerable<Applications.Fleet.VehicleSet>? VehicleSets { get => GetCollection<Applications.Fleet.VehicleSet>("VehicleSets"); set => SetCollection<Applications.Fleet.VehicleSet>("VehicleSets", value); }
            [ODataProperty]
            public IEnumerable<General.Geography.MapPoint>? MapPoints { get => GetCollection<General.Geography.MapPoint>("MapPoints"); set => SetCollection<General.Geography.MapPoint>("MapPoints", value); }
            [ODataProperty]
            public IEnumerable<Finance.Vat.BGVATDeclaringPerson>? BGVATDeclaringPersons { get => GetCollection<Finance.Vat.BGVATDeclaringPerson>("BGVATDeclaringPersons"); set => SetCollection<Finance.Vat.BGVATDeclaringPerson>("BGVATDeclaringPersons", value); }
            [ODataProperty]
            public IEnumerable<Projects.Resource>? Resources { get => GetCollection<Projects.Resource>("Resources"); set => SetCollection<Projects.Resource>("Resources", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_Folders", TableName = "Gen_Folders")]
        public partial class Folder: EntityResource
        {
            public Folder(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_Folders";
            public const string EntityTableName = "Gen_Folders";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
            [ODataProperty]
            public General.Folder? Parent { get => GetPropertyValue<General.Folder>("Parent"); set => SetPropertyValue<General.Folder>("Parent", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace Geography
        {
            [Entity(EntitySet = "General_Geography_AdministrativeRegions", TableName = "Gen_Administrative_Regions")]
            public partial class AdministrativeRegion: EntityResource
            {
                public AdministrativeRegion(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Geography_AdministrativeRegions";
                public const string EntityTableName = "Gen_Administrative_Regions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? ParentFullPath { get => GetPropertyValue<String?>("ParentFullPath"); set => SetPropertyValue<String?>("ParentFullPath", value); }
                [ODataProperty]
                public DateTime? ValidFrom { get => GetPropertyValue<DateTime?>("ValidFrom"); set => SetPropertyValue<DateTime?>("ValidFrom", value); }
                [ODataProperty]
                public DateTime? ValidTo { get => GetPropertyValue<DateTime?>("ValidTo"); set => SetPropertyValue<DateTime?>("ValidTo", value); }
                [ODataProperty]
                public General.Geography.Country? Country { get => GetPropertyValue<General.Geography.Country>("Country"); set => SetPropertyValue<General.Geography.Country>("Country", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Geography_Areas", TableName = "Gen_Areas")]
            public partial class Area: EntityResource
            {
                public Area(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Geography_Areas";
                public const string EntityTableName = "Gen_Areas";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public General.Geography.Area? Parent { get => GetPropertyValue<General.Geography.Area>("Parent"); set => SetPropertyValue<General.Geography.Area>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Geography_Countries", TableName = "Gen_Countries")]
            public partial class Country: EntityResource
            {
                public Country(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Geography_Countries";
                public const string EntityTableName = "Gen_Countries";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? IntrastatCode { get => GetPropertyValue<String?>("IntrastatCode"); set => SetPropertyValue<String?>("IntrastatCode", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Geography_GeoPoints", TableName = "Gen_Geo_Points")]
            public partial class GeoPoint: EntityResource
            {
                public GeoPoint(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Geography_GeoPoints";
                public const string EntityTableName = "Gen_Geo_Points";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Address { get => GetPropertyValue<String?>("Address"); set => SetPropertyValue<String?>("Address", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Decimal? Latitude { get => GetPropertyValue<Decimal?>("Latitude"); set => SetPropertyValue<Decimal?>("Latitude", value); }
                [ODataProperty]
                public Decimal? Longitude { get => GetPropertyValue<Decimal?>("Longitude"); set => SetPropertyValue<Decimal?>("Longitude", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Geography_MapPoints", TableName = "Geo_Map_Points")]
            public partial class MapPoint: EntityResource
            {
                public MapPoint(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Geography_MapPoints";
                public const string EntityTableName = "Geo_Map_Points";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Address { get => GetPropertyValue<String?>("Address"); set => SetPropertyValue<String?>("Address", value); }
                [ODataProperty]
                public Decimal? Latitude { get => GetPropertyValue<Decimal?>("Latitude"); set => SetPropertyValue<Decimal?>("Latitude", value); }
                [ODataProperty]
                public Decimal? Longitude { get => GetPropertyValue<Decimal?>("Longitude"); set => SetPropertyValue<Decimal?>("Longitude", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [Owner]
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        [Entity(EntitySet = "General_LinkTypes", TableName = "Gen_Link_Types")]
        public partial class LinkType: EntityResource
        {
            public LinkType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_LinkTypes";
            public const string EntityTableName = "Gen_Link_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Guid? FromDocTypeId { get => GetPropertyValue<Guid?>("FromDocTypeId"); set => SetPropertyValue<Guid?>("FromDocTypeId", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public Guid? ToDocTypeId { get => GetPropertyValue<Guid?>("ToDocTypeId"); set => SetPropertyValue<Guid?>("ToDocTypeId", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_MeasurementCategories", TableName = "Gen_Measurement_Categories")]
        public partial class MeasurementCategory: EntityResource
        {
            public MeasurementCategory(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_MeasurementCategories";
            public const string EntityTableName = "Gen_Measurement_Categories";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            [ODataProperty]
            public IEnumerable<General.MeasurementUnit>? MeasurementUnits { get => GetCollection<General.MeasurementUnit>("MeasurementUnits"); set => SetCollection<General.MeasurementUnit>("MeasurementUnits", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_MeasurementUnits", TableName = "Gen_Measurement_Units")]
        public partial class MeasurementUnit: EntityResource
        {
            public MeasurementUnit(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_MeasurementUnits";
            public const string EntityTableName = "Gen_Measurement_Units";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
            [ODataProperty]
            public Decimal? Divisor { get => GetPropertyValue<Decimal?>("Divisor"); set => SetPropertyValue<Decimal?>("Divisor", value); }
            [ODataProperty]
            public Boolean? IsDefaultUnit { get => GetPropertyValue<Boolean?>("IsDefaultUnit"); set => SetPropertyValue<Boolean?>("IsDefaultUnit", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            [ODataProperty]
            public Decimal? Multiplier { get => GetPropertyValue<Decimal?>("Multiplier"); set => SetPropertyValue<Decimal?>("Multiplier", value); }
            [ODataProperty]
            public General.MeasurementUnitsRepository.SystemUnit? SystemUnit { get => GetPropertyValue<General.MeasurementUnitsRepository.SystemUnit?>("SystemUnit"); set => SetPropertyValue<General.MeasurementUnitsRepository.SystemUnit?>("SystemUnit", value); }
            [Owner]
            [ODataProperty]
            public General.MeasurementCategory? MeasurementCategory { get => GetPropertyValue<General.MeasurementCategory>("MeasurementCategory"); set => SetPropertyValue<General.MeasurementCategory>("MeasurementCategory", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace MeasurementUnitsRepository
        {
            public enum SystemUnit
            {
                GrossKilograms = 0,
                HeightMeters = 1,
                LengthMeters = 2,
                NetKilograms = 3,
                Pieces = 4,
                VolumeLiters = 5,
                WidthMeters = 6,
                TimeHours = 7
            }
        }
        public enum ParentDocumentRelationshipType
        {
            Subtask = 0,
            NextTask = 1,
            IndependentTask = 2
        }
        [Entity(EntitySet = "General_PartyApplicableLegislations", TableName = "Gen_Party_Applicable_Legislations")]
        public partial class PartyApplicableLegislation: EntityResource
        {
            public PartyApplicableLegislation(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_PartyApplicableLegislations";
            public const string EntityTableName = "Gen_Party_Applicable_Legislations";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public General.PartyApplicableLegislationsRepository.ApplicableLegislation? ApplicableLegislation { get => GetPropertyValue<General.PartyApplicableLegislationsRepository.ApplicableLegislation?>("ApplicableLegislation"); set => SetPropertyValue<General.PartyApplicableLegislationsRepository.ApplicableLegislation?>("ApplicableLegislation", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [Owner]
            [ODataProperty]
            public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace PartyApplicableLegislationsRepository
        {
            public enum ApplicableLegislation
            {
                UnitedArabEmirates = 0,
                Australia = 1,
                Bulgaria = 2,
                Canada = 3,
                China = 4,
                CzechRepublic = 5,
                Germany = 6,
                Spain = 7,
                EuropeanUnion = 8,
                France = 9,
                Greece = 10,
                Hungary = 11,
                India = 12,
                Italy = 13,
                Japan = 14,
                Macedonia = 15,
                Poland = 16,
                Portugal = 17,
                Romania = 18,
                Serbia = 19,
                Russia = 20,
                Turkey = 21,
                UnitedKingdom = 22,
                UnitedStates = 23,
                SouthAfrica = 24
            }
        }
        [Entity(EntitySet = "General_PartyLocationNumbers", TableName = "Gen_Party_Location_Numbers")]
        public partial class PartyLocationNumber: EntityResource
        {
            public PartyLocationNumber(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_PartyLocationNumbers";
            public const string EntityTableName = "Gen_Party_Location_Numbers";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public General.PartyLocationNumbersRepository.LocationCodingSystem? LocationCodingSystem { get => GetPropertyValue<General.PartyLocationNumbersRepository.LocationCodingSystem?>("LocationCodingSystem"); set => SetPropertyValue<General.PartyLocationNumbersRepository.LocationCodingSystem?>("LocationCodingSystem", value); }
            [ODataProperty]
            public String? LocationNumber { get => GetPropertyValue<String?>("LocationNumber"); set => SetPropertyValue<String?>("LocationNumber", value); }
            [ODataProperty]
            public String? PartnerLocationNumber { get => GetPropertyValue<String?>("PartnerLocationNumber"); set => SetPropertyValue<String?>("PartnerLocationNumber", value); }
            [ODataProperty]
            public Int32? Significance { get => GetPropertyValue<Int32?>("Significance"); set => SetPropertyValue<Int32?>("Significance", value); }
            [ODataProperty]
            public General.Contacts.Party? PartnerParty { get => GetPropertyValue<General.Contacts.Party>("PartnerParty"); set => SetPropertyValue<General.Contacts.Party>("PartnerParty", value); }
            [Owner]
            [ODataProperty]
            public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace PartyLocationNumbersRepository
        {
            public enum LocationCodingSystem
            {
                GLN = 0,
                Internal = 1
            }
        }
        [Entity(EntitySet = "General_Printouts", TableName = "Gen_Printouts")]
        public partial class Printout: EntityResource
        {
            public Printout(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_Printouts";
            public const string EntityTableName = "Gen_Printouts";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public General.PrintoutsRepository.AllowPrintingOnState? AllowPrintingOnState { get => GetPropertyValue<General.PrintoutsRepository.AllowPrintingOnState?>("AllowPrintingOnState"); set => SetPropertyValue<General.PrintoutsRepository.AllowPrintingOnState?>("AllowPrintingOnState", value); }
            [ODataProperty]
            public String? ApplicationName { get => GetPropertyValue<String?>("ApplicationName"); set => SetPropertyValue<String?>("ApplicationName", value); }
            [ODataProperty]
            public Boolean? BackwardCompatibility { get => GetPropertyValue<Boolean?>("BackwardCompatibility"); set => SetPropertyValue<Boolean?>("BackwardCompatibility", value); }
            [ODataProperty]
            public Int32? Copies { get => GetPropertyValue<Int32?>("Copies"); set => SetPropertyValue<Int32?>("Copies", value); }
            [ODataProperty]
            public String? Definition { get => GetPropertyValue<String?>("Definition"); set => SetPropertyValue<String?>("Definition", value); }
            [ODataProperty]
            public String? DefinitionFormat { get => GetPropertyValue<String?>("DefinitionFormat"); set => SetPropertyValue<String?>("DefinitionFormat", value); }
            [ODataProperty]
            public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Int32? Ord { get => GetPropertyValue<Int32?>("Ord"); set => SetPropertyValue<Int32?>("Ord", value); }
            [ODataProperty]
            public String? OrdFilterXml { get => GetPropertyValue<String?>("OrdFilterXml"); set => SetPropertyValue<String?>("OrdFilterXml", value); }
            [ODataProperty]
            public Int32? OrdPriority { get => GetPropertyValue<Int32?>("OrdPriority"); set => SetPropertyValue<Int32?>("OrdPriority", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.PrintoutLayout? PrintoutLayout { get => GetPropertyValue<General.PrintoutLayout>("PrintoutLayout"); set => SetPropertyValue<General.PrintoutLayout>("PrintoutLayout", value); }
            [ODataProperty]
            public Systems.Reporting.DataSource? Report { get => GetPropertyValue<Systems.Reporting.DataSource>("Report"); set => SetPropertyValue<Systems.Reporting.DataSource>("Report", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_PrintoutLayouts", TableName = "Gen_Printout_Layouts")]
        public partial class PrintoutLayout: EntityResource
        {
            public PrintoutLayout(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_PrintoutLayouts";
            public const string EntityTableName = "Gen_Printout_Layouts";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Byte[]? BinaryLayout { get => GetPropertyValue<Byte[]?>("BinaryLayout"); set => SetPropertyValue<Byte[]?>("BinaryLayout", value); }
            [ODataProperty]
            public String? DocumentEntityName { get => GetPropertyValue<String?>("DocumentEntityName"); set => SetPropertyValue<String?>("DocumentEntityName", value); }
            [ODataProperty]
            public String? Layout { get => GetPropertyValue<String?>("Layout"); set => SetPropertyValue<String?>("Layout", value); }
            [ODataProperty]
            public String? LayoutFormat { get => GetPropertyValue<String?>("LayoutFormat"); set => SetPropertyValue<String?>("LayoutFormat", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public Systems.Reporting.DataSource? DataSource { get => GetPropertyValue<Systems.Reporting.DataSource>("DataSource"); set => SetPropertyValue<Systems.Reporting.DataSource>("DataSource", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace PrintoutsRepository
        {
            public enum AllowPrintingOnState
            {
                New = 0,
                Planned = 10,
                FirmPlanned = 20,
                Released = 30,
                Completed = 40,
                Closed = 50
            }
        }
        public enum Priority
        {
            Lowest = 1,
            Low = 2,
            Medium = 3,
            High = 4,
            Highest = 5
        }
        [Entity(EntitySet = "General_ProductGroupsLevelNames")]
        public partial class ProductGroupsLevelNamesEntry: EntityResource
        {
            public ProductGroupsLevelNamesEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_ProductGroupsLevelNames";
            public const string EntityTableName = "";
            [ODataProperty]
            public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
            [ODataProperty]
            public String? L1Name { get => GetPropertyValue<String?>("L1Name"); set => SetPropertyValue<String?>("L1Name", value); }
            [ODataProperty]
            public String? L2Name { get => GetPropertyValue<String?>("L2Name"); set => SetPropertyValue<String?>("L2Name", value); }
            [ODataProperty]
            public String? L3Name { get => GetPropertyValue<String?>("L3Name"); set => SetPropertyValue<String?>("L3Name", value); }
            [ODataProperty]
            public String? L4Name { get => GetPropertyValue<String?>("L4Name"); set => SetPropertyValue<String?>("L4Name", value); }
            [ODataProperty]
            public String? L5Name { get => GetPropertyValue<String?>("L5Name"); set => SetPropertyValue<String?>("L5Name", value); }
            [ODataProperty]
            public String? L6Name { get => GetPropertyValue<String?>("L6Name"); set => SetPropertyValue<String?>("L6Name", value); }
        }
        namespace Products
        {
            [Entity(EntitySet = "General_Products_CodingSystems", TableName = "Gen_Coding_Systems")]
            public partial class CodingSystem: EntityResource
            {
                public CodingSystem(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_CodingSystems";
                public const string EntityTableName = "Gen_Coding_Systems";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Boolean? IsUnique { get => GetPropertyValue<Boolean?>("IsUnique"); set => SetPropertyValue<Boolean?>("IsUnique", value); }
                [ODataProperty]
                public General.MeasurementUnit? DefaultMeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("DefaultMeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("DefaultMeasurementUnit", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_Products", TableName = "Gen_Products")]
            public partial class Product: EntityResource
            {
                public Product(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_Products";
                public const string EntityTableName = "Gen_Products";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public General.Products.ProductsRepository.ABCClass? ABCClass { get => GetPropertyValue<General.Products.ProductsRepository.ABCClass?>("ABCClass"); set => SetPropertyValue<General.Products.ProductsRepository.ABCClass?>("ABCClass", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public Boolean? AllowVariableMeasurementRatios { get => GetPropertyValue<Boolean?>("AllowVariableMeasurementRatios"); set => SetPropertyValue<Boolean?>("AllowVariableMeasurementRatios", value); }
                [ODataProperty]
                public String? CatalogDescriptionHtml { get => GetPropertyValue<String?>("CatalogDescriptionHtml"); set => SetPropertyValue<String?>("CatalogDescriptionHtml", value); }
                [ODataProperty]
                public General.Products.ProductsRepository.CostingMethod? CostingMethod { get => GetPropertyValue<General.Products.ProductsRepository.CostingMethod?>("CostingMethod"); set => SetPropertyValue<General.Products.ProductsRepository.CostingMethod?>("CostingMethod", value); }
                [ODataProperty]
                public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
                [ODataProperty]
                public String? CreationUser { get => GetPropertyValue<String?>("CreationUser"); set => SetPropertyValue<String?>("CreationUser", value); }
                [ODataProperty]
                public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
                [ODataProperty]
                public Int32? ExpiryPeriodDays { get => GetPropertyValue<Int32?>("ExpiryPeriodDays"); set => SetPropertyValue<Int32?>("ExpiryPeriodDays", value); }
                [ODataProperty]
                public General.Products.ProductsRepository.FlushingMethod? FlushingMethod { get => GetPropertyValue<General.Products.ProductsRepository.FlushingMethod?>("FlushingMethod"); set => SetPropertyValue<General.Products.ProductsRepository.FlushingMethod?>("FlushingMethod", value); }
                [ODataProperty]
                public Int32? GuaranteePeriodDays { get => GetPropertyValue<Int32?>("GuaranteePeriodDays"); set => SetPropertyValue<Int32?>("GuaranteePeriodDays", value); }
                [ODataProperty]
                public Boolean? IsFeatured { get => GetPropertyValue<Boolean?>("IsFeatured"); set => SetPropertyValue<Boolean?>("IsFeatured", value); }
                [ODataProperty]
                public Boolean? IsSerialized { get => GetPropertyValue<Boolean?>("IsSerialized"); set => SetPropertyValue<Boolean?>("IsSerialized", value); }
                [ODataProperty]
                public General.Products.ProductsRepository.LotsIssue? LotsIssue { get => GetPropertyValue<General.Products.ProductsRepository.LotsIssue?>("LotsIssue"); set => SetPropertyValue<General.Products.ProductsRepository.LotsIssue?>("LotsIssue", value); }
                [ODataProperty]
                public String? ManufacturingPolicy { get => GetPropertyValue<String?>("ManufacturingPolicy"); set => SetPropertyValue<String?>("ManufacturingPolicy", value); }
                [ODataProperty]
                public Amount? MinimalSalesPricePerLot { get => GetPropertyValue<Amount?>("MinimalSalesPricePerLot"); set => SetPropertyValue<Amount?>("MinimalSalesPricePerLot", value); }
                [ODataProperty]
                public Decimal? MinimalSalesQuantityBase { get => GetPropertyValue<Decimal?>("MinimalSalesQuantityBase"); set => SetPropertyValue<Decimal?>("MinimalSalesQuantityBase", value); }
                [ODataProperty]
                public String? PartNumber { get => GetPropertyValue<String?>("PartNumber"); set => SetPropertyValue<String?>("PartNumber", value); }
                [ODataProperty]
                public Int32? PlanningDemandTimeFenceDays { get => GetPropertyValue<Int32?>("PlanningDemandTimeFenceDays"); set => SetPropertyValue<Int32?>("PlanningDemandTimeFenceDays", value); }
                [ODataProperty]
                public Int32? PlanningHorizonDays { get => GetPropertyValue<Int32?>("PlanningHorizonDays"); set => SetPropertyValue<Int32?>("PlanningHorizonDays", value); }
                [ODataProperty]
                public Int32? PlanningTimeFenceDays { get => GetPropertyValue<Int32?>("PlanningTimeFenceDays"); set => SetPropertyValue<Int32?>("PlanningTimeFenceDays", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Decimal? ScrapRate { get => GetPropertyValue<Decimal?>("ScrapRate"); set => SetPropertyValue<Decimal?>("ScrapRate", value); }
                [ODataProperty]
                public MultilanguageString? ShortName { get => GetPropertyValue<MultilanguageString?>("ShortName"); set => SetPropertyValue<MultilanguageString?>("ShortName", value); }
                [ODataProperty]
                public Boolean? ShowInCatalog { get => GetPropertyValue<Boolean?>("ShowInCatalog"); set => SetPropertyValue<Boolean?>("ShowInCatalog", value); }
                [ODataProperty]
                public Amount? StandardCostPerLot { get => GetPropertyValue<Amount?>("StandardCostPerLot"); set => SetPropertyValue<Amount?>("StandardCostPerLot", value); }
                [ODataProperty]
                public Quantity? StandardLotSizeBase { get => GetPropertyValue<Quantity?>("StandardLotSizeBase"); set => SetPropertyValue<Quantity?>("StandardLotSizeBase", value); }
                [ODataProperty]
                public Amount? StandardPricePerLot { get => GetPropertyValue<Amount?>("StandardPricePerLot"); set => SetPropertyValue<Amount?>("StandardPricePerLot", value); }
                [ODataProperty]
                public Guid? SupplySchemaId { get => GetPropertyValue<Guid?>("SupplySchemaId"); set => SetPropertyValue<Guid?>("SupplySchemaId", value); }
                [ODataProperty]
                public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
                [ODataProperty]
                public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
                [ODataProperty]
                public General.Products.ProductsRepository.UseLots? UseLots { get => GetPropertyValue<General.Products.ProductsRepository.UseLots?>("UseLots"); set => SetPropertyValue<General.Products.ProductsRepository.UseLots?>("UseLots", value); }
                [ODataProperty]
                public General.MeasurementCategory? BaseMeasurementCategory { get => GetPropertyValue<General.MeasurementCategory>("BaseMeasurementCategory"); set => SetPropertyValue<General.MeasurementCategory>("BaseMeasurementCategory", value); }
                [ODataProperty]
                public Logistics.Shipment.CargoType? CargoType { get => GetPropertyValue<Logistics.Shipment.CargoType>("CargoType"); set => SetPropertyValue<Logistics.Shipment.CargoType>("CargoType", value); }
                [ODataProperty]
                public General.Currency? CostingCurrency { get => GetPropertyValue<General.Currency>("CostingCurrency"); set => SetPropertyValue<General.Currency>("CostingCurrency", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Finance.Excise.ExciseProductType? ExciseProductType { get => GetPropertyValue<Finance.Excise.ExciseProductType>("ExciseProductType"); set => SetPropertyValue<Finance.Excise.ExciseProductType>("ExciseProductType", value); }
                [ODataProperty]
                public Finance.Intrastat.CommodityCode? IntrastatCommodityCode { get => GetPropertyValue<Finance.Intrastat.CommodityCode>("IntrastatCommodityCode"); set => SetPropertyValue<Finance.Intrastat.CommodityCode>("IntrastatCommodityCode", value); }
                [ODataProperty]
                public General.MeasurementUnit? IntrastatSupplementaryUnit { get => GetPropertyValue<General.MeasurementUnit>("IntrastatSupplementaryUnit"); set => SetPropertyValue<General.MeasurementUnit>("IntrastatSupplementaryUnit", value); }
                [ODataProperty]
                public General.MeasurementUnit? MeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("MeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("MeasurementUnit", value); }
                [ODataProperty]
                public General.Geography.Country? OriginCountry { get => GetPropertyValue<General.Geography.Country>("OriginCountry"); set => SetPropertyValue<General.Geography.Country>("OriginCountry", value); }
                [ODataProperty]
                public General.Products.ProductGroup? ProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ProductGroup", value); }
                [ODataProperty]
                public General.Products.ProductType? ProductType { get => GetPropertyValue<General.Products.ProductType>("ProductType"); set => SetPropertyValue<General.Products.ProductType>("ProductType", value); }
                [ODataProperty]
                public General.MeasurementUnit? PurchaseMeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("PurchaseMeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("PurchaseMeasurementUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.ProductValuationGroup? ValuationGroup { get => GetPropertyValue<Logistics.Inventory.ProductValuationGroup>("ValuationGroup"); set => SetPropertyValue<Logistics.Inventory.ProductValuationGroup>("ValuationGroup", value); }
                [ODataProperty]
                public IEnumerable<Crm.Marketing.ProductDistributionChannel>? DistributionChannels { get => GetCollection<Crm.Marketing.ProductDistributionChannel>("DistributionChannels"); set => SetCollection<Crm.Marketing.ProductDistributionChannel>("DistributionChannels", value); }
                [ODataProperty]
                public IEnumerable<General.Products.ProductCode>? Codes { get => GetCollection<General.Products.ProductCode>("Codes"); set => SetCollection<General.Products.ProductCode>("Codes", value); }
                [ODataProperty]
                public IEnumerable<General.Products.ProductDimension>? Dimensions { get => GetCollection<General.Products.ProductDimension>("Dimensions"); set => SetCollection<General.Products.ProductDimension>("Dimensions", value); }
                [ODataProperty]
                public IEnumerable<General.Products.ProductDocumentAmount>? DocumentAmounts { get => GetCollection<General.Products.ProductDocumentAmount>("DocumentAmounts"); set => SetCollection<General.Products.ProductDocumentAmount>("DocumentAmounts", value); }
                [ODataProperty]
                public IEnumerable<General.Products.ProductPicture>? Pictures { get => GetCollection<General.Products.ProductPicture>("Pictures"); set => SetCollection<General.Products.ProductPicture>("Pictures", value); }
                [ODataProperty]
                public IEnumerable<General.Products.ProductVariant>? Variants { get => GetCollection<General.Products.ProductVariant>("Variants"); set => SetCollection<General.Products.ProductVariant>("Variants", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.ProductDefaultStoreBin>? DefaultStoreBins { get => GetCollection<Logistics.Inventory.ProductDefaultStoreBin>("DefaultStoreBins"); set => SetCollection<Logistics.Inventory.ProductDefaultStoreBin>("DefaultStoreBins", value); }
                [ODataProperty]
                public IEnumerable<Logistics.CompositeProductComponent>? CompositeProductComponents { get => GetCollection<Logistics.CompositeProductComponent>("CompositeProductComponents"); set => SetCollection<Logistics.CompositeProductComponent>("CompositeProductComponents", value); }
                [ODataProperty]
                public IEnumerable<Crm.LineDiscount>? LineDiscounts { get => GetCollection<Crm.LineDiscount>("LineDiscounts"); set => SetCollection<Crm.LineDiscount>("LineDiscounts", value); }
                [ODataProperty]
                public IEnumerable<Crm.ProductPrice>? Prices { get => GetCollection<Crm.ProductPrice>("Prices"); set => SetCollection<Crm.ProductPrice>("Prices", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.Lot>? Lots { get => GetCollection<Logistics.Inventory.Lot>("Lots"); set => SetCollection<Logistics.Inventory.Lot>("Lots", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.SerialNumber>? SerialNumbers { get => GetCollection<Logistics.Inventory.SerialNumber>("SerialNumbers"); set => SetCollection<Logistics.Inventory.SerialNumber>("SerialNumbers", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Procurement.PurchaseProductPrice>? PurchaseProductPrices { get => GetCollection<Logistics.Procurement.PurchaseProductPrice>("PurchaseProductPrices"); set => SetCollection<Logistics.Procurement.PurchaseProductPrice>("PurchaseProductPrices", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_ProductCatalogs", TableName = "Gen_Product_Catalogs")]
            public partial class ProductCatalog: EntityResource
            {
                public ProductCatalog(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductCatalogs";
                public const string EntityTableName = "Gen_Product_Catalogs";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? BackgroundColor { get => GetPropertyValue<Int32?>("BackgroundColor"); set => SetPropertyValue<Int32?>("BackgroundColor", value); }
                [ODataProperty]
                public Byte[]? BackgroundImage { get => GetPropertyValue<Byte[]?>("BackgroundImage"); set => SetPropertyValue<Byte[]?>("BackgroundImage", value); }
                [ODataProperty]
                public General.Products.ProductCatalogsRepository.BackgroundPositionHorizontal? BackgroundPositionHorizontal { get => GetPropertyValue<General.Products.ProductCatalogsRepository.BackgroundPositionHorizontal?>("BackgroundPositionHorizontal"); set => SetPropertyValue<General.Products.ProductCatalogsRepository.BackgroundPositionHorizontal?>("BackgroundPositionHorizontal", value); }
                [ODataProperty]
                public General.Products.ProductCatalogsRepository.BackgroundPositionVertical? BackgroundPositionVertical { get => GetPropertyValue<General.Products.ProductCatalogsRepository.BackgroundPositionVertical?>("BackgroundPositionVertical"); set => SetPropertyValue<General.Products.ProductCatalogsRepository.BackgroundPositionVertical?>("BackgroundPositionVertical", value); }
                [ODataProperty]
                public General.Products.ProductCatalogsRepository.BackgroundRepeat? BackgroundRepeat { get => GetPropertyValue<General.Products.ProductCatalogsRepository.BackgroundRepeat?>("BackgroundRepeat"); set => SetPropertyValue<General.Products.ProductCatalogsRepository.BackgroundRepeat?>("BackgroundRepeat", value); }
                [ODataProperty]
                public String? FooterHtml { get => GetPropertyValue<String?>("FooterHtml"); set => SetPropertyValue<String?>("FooterHtml", value); }
                [ODataProperty]
                public String? HeaderHtml { get => GetPropertyValue<String?>("HeaderHtml"); set => SetPropertyValue<String?>("HeaderHtml", value); }
                [ODataProperty]
                public Byte[]? Logo { get => GetPropertyValue<Byte[]?>("Logo"); set => SetPropertyValue<Byte[]?>("Logo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public General.Products.ProductGroup? RootProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("RootProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("RootProductGroup", value); }
                [ODataProperty]
                public Systems.Core.WebSite? WebSite { get => GetPropertyValue<Systems.Core.WebSite>("WebSite"); set => SetPropertyValue<Systems.Core.WebSite>("WebSite", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ProductCatalogsRepository
            {
                public enum BackgroundPositionHorizontal
                {
                    Left = 0,
                    Center = 1,
                    Right = 2
                }
                public enum BackgroundPositionVertical
                {
                    Top = 0,
                    Center = 1,
                    Bottom = 2
                }
                public enum BackgroundRepeat
                {
                    RepeatBothVerticallyAndHorizontally = 0,
                    RepeatOnlyHorizontally = 1,
                    RepeatOnlyVertically = 2,
                    NoRepeat = 3
                }
            }
            [Entity(EntitySet = "General_Products_ProductCodes", TableName = "Gen_Product_Codes")]
            public partial class ProductCode: EntityResource
            {
                public ProductCode(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductCodes";
                public const string EntityTableName = "Gen_Product_Codes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public String? ProductCodeField { get => GetPropertyValue<String?>("ProductCodeField"); set => SetPropertyValue<String?>("ProductCodeField", value); }
                [ODataProperty]
                public General.Products.CodingSystem? CodingSystem { get => GetPropertyValue<General.Products.CodingSystem>("CodingSystem"); set => SetPropertyValue<General.Products.CodingSystem>("CodingSystem", value); }
                [Owner]
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_ProductDimensions", TableName = "Gen_Product_Dimensions")]
            public partial class ProductDimension: EntityResource
            {
                public ProductDimension(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductDimensions";
                public const string EntityTableName = "Gen_Product_Dimensions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? ConvertToBaseDivisor { get => GetPropertyValue<Decimal?>("ConvertToBaseDivisor"); set => SetPropertyValue<Decimal?>("ConvertToBaseDivisor", value); }
                [ODataProperty]
                public Decimal? ConvertToBaseMultiplier { get => GetPropertyValue<Decimal?>("ConvertToBaseMultiplier"); set => SetPropertyValue<Decimal?>("ConvertToBaseMultiplier", value); }
                [ODataProperty]
                public Quantity? DestQuantity { get => GetPropertyValue<Quantity?>("DestQuantity"); set => SetPropertyValue<Quantity?>("DestQuantity", value); }
                [ODataProperty]
                public Quantity? SourceQuantity { get => GetPropertyValue<Quantity?>("SourceQuantity"); set => SetPropertyValue<Quantity?>("SourceQuantity", value); }
                [ODataProperty]
                public General.MeasurementUnit? DestQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("DestQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("DestQuantityUnit", value); }
                [ODataProperty]
                public General.MeasurementCategory? MeasurementCategory { get => GetPropertyValue<General.MeasurementCategory>("MeasurementCategory"); set => SetPropertyValue<General.MeasurementCategory>("MeasurementCategory", value); }
                [Owner]
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.MeasurementUnit? SourceQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("SourceQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("SourceQuantityUnit", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_ProductDocumentAmounts", TableName = "Gen_Product_Document_Amounts")]
            public partial class ProductDocumentAmount: EntityResource
            {
                public ProductDocumentAmount(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductDocumentAmounts";
                public const string EntityTableName = "Gen_Product_Document_Amounts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? LinePercent { get => GetPropertyValue<Decimal?>("LinePercent"); set => SetPropertyValue<Decimal?>("LinePercent", value); }
                [ODataProperty]
                public General.DocumentAmountType? DocumentAmountType { get => GetPropertyValue<General.DocumentAmountType>("DocumentAmountType"); set => SetPropertyValue<General.DocumentAmountType>("DocumentAmountType", value); }
                [Owner]
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_ProductGroups", TableName = "Gen_Product_Groups")]
            public partial class ProductGroup: EntityResource
            {
                public ProductGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductGroups";
                public const string EntityTableName = "Gen_Product_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public Boolean? ConfiguratorCreatesRecipe { get => GetPropertyValue<Boolean?>("ConfiguratorCreatesRecipe"); set => SetPropertyValue<Boolean?>("ConfiguratorCreatesRecipe", value); }
                [ODataProperty]
                public General.Products.ProductGroupsRepository.ConfiguratorStatus? ConfiguratorStatus { get => GetPropertyValue<General.Products.ProductGroupsRepository.ConfiguratorStatus?>("ConfiguratorStatus"); set => SetPropertyValue<General.Products.ProductGroupsRepository.ConfiguratorStatus?>("ConfiguratorStatus", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? NextPartNumber { get => GetPropertyValue<String?>("NextPartNumber"); set => SetPropertyValue<String?>("NextPartNumber", value); }
                [ODataProperty]
                public String? NextSerialNumber { get => GetPropertyValue<String?>("NextSerialNumber"); set => SetPropertyValue<String?>("NextSerialNumber", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Parent { get => GetPropertyValue<String?>("Parent"); set => SetPropertyValue<String?>("Parent", value); }
                [ODataProperty]
                public Byte[]? Picture { get => GetPropertyValue<Byte[]?>("Picture"); set => SetPropertyValue<Byte[]?>("Picture", value); }
                [ODataProperty]
                public DateTime? PictureLastUpdateTime { get => GetPropertyValue<DateTime?>("PictureLastUpdateTime"); set => SetPropertyValue<DateTime?>("PictureLastUpdateTime", value); }
                [ODataProperty]
                public MultilanguageString? ProductDescriptionMask { get => GetPropertyValue<MultilanguageString?>("ProductDescriptionMask"); set => SetPropertyValue<MultilanguageString?>("ProductDescriptionMask", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public MultilanguageString? ProductNameMask { get => GetPropertyValue<MultilanguageString?>("ProductNameMask"); set => SetPropertyValue<MultilanguageString?>("ProductNameMask", value); }
                [ODataProperty]
                public General.Products.ProductGroupsRepository.UseLots? UseLots { get => GetPropertyValue<General.Products.ProductGroupsRepository.UseLots?>("UseLots"); set => SetPropertyValue<General.Products.ProductGroupsRepository.UseLots?>("UseLots", value); }
                [ODataProperty]
                public General.MeasurementUnit? DefaultMeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("DefaultMeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("DefaultMeasurementUnit", value); }
                [ODataProperty]
                public General.Products.ProductType? DefaultProductType { get => GetPropertyValue<General.Products.ProductType>("DefaultProductType"); set => SetPropertyValue<General.Products.ProductType>("DefaultProductType", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Products.ProductGroup? ParentGroup { get => GetPropertyValue<General.Products.ProductGroup>("ParentGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ParentGroup", value); }
                [ODataProperty]
                public Crm.Pricing.PricingModel? PricingModel { get => GetPropertyValue<Crm.Pricing.PricingModel>("PricingModel"); set => SetPropertyValue<Crm.Pricing.PricingModel>("PricingModel", value); }
                [ODataProperty]
                public IEnumerable<General.Products.ProductGroupRangeProperty>? RangeProperties { get => GetCollection<General.Products.ProductGroupRangeProperty>("RangeProperties"); set => SetCollection<General.Products.ProductGroupRangeProperty>("RangeProperties", value); }
                [ODataProperty]
                public IEnumerable<General.Products.ProductGroupRequiredProperty>? RequiredProperties { get => GetCollection<General.Products.ProductGroupRequiredProperty>("RequiredProperties"); set => SetCollection<General.Products.ProductGroupRequiredProperty>("RequiredProperties", value); }
                [ODataProperty]
                public IEnumerable<Production.Technologies.PrincipalRecipe>? PrincipalRecipes { get => GetCollection<Production.Technologies.PrincipalRecipe>("PrincipalRecipes"); set => SetCollection<Production.Technologies.PrincipalRecipe>("PrincipalRecipes", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ProductGroupRangePropertiesRepository
            {
                public enum RangeType
                {
                    Range = 0,
                    List = 1
                }
            }
            [Entity(EntitySet = "General_Products_ProductGroupRangeProperties", TableName = "Gen_Product_Group_Range_Properties")]
            public partial class ProductGroupRangeProperty: EntityResource
            {
                public ProductGroupRangeProperty(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductGroupRangeProperties";
                public const string EntityTableName = "Gen_Product_Group_Range_Properties";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? FromPropertyValue { get => GetPropertyValue<String?>("FromPropertyValue"); set => SetPropertyValue<String?>("FromPropertyValue", value); }
                [ODataProperty]
                public String? PropertyValuesList { get => GetPropertyValue<String?>("PropertyValuesList"); set => SetPropertyValue<String?>("PropertyValuesList", value); }
                [ODataProperty]
                public General.Products.ProductGroupRangePropertiesRepository.RangeType? RangeType { get => GetPropertyValue<General.Products.ProductGroupRangePropertiesRepository.RangeType?>("RangeType"); set => SetPropertyValue<General.Products.ProductGroupRangePropertiesRepository.RangeType?>("RangeType", value); }
                [ODataProperty]
                public String? ToPropertyValue { get => GetPropertyValue<String?>("ToPropertyValue"); set => SetPropertyValue<String?>("ToPropertyValue", value); }
                [Owner]
                [ODataProperty]
                public General.Products.ProductGroup? ProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ProductGroup", value); }
                [ODataProperty]
                public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_ProductGroupRequiredProperties", TableName = "Gen_Product_Group_Required_Properties")]
            public partial class ProductGroupRequiredProperty: EntityResource
            {
                public ProductGroupRequiredProperty(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductGroupRequiredProperties";
                public const string EntityTableName = "Gen_Product_Group_Required_Properties";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? DefaultPropertyValue { get => GetPropertyValue<String?>("DefaultPropertyValue"); set => SetPropertyValue<String?>("DefaultPropertyValue", value); }
                [ODataProperty]
                public String? DefaultPropertyValueDescription { get => GetPropertyValue<String?>("DefaultPropertyValueDescription"); set => SetPropertyValue<String?>("DefaultPropertyValueDescription", value); }
                [ODataProperty]
                public Guid? DefaultValueId { get => GetPropertyValue<Guid?>("DefaultValueId"); set => SetPropertyValue<Guid?>("DefaultValueId", value); }
                [ODataProperty]
                public Int32? PropertyNo { get => GetPropertyValue<Int32?>("PropertyNo"); set => SetPropertyValue<Int32?>("PropertyNo", value); }
                [ODataProperty]
                public Boolean? Required { get => GetPropertyValue<Boolean?>("Required"); set => SetPropertyValue<Boolean?>("Required", value); }
                [Owner]
                [ODataProperty]
                public General.Products.ProductGroup? ProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ProductGroup", value); }
                [ODataProperty]
                public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ProductGroupsRepository
            {
                public enum ConfiguratorStatus
                {
                    NotAllowed = 0,
                    Allowed = 1,
                    Obligatory = 2
                }
                public enum UseLots
                {
                    Allowed = 0,
                    NotAllowed = 1,
                    Required = 2
                }
            }
            [Entity(EntitySet = "General_Products_ProductPictures", TableName = "Gen_Product_Pictures")]
            public partial class ProductPicture: EntityResource
            {
                public ProductPicture(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductPictures";
                public const string EntityTableName = "Gen_Product_Pictures";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Comments { get => GetPropertyValue<String?>("Comments"); set => SetPropertyValue<String?>("Comments", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public DateTime? LastUpdateTime { get => GetPropertyValue<DateTime?>("LastUpdateTime"); set => SetPropertyValue<DateTime?>("LastUpdateTime", value); }
                [ODataProperty]
                public Byte[]? Picture { get => GetPropertyValue<Byte[]?>("Picture"); set => SetPropertyValue<Byte[]?>("Picture", value); }
                [ODataProperty]
                public Int32? PictureNo { get => GetPropertyValue<Int32?>("PictureNo"); set => SetPropertyValue<Int32?>("PictureNo", value); }
                [ODataProperty]
                public General.Products.ProductPicturesRepository.PictureSizeClass? PictureSizeClass { get => GetPropertyValue<General.Products.ProductPicturesRepository.PictureSizeClass?>("PictureSizeClass"); set => SetPropertyValue<General.Products.ProductPicturesRepository.PictureSizeClass?>("PictureSizeClass", value); }
                [Owner]
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ProductPicturesRepository
            {
                public enum PictureSizeClass
                {
                    SmallPictureThumbnail = 0,
                    LargePictureFullSize = 1
                }
            }
            namespace ProductsRepository
            {
                public enum ABCClass
                {
                    A = 0,
                    B = 1,
                    C = 2
                }
                public enum CostingMethod
                {
                    AverageCostForTheWholeProduct = 0,
                    SeparateCostForEachLot = 1,
                    AveragePartitionedByReservedForDocument = 2
                }
                public enum FlushingMethod
                {
                    Backward = 0,
                    Forward = 1,
                    Manual = 2
                }
                public enum LotsIssue
                {
                    FirstInFirstOut = 0,
                    FirstExpireFirstOut = 1,
                    LastInFirstOut = 2
                }
                public enum UseLots
                {
                    Allowed = 0,
                    NotAllowed = 1,
                    Required = 2
                }
            }
            [Entity(EntitySet = "General_Products_ProductSupply", TableName = "Gen_Product_Supply")]
            public partial class ProductSupply: EntityResource
            {
                public ProductSupply(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductSupply";
                public const string EntityTableName = "Gen_Product_Supply";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? BuyerName { get => GetPropertyValue<String?>("BuyerName"); set => SetPropertyValue<String?>("BuyerName", value); }
                [ODataProperty]
                public Quantity? FixedOrderQuantityBase { get => GetPropertyValue<Quantity?>("FixedOrderQuantityBase"); set => SetPropertyValue<Quantity?>("FixedOrderQuantityBase", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public General.Products.ProductSupplyRepository.ManufacturingPolicy? ManufacturingPolicy { get => GetPropertyValue<General.Products.ProductSupplyRepository.ManufacturingPolicy?>("ManufacturingPolicy"); set => SetPropertyValue<General.Products.ProductSupplyRepository.ManufacturingPolicy?>("ManufacturingPolicy", value); }
                [ODataProperty]
                public Quantity? OrderLotSizeQuantityBase { get => GetPropertyValue<Quantity?>("OrderLotSizeQuantityBase"); set => SetPropertyValue<Quantity?>("OrderLotSizeQuantityBase", value); }
                [ODataProperty]
                public General.Products.ProductSupplyRepository.OrderLotSizingMethod? OrderLotSizingMethod { get => GetPropertyValue<General.Products.ProductSupplyRepository.OrderLotSizingMethod?>("OrderLotSizingMethod"); set => SetPropertyValue<General.Products.ProductSupplyRepository.OrderLotSizingMethod?>("OrderLotSizingMethod", value); }
                [ODataProperty]
                public Quantity? OrderMaximum { get => GetPropertyValue<Quantity?>("OrderMaximum"); set => SetPropertyValue<Quantity?>("OrderMaximum", value); }
                [ODataProperty]
                public Quantity? OrderMinimum { get => GetPropertyValue<Quantity?>("OrderMinimum"); set => SetPropertyValue<Quantity?>("OrderMinimum", value); }
                [ODataProperty]
                public Boolean? OrderMultiple { get => GetPropertyValue<Boolean?>("OrderMultiple"); set => SetPropertyValue<Boolean?>("OrderMultiple", value); }
                [ODataProperty]
                public Int32? OrderPeriodPlanningDays { get => GetPropertyValue<Int32?>("OrderPeriodPlanningDays"); set => SetPropertyValue<Int32?>("OrderPeriodPlanningDays", value); }
                [ODataProperty]
                public DateTime? OrderPeriodStartDate { get => GetPropertyValue<DateTime?>("OrderPeriodStartDate"); set => SetPropertyValue<DateTime?>("OrderPeriodStartDate", value); }
                [ODataProperty]
                public Quantity? OrderPointQuantityBase { get => GetPropertyValue<Quantity?>("OrderPointQuantityBase"); set => SetPropertyValue<Quantity?>("OrderPointQuantityBase", value); }
                [ODataProperty]
                public General.Products.ProductSupplyRepository.OrderPolicy? OrderPolicy { get => GetPropertyValue<General.Products.ProductSupplyRepository.OrderPolicy?>("OrderPolicy"); set => SetPropertyValue<General.Products.ProductSupplyRepository.OrderPolicy?>("OrderPolicy", value); }
                [ODataProperty]
                public Decimal? PlanningAnnualCarryingCostPercent { get => GetPropertyValue<Decimal?>("PlanningAnnualCarryingCostPercent"); set => SetPropertyValue<Decimal?>("PlanningAnnualCarryingCostPercent", value); }
                [ODataProperty]
                public Quantity? PlanningAnnualUsageQuantityBase { get => GetPropertyValue<Quantity?>("PlanningAnnualUsageQuantityBase"); set => SetPropertyValue<Quantity?>("PlanningAnnualUsageQuantityBase", value); }
                [ODataProperty]
                public Int32? PlanningHorizonDays { get => GetPropertyValue<Int32?>("PlanningHorizonDays"); set => SetPropertyValue<Int32?>("PlanningHorizonDays", value); }
                [ODataProperty]
                public Int32? PlanningLeadTimeDays { get => GetPropertyValue<Int32?>("PlanningLeadTimeDays"); set => SetPropertyValue<Int32?>("PlanningLeadTimeDays", value); }
                [ODataProperty]
                public Quantity? PlanningMaximumInventoryQuantityBase { get => GetPropertyValue<Quantity?>("PlanningMaximumInventoryQuantityBase"); set => SetPropertyValue<Quantity?>("PlanningMaximumInventoryQuantityBase", value); }
                [ODataProperty]
                public Amount? PlanningOrderCostBaseCurrency { get => GetPropertyValue<Amount?>("PlanningOrderCostBaseCurrency"); set => SetPropertyValue<Amount?>("PlanningOrderCostBaseCurrency", value); }
                [ODataProperty]
                public Int32? PlanningOrderCycleDays { get => GetPropertyValue<Int32?>("PlanningOrderCycleDays"); set => SetPropertyValue<Int32?>("PlanningOrderCycleDays", value); }
                [ODataProperty]
                public Quantity? PlanningSafetyStockQuantityBase { get => GetPropertyValue<Quantity?>("PlanningSafetyStockQuantityBase"); set => SetPropertyValue<Quantity?>("PlanningSafetyStockQuantityBase", value); }
                [ODataProperty]
                public Int32? PlanningTimeFenceDays { get => GetPropertyValue<Int32?>("PlanningTimeFenceDays"); set => SetPropertyValue<Int32?>("PlanningTimeFenceDays", value); }
                [ODataProperty]
                public General.Products.ProductSupplyRepository.ProcurementType? ProcurementType { get => GetPropertyValue<General.Products.ProductSupplyRepository.ProcurementType?>("ProcurementType"); set => SetPropertyValue<General.Products.ProductSupplyRepository.ProcurementType?>("ProcurementType", value); }
                [ODataProperty]
                public Amount? StandardCostPerLot { get => GetPropertyValue<Amount?>("StandardCostPerLot"); set => SetPropertyValue<Amount?>("StandardCostPerLot", value); }
                [ODataProperty]
                public Guid? SupplySchemaId { get => GetPropertyValue<Guid?>("SupplySchemaId"); set => SetPropertyValue<Guid?>("SupplySchemaId", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? DefaultStoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("DefaultStoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("DefaultStoreBin", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? FromStore { get => GetPropertyValue<Logistics.Inventory.Store>("FromStore"); set => SetPropertyValue<Logistics.Inventory.Store>("FromStore", value); }
                [ODataProperty]
                public General.DocumentType? GenerateDocumentType { get => GetPropertyValue<General.DocumentType>("GenerateDocumentType"); set => SetPropertyValue<General.DocumentType>("GenerateDocumentType", value); }
                [ODataProperty]
                public Logistics.Procurement.Supplier? PreferredSupplier { get => GetPropertyValue<Logistics.Procurement.Supplier>("PreferredSupplier"); set => SetPropertyValue<Logistics.Procurement.Supplier>("PreferredSupplier", value); }
                [ODataProperty]
                public General.Products.ProductGroup? ProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ProductGroup", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ProductSupplyRepository
            {
                public enum ManufacturingPolicy
                {
                    AssembleToOrder = 0,
                    MakeToOrder = 1,
                    MakeToStock = 2,
                    EngineerToOrder = 3
                }
                public enum OrderLotSizingMethod
                {
                    EconomicOrderQuantity = 0,
                    FixedOrderQuantity = 1,
                    LotForLot = 2,
                    LotForPeriod = 3,
                    ReorderPoint = 4,
                    ReorderPointWithTimePlanning = 5
                }
                public enum OrderPolicy
                {
                    MaterialRequirementsPlanning = 0,
                    OrderPointSystem = 1,
                    OrderPointSystemWithTimePlanning = 2,
                    PeriodicReviewSystem = 3
                }
                public enum ProcurementType
                {
                    Buy = 0,
                    Make = 1,
                    Transfer = 2
                }
            }
            [Entity(EntitySet = "General_Products_ProductTypes", TableName = "Gen_Product_Types")]
            public partial class ProductType: EntityResource
            {
                public ProductType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductTypes";
                public const string EntityTableName = "Gen_Product_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public Boolean? IsFixedAsset { get => GetPropertyValue<Boolean?>("IsFixedAsset"); set => SetPropertyValue<Boolean?>("IsFixedAsset", value); }
                [ODataProperty]
                public Boolean? IsServiceActivityService { get => GetPropertyValue<Boolean?>("IsServiceActivityService"); set => SetPropertyValue<Boolean?>("IsServiceActivityService", value); }
                [ODataProperty]
                public Boolean? IsServiced { get => GetPropertyValue<Boolean?>("IsServiced"); set => SetPropertyValue<Boolean?>("IsServiced", value); }
                [ODataProperty]
                public Boolean? IsShipped { get => GetPropertyValue<Boolean?>("IsShipped"); set => SetPropertyValue<Boolean?>("IsShipped", value); }
                [ODataProperty]
                public Boolean? IsStocked { get => GetPropertyValue<Boolean?>("IsStocked"); set => SetPropertyValue<Boolean?>("IsStocked", value); }
                [ODataProperty]
                public Boolean? LotAutoCreation { get => GetPropertyValue<Boolean?>("LotAutoCreation"); set => SetPropertyValue<Boolean?>("LotAutoCreation", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public IEnumerable<General.Products.ProductTypePurchaseInvoiceLineProperty>? PurchaseInvoiceLineProperties { get => GetCollection<General.Products.ProductTypePurchaseInvoiceLineProperty>("PurchaseInvoiceLineProperties"); set => SetCollection<General.Products.ProductTypePurchaseInvoiceLineProperty>("PurchaseInvoiceLineProperties", value); }
                [ODataProperty]
                public IEnumerable<Crm.Pos.ProductTypeTaxGroup>? TaxGroups { get => GetCollection<Crm.Pos.ProductTypeTaxGroup>("TaxGroups"); set => SetCollection<Crm.Pos.ProductTypeTaxGroup>("TaxGroups", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_ProductTypePurchaseInvoiceLineProperties", TableName = "Gen_Product_Type_Purchase_Invoice_Line_Properties")]
            public partial class ProductTypePurchaseInvoiceLineProperty: EntityResource
            {
                public ProductTypePurchaseInvoiceLineProperty(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductTypePurchaseInvoiceLineProperties";
                public const string EntityTableName = "Gen_Product_Type_Purchase_Invoice_Line_Properties";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? PropertyNo { get => GetPropertyValue<Int32?>("PropertyNo"); set => SetPropertyValue<Int32?>("PropertyNo", value); }
                [ODataProperty]
                public Boolean? Required { get => GetPropertyValue<Boolean?>("Required"); set => SetPropertyValue<Boolean?>("Required", value); }
                [Owner]
                [ODataProperty]
                public General.Products.ProductType? ProductType { get => GetPropertyValue<General.Products.ProductType>("ProductType"); set => SetPropertyValue<General.Products.ProductType>("ProductType", value); }
                [ODataProperty]
                public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_ProductVariants", TableName = "Gen_Product_Variants")]
            public partial class ProductVariant: EntityResource
            {
                public ProductVariant(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_ProductVariants";
                public const string EntityTableName = "Gen_Product_Variants";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? BarCode { get => GetPropertyValue<String?>("BarCode"); set => SetPropertyValue<String?>("BarCode", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? ShortCode { get => GetPropertyValue<String?>("ShortCode"); set => SetPropertyValue<String?>("ShortCode", value); }
                [Owner]
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.VariantColor? VariantColor { get => GetPropertyValue<General.Products.VariantColor>("VariantColor"); set => SetPropertyValue<General.Products.VariantColor>("VariantColor", value); }
                [ODataProperty]
                public General.Products.VariantSize? VariantSize { get => GetPropertyValue<General.Products.VariantSize>("VariantSize"); set => SetPropertyValue<General.Products.VariantSize>("VariantSize", value); }
                [ODataProperty]
                public General.Products.VariantStyle? VariantStyle { get => GetPropertyValue<General.Products.VariantStyle>("VariantStyle"); set => SetPropertyValue<General.Products.VariantStyle>("VariantStyle", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_VariantColors", TableName = "Gen_Variant_Colors")]
            public partial class VariantColor: EntityResource
            {
                public VariantColor(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_VariantColors";
                public const string EntityTableName = "Gen_Variant_Colors";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_VariantSizes", TableName = "Gen_Variant_Sizes")]
            public partial class VariantSize: EntityResource
            {
                public VariantSize(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_VariantSizes";
                public const string EntityTableName = "Gen_Variant_Sizes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Products_VariantStyles", TableName = "Gen_Variant_Styles")]
            public partial class VariantStyle: EntityResource
            {
                public VariantStyle(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Products_VariantStyles";
                public const string EntityTableName = "Gen_Variant_Styles";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        [Entity(EntitySet = "General_PropertiesCategories", TableName = "Gen_Properties_Categories")]
        public partial class PropertiesCategory: EntityResource
        {
            public PropertiesCategory(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_PropertiesCategories";
            public const string EntityTableName = "Gen_Properties_Categories";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_PropertyEnterpriseCompanyFilters", TableName = "Gen_Property_Enterprise_Company_Filters")]
        public partial class PropertyEnterpriseCompanyFilter: EntityResource
        {
            public PropertyEnterpriseCompanyFilter(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_PropertyEnterpriseCompanyFilters";
            public const string EntityTableName = "Gen_Property_Enterprise_Company_Filters";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? FilterXml { get => GetPropertyValue<String?>("FilterXml"); set => SetPropertyValue<String?>("FilterXml", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [Owner]
            [ODataProperty]
            public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_PropertyValues", TableName = "Gen_Property_Values")]
        public partial class PropertyValue: EntityResource
        {
            public PropertyValue(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_PropertyValues";
            public const string EntityTableName = "Gen_Property_Values";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
            [ODataProperty]
            public Guid? EntityItemId { get => GetPropertyValue<Guid?>("EntityItemId"); set => SetPropertyValue<Guid?>("EntityItemId", value); }
            [ODataProperty]
            public Byte[]? Picture { get => GetPropertyValue<Byte[]?>("Picture"); set => SetPropertyValue<Byte[]?>("Picture", value); }
            [ODataProperty]
            public String? PropertyValueField { get => GetPropertyValue<String?>("PropertyValueField"); set => SetPropertyValue<String?>("PropertyValueField", value); }
            [ODataProperty]
            public Guid? ValueId { get => GetPropertyValue<Guid?>("ValueId"); set => SetPropertyValue<Guid?>("ValueId", value); }
            [ODataProperty]
            public General.CustomProperty? Property { get => GetPropertyValue<General.CustomProperty>("Property"); set => SetPropertyValue<General.CustomProperty>("Property", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_Reports", TableName = "Gen_Reports")]
        public partial class Report: EntityResource
        {
            public Report(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_Reports";
            public const string EntityTableName = "Gen_Reports";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? IsTable { get => GetPropertyValue<Boolean?>("IsTable"); set => SetPropertyValue<Boolean?>("IsTable", value); }
            [ODataProperty]
            public String? QueryName { get => GetPropertyValue<String?>("QueryName"); set => SetPropertyValue<String?>("QueryName", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public Boolean? ShowParentTables { get => GetPropertyValue<Boolean?>("ShowParentTables"); set => SetPropertyValue<Boolean?>("ShowParentTables", value); }
            [ODataProperty]
            public IEnumerable<General.ReportQuery>? Queries { get => GetCollection<General.ReportQuery>("Queries"); set => SetCollection<General.ReportQuery>("Queries", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "General_ReportQueries", TableName = "Gen_Report_Queries")]
        public partial class ReportQuery: EntityResource
        {
            public ReportQuery(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_ReportQueries";
            public const string EntityTableName = "Gen_Report_Queries";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? DependsOnChildRows { get => GetPropertyValue<Boolean?>("DependsOnChildRows"); set => SetPropertyValue<Boolean?>("DependsOnChildRows", value); }
            [ODataProperty]
            public String? ExtensionsList { get => GetPropertyValue<String?>("ExtensionsList"); set => SetPropertyValue<String?>("ExtensionsList", value); }
            [ODataProperty]
            public String? FilterXml { get => GetPropertyValue<String?>("FilterXml"); set => SetPropertyValue<String?>("FilterXml", value); }
            [ODataProperty]
            public String? ReferencePath { get => GetPropertyValue<String?>("ReferencePath"); set => SetPropertyValue<String?>("ReferencePath", value); }
            [ODataProperty]
            public Boolean? ShowCustomProperties { get => GetPropertyValue<Boolean?>("ShowCustomProperties"); set => SetPropertyValue<Boolean?>("ShowCustomProperties", value); }
            [ODataProperty]
            public Boolean? ShowTextColumns { get => GetPropertyValue<Boolean?>("ShowTextColumns"); set => SetPropertyValue<Boolean?>("ShowTextColumns", value); }
            [ODataProperty]
            public String? TableName { get => GetPropertyValue<String?>("TableName"); set => SetPropertyValue<String?>("TableName", value); }
            [ODataProperty]
            public String? UniqueName { get => GetPropertyValue<String?>("UniqueName"); set => SetPropertyValue<String?>("UniqueName", value); }
            [Owner]
            [ODataProperty]
            public General.Report? Report { get => GetPropertyValue<General.Report>("Report"); set => SetPropertyValue<General.Report>("Report", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace Resources
        {
            [Entity(EntitySet = "General_Resources_Resources", TableName = "Gen_Resources")]
            public partial class Resource: EntityResource
            {
                public Resource(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Resources_Resources";
                public const string EntityTableName = "Gen_Resources";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public General.Currency? CostingCurrency { get => GetPropertyValue<General.Currency>("CostingCurrency"); set => SetPropertyValue<General.Currency>("CostingCurrency", value); }
                [Owner]
                [ODataProperty]
                public General.Resources.ResourceGroup? ResourceGroup { get => GetPropertyValue<General.Resources.ResourceGroup>("ResourceGroup"); set => SetPropertyValue<General.Resources.ResourceGroup>("ResourceGroup", value); }
                [ODataProperty]
                public IEnumerable<General.Resources.ResourceAvailability>? Availability { get => GetCollection<General.Resources.ResourceAvailability>("Availability"); set => SetCollection<General.Resources.ResourceAvailability>("Availability", value); }
                [ODataProperty]
                public IEnumerable<General.Resources.ResourceCostRate>? CostRates { get => GetCollection<General.Resources.ResourceCostRate>("CostRates"); set => SetCollection<General.Resources.ResourceCostRate>("CostRates", value); }
                [ODataProperty]
                public IEnumerable<General.Resources.ResourceInstance>? Instances { get => GetCollection<General.Resources.ResourceInstance>("Instances"); set => SetCollection<General.Resources.ResourceInstance>("Instances", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Resources_ResourceAvailability", TableName = "Gen_Resource_Availability")]
            public partial class ResourceAvailability: EntityResource
            {
                public ResourceAvailability(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Resources_ResourceAvailability";
                public const string EntityTableName = "Gen_Resource_Availability";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? AvailableResources { get => GetPropertyValue<Decimal?>("AvailableResources"); set => SetPropertyValue<Decimal?>("AvailableResources", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public DateTime? ToDate { get => GetPropertyValue<DateTime?>("ToDate"); set => SetPropertyValue<DateTime?>("ToDate", value); }
                [Owner]
                [ODataProperty]
                public General.Resources.Resource? Resource { get => GetPropertyValue<General.Resources.Resource>("Resource"); set => SetPropertyValue<General.Resources.Resource>("Resource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Resources_ResourceCostRates", TableName = "Gen_Resource_Cost_Rates")]
            public partial class ResourceCostRate: EntityResource
            {
                public ResourceCostRate(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Resources_ResourceCostRates";
                public const string EntityTableName = "Gen_Resource_Cost_Rates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Amount? OvertimeRatePerHour { get => GetPropertyValue<Amount?>("OvertimeRatePerHour"); set => SetPropertyValue<Amount?>("OvertimeRatePerHour", value); }
                [ODataProperty]
                public Amount? PerUseCost { get => GetPropertyValue<Amount?>("PerUseCost"); set => SetPropertyValue<Amount?>("PerUseCost", value); }
                [ODataProperty]
                public Amount? StandardRatePerHour { get => GetPropertyValue<Amount?>("StandardRatePerHour"); set => SetPropertyValue<Amount?>("StandardRatePerHour", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [Owner]
                [ODataProperty]
                public General.Resources.Resource? Resource { get => GetPropertyValue<General.Resources.Resource>("Resource"); set => SetPropertyValue<General.Resources.Resource>("Resource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Resources_ResourceGroups", TableName = "Gen_Resource_Groups")]
            public partial class ResourceGroup: EntityResource
            {
                public ResourceGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Resources_ResourceGroups";
                public const string EntityTableName = "Gen_Resource_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Resources.ResourceGroup? Parent { get => GetPropertyValue<General.Resources.ResourceGroup>("Parent"); set => SetPropertyValue<General.Resources.ResourceGroup>("Parent", value); }
                [ODataProperty]
                public IEnumerable<General.Resources.Resource>? Resources { get => GetCollection<General.Resources.Resource>("Resources"); set => SetCollection<General.Resources.Resource>("Resources", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Resources_ResourceInstances", TableName = "Gen_Resource_Instances")]
            public partial class ResourceInstance: EntityResource
            {
                public ResourceInstance(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Resources_ResourceInstances";
                public const string EntityTableName = "Gen_Resource_Instances";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Finance.Assets.Asset? Asset { get => GetPropertyValue<Finance.Assets.Asset>("Asset"); set => SetPropertyValue<Finance.Assets.Asset>("Asset", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [Owner]
                [ODataProperty]
                public General.Resources.Resource? Resource { get => GetPropertyValue<General.Resources.Resource>("Resource"); set => SetPropertyValue<General.Resources.Resource>("Resource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "General_Resources_WorkSchedules", TableName = "Gen_Work_Schedules")]
            public partial class WorkSchedule: EntityResource
            {
                public WorkSchedule(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Resources_WorkSchedules";
                public const string EntityTableName = "Gen_Work_Schedules";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int16? NumberOfDays { get => GetPropertyValue<Int16?>("NumberOfDays"); set => SetPropertyValue<Int16?>("NumberOfDays", value); }
                [ODataProperty]
                public General.Resources.WorkSchedulesRepository.RecurrenceType? RecurrenceType { get => GetPropertyValue<General.Resources.WorkSchedulesRepository.RecurrenceType?>("RecurrenceType"); set => SetPropertyValue<General.Resources.WorkSchedulesRepository.RecurrenceType?>("RecurrenceType", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public IEnumerable<General.Resources.WorkScheduleWorkingTime>? WorkingTime { get => GetCollection<General.Resources.WorkScheduleWorkingTime>("WorkingTime"); set => SetCollection<General.Resources.WorkScheduleWorkingTime>("WorkingTime", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace WorkSchedulesRepository
            {
                public enum RecurrenceType
                {
                    RecurringEachXDays = 0,
                    RecurringEachMonth = 1,
                    RecurringEachWeek = 2
                }
            }
            [Entity(EntitySet = "General_Resources_WorkScheduleWorkingTime", TableName = "Gen_Work_Schedule_Working_Time")]
            public partial class WorkScheduleWorkingTime: EntityResource
            {
                public WorkScheduleWorkingTime(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "General_Resources_WorkScheduleWorkingTime";
                public const string EntityTableName = "Gen_Work_Schedule_Working_Time";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? DayNo { get => GetPropertyValue<Int32?>("DayNo"); set => SetPropertyValue<Int32?>("DayNo", value); }
                [ODataProperty]
                public TimeSpan? EndTime { get => GetPropertyValue<TimeSpan?>("EndTime"); set => SetPropertyValue<TimeSpan?>("EndTime", value); }
                [ODataProperty]
                public TimeSpan? StartTime { get => GetPropertyValue<TimeSpan?>("StartTime"); set => SetPropertyValue<TimeSpan?>("StartTime", value); }
                [Owner]
                [ODataProperty]
                public General.Resources.WorkSchedule? WorkSchedule { get => GetPropertyValue<General.Resources.WorkSchedule>("WorkSchedule"); set => SetPropertyValue<General.Resources.WorkSchedule>("WorkSchedule", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        [Entity(EntitySet = "General_SequenceGenerators", TableName = "Gen_Sequence_Generators")]
        public partial class SequenceGenerator: EntityResource
        {
            public SequenceGenerator(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "General_SequenceGenerators";
            public const string EntityTableName = "Gen_Sequence_Generators";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? AllowExplicitNumbering { get => GetPropertyValue<Boolean?>("AllowExplicitNumbering"); set => SetPropertyValue<Boolean?>("AllowExplicitNumbering", value); }
            [ODataProperty]
            public String? NextValue { get => GetPropertyValue<String?>("NextValue"); set => SetPropertyValue<String?>("NextValue", value); }
            [ODataProperty]
            public Int32? SequencePriority { get => GetPropertyValue<Int32?>("SequencePriority"); set => SetPropertyValue<Int32?>("SequencePriority", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
            [ODataProperty]
            public General.Contacts.Person? ResponsiblePerson { get => GetPropertyValue<General.Contacts.Person>("ResponsiblePerson"); set => SetPropertyValue<General.Contacts.Person>("ResponsiblePerson", value); }
            [Owner]
            [ODataProperty]
            public Systems.Core.Sequence? Sequence { get => GetPropertyValue<Systems.Core.Sequence>("Sequence"); set => SetPropertyValue<Systems.Core.Sequence>("Sequence", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        public enum SignRestriction
        {
            AllowAll = 0,
            AllowOnlyPositive = 1,
            AllowOnlyNegative = -1
        }
    }
    namespace Logistics
    {
        [Entity(EntitySet = "Logistics_CompositeProductComponents", TableName = "Log_Composite_Product_Components")]
        public partial class CompositeProductComponent: EntityResource
        {
            public CompositeProductComponent(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Logistics_CompositeProductComponents";
            public const string EntityTableName = "Log_Composite_Product_Components";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Int32? ComponentNo { get => GetPropertyValue<Int32?>("ComponentNo"); set => SetPropertyValue<Int32?>("ComponentNo", value); }
            [ODataProperty]
            public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
            [ODataProperty]
            public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Decimal? Quantity { get => GetPropertyValue<Decimal?>("Quantity"); set => SetPropertyValue<Decimal?>("Quantity", value); }
            [ODataProperty]
            public DateTime? ToDate { get => GetPropertyValue<DateTime?>("ToDate"); set => SetPropertyValue<DateTime?>("ToDate", value); }
            [ODataProperty]
            public General.Products.Product? ComponentProduct { get => GetPropertyValue<General.Products.Product>("ComponentProduct"); set => SetPropertyValue<General.Products.Product>("ComponentProduct", value); }
            [Owner]
            [ODataProperty]
            public General.Products.Product? CompositeProduct { get => GetPropertyValue<General.Products.Product>("CompositeProduct"); set => SetPropertyValue<General.Products.Product>("CompositeProduct", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace Inventory
        {
            [Entity(EntitySet = "Logistics_Inventory_CostCorrections", TableName = "Inv_Cost_Corrections")]
            public partial class CostCorrection: General.Document
            {
                public CostCorrection(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Inventory_CostCorrections";
                public new const string EntityTableName = "Inv_Cost_Corrections";
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransaction? CorrectedTransaction { get => GetPropertyValue<Logistics.Inventory.StoreTransaction>("CorrectedTransaction"); set => SetPropertyValue<Logistics.Inventory.StoreTransaction>("CorrectedTransaction", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransaction? SourceTransaction { get => GetPropertyValue<Logistics.Inventory.StoreTransaction>("SourceTransaction"); set => SetPropertyValue<Logistics.Inventory.StoreTransaction>("SourceTransaction", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.CostCorrectionLine>? Lines { get => GetCollection<Logistics.Inventory.CostCorrectionLine>("Lines"); set => SetCollection<Logistics.Inventory.CostCorrectionLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_CostCorrectionLines", TableName = "Inv_Cost_Correction_Lines")]
            public partial class CostCorrectionLine: EntityResource
            {
                public CostCorrectionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_CostCorrectionLines";
                public const string EntityTableName = "Inv_Cost_Correction_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? BaseCostAdjustment { get => GetPropertyValue<Amount?>("BaseCostAdjustment"); set => SetPropertyValue<Amount?>("BaseCostAdjustment", value); }
                [ODataProperty]
                public Amount? CostCorrectionAmount { get => GetPropertyValue<Amount?>("CostCorrectionAmount"); set => SetPropertyValue<Amount?>("CostCorrectionAmount", value); }
                [ODataProperty]
                public Amount? ProductCostAdjustment { get => GetPropertyValue<Amount?>("ProductCostAdjustment"); set => SetPropertyValue<Amount?>("ProductCostAdjustment", value); }
                [ODataProperty]
                public Amount? StoreCostAdjustment { get => GetPropertyValue<Amount?>("StoreCostAdjustment"); set => SetPropertyValue<Amount?>("StoreCostAdjustment", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Inventory.CostCorrection? CostCorrection { get => GetPropertyValue<Logistics.Inventory.CostCorrection>("CostCorrection"); set => SetPropertyValue<Logistics.Inventory.CostCorrection>("CostCorrection", value); }
                [ODataProperty]
                public Logistics.Inventory.CostCorrection? Document { get => GetPropertyValue<Logistics.Inventory.CostCorrection>("Document"); set => SetPropertyValue<Logistics.Inventory.CostCorrection>("Document", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransactionLine? TransactionLine { get => GetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine"); set => SetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_CostCorrectionsOptions", TableName = "Inv_Cost_Corrections_Options")]
            public partial class CostCorrectionsOption: EntityResource
            {
                public CostCorrectionsOption(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_CostCorrectionsOptions";
                public const string EntityTableName = "Inv_Cost_Corrections_Options";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? ResetTransactionsStateOnReleasing { get => GetPropertyValue<Boolean?>("ResetTransactionsStateOnReleasing"); set => SetPropertyValue<Boolean?>("ResetTransactionsStateOnReleasing", value); }
                [ODataProperty]
                public Boolean? ScheduleDocumentEvents { get => GetPropertyValue<Boolean?>("ScheduleDocumentEvents"); set => SetPropertyValue<Boolean?>("ScheduleDocumentEvents", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_CurrentBalances")]
            public partial class CurrentBalance: EntityResource
            {
                public CurrentBalance(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_CurrentBalances";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Amount? BaseCost { get => GetPropertyValue<Amount?>("BaseCost"); set => SetPropertyValue<Amount?>("BaseCost", value); }
                [ODataProperty]
                public Amount? ProductCost { get => GetPropertyValue<Amount?>("ProductCost"); set => SetPropertyValue<Amount?>("ProductCost", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Amount? StoreCost { get => GetPropertyValue<Amount?>("StoreCost"); set => SetPropertyValue<Amount?>("StoreCost", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
            }
            namespace DemandManagement
            {
                [Entity(EntitySet = "Logistics_Inventory_DemandManagement_AvailableToPromiseByLots")]
                public partial class AvailableToPromiseByLotsEntry: EntityResource
                {
                    public AvailableToPromiseByLotsEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                    public const string EntitySetName = "Logistics_Inventory_DemandManagement_AvailableToPromiseByLots";
                    public const string EntityTableName = "";
                    [ODataProperty]
                    public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                    [ODataProperty]
                    public Quantity? ATPBase { get => GetPropertyValue<Quantity?>("ATPBase"); set => SetPropertyValue<Quantity?>("ATPBase", value); }
                    [ODataProperty]
                    public Quantity? CurrentAvailabilityBase { get => GetPropertyValue<Quantity?>("CurrentAvailabilityBase"); set => SetPropertyValue<Quantity?>("CurrentAvailabilityBase", value); }
                    [ODataProperty]
                    public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                    [ODataProperty]
                    public Quantity? MovementsBase { get => GetPropertyValue<Quantity?>("MovementsBase"); set => SetPropertyValue<Quantity?>("MovementsBase", value); }
                    [ODataProperty]
                    public Quantity? MovementsToDateBase { get => GetPropertyValue<Quantity?>("MovementsToDateBase"); set => SetPropertyValue<Quantity?>("MovementsToDateBase", value); }
                    [ODataProperty]
                    public Quantity? ProjectedAvailabilityBase { get => GetPropertyValue<Quantity?>("ProjectedAvailabilityBase"); set => SetPropertyValue<Quantity?>("ProjectedAvailabilityBase", value); }
                    [ODataProperty]
                    public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                    [ODataProperty]
                    public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                    [ODataProperty]
                    public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                    [ODataProperty]
                    public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                }
                [Entity(EntitySet = "Logistics_Inventory_DemandManagement_AvailableToPromise")]
                public partial class AvailableToPromiseEntry: EntityResource
                {
                    public AvailableToPromiseEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                    public const string EntitySetName = "Logistics_Inventory_DemandManagement_AvailableToPromise";
                    public const string EntityTableName = "";
                    [ODataProperty]
                    public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                    [ODataProperty]
                    public Quantity? ATPBase { get => GetPropertyValue<Quantity?>("ATPBase"); set => SetPropertyValue<Quantity?>("ATPBase", value); }
                    [ODataProperty]
                    public Quantity? CurrentAvailabilityBase { get => GetPropertyValue<Quantity?>("CurrentAvailabilityBase"); set => SetPropertyValue<Quantity?>("CurrentAvailabilityBase", value); }
                    [ODataProperty]
                    public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                    [ODataProperty]
                    public Quantity? MovementsBase { get => GetPropertyValue<Quantity?>("MovementsBase"); set => SetPropertyValue<Quantity?>("MovementsBase", value); }
                    [ODataProperty]
                    public Quantity? MovementsToDateBase { get => GetPropertyValue<Quantity?>("MovementsToDateBase"); set => SetPropertyValue<Quantity?>("MovementsToDateBase", value); }
                    [ODataProperty]
                    public Quantity? ProjectedAvailabilityBase { get => GetPropertyValue<Quantity?>("ProjectedAvailabilityBase"); set => SetPropertyValue<Quantity?>("ProjectedAvailabilityBase", value); }
                    [ODataProperty]
                    public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                    [ODataProperty]
                    public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                    [ODataProperty]
                    public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                }
            }
            [Entity(EntitySet = "Logistics_Inventory_Lots", TableName = "Inv_Lots")]
            public partial class Lot: EntityResource
            {
                public Lot(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_Lots";
                public const string EntityTableName = "Inv_Lots";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? AlcoholicStrength { get => GetPropertyValue<Decimal?>("AlcoholicStrength"); set => SetPropertyValue<Decimal?>("AlcoholicStrength", value); }
                [ODataProperty]
                public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
                [ODataProperty]
                public DateTime? ExpiryDate { get => GetPropertyValue<DateTime?>("ExpiryDate"); set => SetPropertyValue<DateTime?>("ExpiryDate", value); }
                [ODataProperty]
                public String? LicenseNo { get => GetPropertyValue<String?>("LicenseNo"); set => SetPropertyValue<String?>("LicenseNo", value); }
                [ODataProperty]
                public String? Number { get => GetPropertyValue<String?>("Number"); set => SetPropertyValue<String?>("Number", value); }
                [ODataProperty]
                public Guid? ProductionBatchId { get => GetPropertyValue<Guid?>("ProductionBatchId"); set => SetPropertyValue<Guid?>("ProductionBatchId", value); }
                [ODataProperty]
                public String? PurchaseLotNumber { get => GetPropertyValue<String?>("PurchaseLotNumber"); set => SetPropertyValue<String?>("PurchaseLotNumber", value); }
                [ODataProperty]
                public DateTime? ReceiptDate { get => GetPropertyValue<DateTime?>("ReceiptDate"); set => SetPropertyValue<DateTime?>("ReceiptDate", value); }
                [ODataProperty]
                public Logistics.Inventory.LotsRepository.Status? Status { get => GetPropertyValue<Logistics.Inventory.LotsRepository.Status?>("Status"); set => SetPropertyValue<Logistics.Inventory.LotsRepository.Status?>("Status", value); }
                [ODataProperty]
                public General.Document? BlockedForDocument { get => GetPropertyValue<General.Document>("BlockedForDocument"); set => SetPropertyValue<General.Document>("BlockedForDocument", value); }
                [ODataProperty]
                public General.Contacts.Party? BlockedForParty { get => GetPropertyValue<General.Contacts.Party>("BlockedForParty"); set => SetPropertyValue<General.Contacts.Party>("BlockedForParty", value); }
                [ODataProperty]
                public General.Document? CertificateDocument { get => GetPropertyValue<General.Document>("CertificateDocument"); set => SetPropertyValue<General.Document>("CertificateDocument", value); }
                [ODataProperty]
                public Finance.Excise.MeasuringTransaction? ExciseMeasuringTransaction { get => GetPropertyValue<Finance.Excise.MeasuringTransaction>("ExciseMeasuringTransaction"); set => SetPropertyValue<Finance.Excise.MeasuringTransaction>("ExciseMeasuringTransaction", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransaction? ReceiptStoreTransaction { get => GetPropertyValue<Logistics.Inventory.StoreTransaction>("ReceiptStoreTransaction"); set => SetPropertyValue<Logistics.Inventory.StoreTransaction>("ReceiptStoreTransaction", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace LotsRepository
            {
                public enum Status
                {
                    FreeToUse = 0,
                    BlockedForDocument = -3,
                    BlockedForParty = -2,
                    BlockedForInspection = -1
                }
            }
            public enum MovementType
            {
                Issue = 0,
                Receipt = 1
            }
            [Entity(EntitySet = "Logistics_Inventory_ProductDefaultStoreBins", TableName = "Inv_Product_Default_Store_Bins")]
            public partial class ProductDefaultStoreBin: EntityResource
            {
                public ProductDefaultStoreBin(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_ProductDefaultStoreBins";
                public const string EntityTableName = "Inv_Product_Default_Store_Bins";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? DefaultBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("DefaultBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("DefaultBin", value); }
                [Owner]
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_ProductValuationGroups", TableName = "Inv_Product_Valuation_Groups")]
            public partial class ProductValuationGroup: EntityResource
            {
                public ProductValuationGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_ProductValuationGroups";
                public const string EntityTableName = "Inv_Product_Valuation_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public String? ValuationGroupCode { get => GetPropertyValue<String?>("ValuationGroupCode"); set => SetPropertyValue<String?>("ValuationGroupCode", value); }
                [ODataProperty]
                public MultilanguageString? ValuationGroupName { get => GetPropertyValue<MultilanguageString?>("ValuationGroupName"); set => SetPropertyValue<MultilanguageString?>("ValuationGroupName", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_Reconciliations", TableName = "Inv_Reconciliations")]
            public partial class Reconciliation: General.Document
            {
                public Reconciliation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Inventory_Reconciliations";
                public new const string EntityTableName = "Inv_Reconciliations";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public General.Products.ProductGroup? DefaultProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("DefaultProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("DefaultProductGroup", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? DefaultStoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("DefaultStoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("DefaultStoreBin", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? DefaultStore { get => GetPropertyValue<Logistics.Inventory.Store>("DefaultStore"); set => SetPropertyValue<Logistics.Inventory.Store>("DefaultStore", value); }
                [ODataProperty]
                public Logistics.Inventory.ProductValuationGroup? DefaultValuationGroup { get => GetPropertyValue<Logistics.Inventory.ProductValuationGroup>("DefaultValuationGroup"); set => SetPropertyValue<Logistics.Inventory.ProductValuationGroup>("DefaultValuationGroup", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.ReconciliationLine>? Lines { get => GetCollection<Logistics.Inventory.ReconciliationLine>("Lines"); set => SetCollection<Logistics.Inventory.ReconciliationLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_ReconciliationLines", TableName = "Inv_Reconciliation_Lines")]
            public partial class ReconciliationLine: EntityResource
            {
                public ReconciliationLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_ReconciliationLines";
                public const string EntityTableName = "Inv_Reconciliation_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? AvailableQuantityBase { get => GetPropertyValue<Quantity?>("AvailableQuantityBase"); set => SetPropertyValue<Quantity?>("AvailableQuantityBase", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public DateTime? TransactionTimestamp { get => GetPropertyValue<DateTime?>("TransactionTimestamp"); set => SetPropertyValue<DateTime?>("TransactionTimestamp", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Inventory.Reconciliation? Reconciliation { get => GetPropertyValue<Logistics.Inventory.Reconciliation>("Reconciliation"); set => SetPropertyValue<Logistics.Inventory.Reconciliation>("Reconciliation", value); }
                [ODataProperty]
                public Logistics.Inventory.Reconciliation? Document { get => GetPropertyValue<Logistics.Inventory.Reconciliation>("Document"); set => SetPropertyValue<Logistics.Inventory.Reconciliation>("Document", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseTransaction? WarehouseTransaction { get => GetPropertyValue<Logistics.Wms.WarehouseTransaction>("WarehouseTransaction"); set => SetPropertyValue<Logistics.Wms.WarehouseTransaction>("WarehouseTransaction", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_RequisitionPlan", TableName = "Inv_Requisition_Plan")]
            public partial class RequisitionPlan: EntityResource
            {
                public RequisitionPlan(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_RequisitionPlan";
                public const string EntityTableName = "Inv_Requisition_Plan";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CalendarDate { get => GetPropertyValue<DateTime?>("CalendarDate"); set => SetPropertyValue<DateTime?>("CalendarDate", value); }
                [ODataProperty]
                public DateTime? CompletionDate { get => GetPropertyValue<DateTime?>("CompletionDate"); set => SetPropertyValue<DateTime?>("CompletionDate", value); }
                [ODataProperty]
                public Boolean? ConfirmAction { get => GetPropertyValue<Boolean?>("ConfirmAction"); set => SetPropertyValue<Boolean?>("ConfirmAction", value); }
                [ODataProperty]
                public String? ExplanationMessage { get => GetPropertyValue<String?>("ExplanationMessage"); set => SetPropertyValue<String?>("ExplanationMessage", value); }
                [ODataProperty]
                public Quantity? FirmPlannedOrderReceipts { get => GetPropertyValue<Quantity?>("FirmPlannedOrderReceipts"); set => SetPropertyValue<Quantity?>("FirmPlannedOrderReceipts", value); }
                [ODataProperty]
                public Quantity? FirmPlannedOrderReleases { get => GetPropertyValue<Quantity?>("FirmPlannedOrderReleases"); set => SetPropertyValue<Quantity?>("FirmPlannedOrderReleases", value); }
                [ODataProperty]
                public DateTime? GenerationDate { get => GetPropertyValue<DateTime?>("GenerationDate"); set => SetPropertyValue<DateTime?>("GenerationDate", value); }
                [ODataProperty]
                public Quantity? GrossRequirements { get => GetPropertyValue<Quantity?>("GrossRequirements"); set => SetPropertyValue<Quantity?>("GrossRequirements", value); }
                [ODataProperty]
                public Quantity? NetRequirements { get => GetPropertyValue<Quantity?>("NetRequirements"); set => SetPropertyValue<Quantity?>("NetRequirements", value); }
                [ODataProperty]
                public Quantity? PlannedOrderReceipts { get => GetPropertyValue<Quantity?>("PlannedOrderReceipts"); set => SetPropertyValue<Quantity?>("PlannedOrderReceipts", value); }
                [ODataProperty]
                public Quantity? PlannedOrderReleases { get => GetPropertyValue<Quantity?>("PlannedOrderReleases"); set => SetPropertyValue<Quantity?>("PlannedOrderReleases", value); }
                [ODataProperty]
                public Quantity? ProjectedAvailableBalance { get => GetPropertyValue<Quantity?>("ProjectedAvailableBalance"); set => SetPropertyValue<Quantity?>("ProjectedAvailableBalance", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public DateTime? ReleaseDate { get => GetPropertyValue<DateTime?>("ReleaseDate"); set => SetPropertyValue<DateTime?>("ReleaseDate", value); }
                [ODataProperty]
                public Quantity? ScheduledReceipts { get => GetPropertyValue<Quantity?>("ScheduledReceipts"); set => SetPropertyValue<Quantity?>("ScheduledReceipts", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? FromStore { get => GetPropertyValue<Logistics.Inventory.Store>("FromStore"); set => SetPropertyValue<Logistics.Inventory.Store>("FromStore", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public Logistics.Procurement.Supplier? Supplier { get => GetPropertyValue<Logistics.Procurement.Supplier>("Supplier"); set => SetPropertyValue<Logistics.Procurement.Supplier>("Supplier", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_ScrapTypes", TableName = "Inv_Scrap_Types")]
            public partial class ScrapType: EntityResource
            {
                public ScrapType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_ScrapTypes";
                public const string EntityTableName = "Inv_Scrap_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Boolean? IsPlanned { get => GetPropertyValue<Boolean?>("IsPlanned"); set => SetPropertyValue<Boolean?>("IsPlanned", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_SerialNumbers", TableName = "Inv_Serial_Numbers")]
            public partial class SerialNumber: EntityResource
            {
                public SerialNumber(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_SerialNumbers";
                public const string EntityTableName = "Inv_Serial_Numbers";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? SerialNumberField { get => GetPropertyValue<String?>("SerialNumberField"); set => SetPropertyValue<String?>("SerialNumberField", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_Stores", TableName = "Inv_Stores")]
            public partial class Store: General.Contacts.Party
            {
                public Store(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Inventory_Stores";
                public new const string EntityTableName = "Inv_Stores";
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
                [ODataProperty]
                public String? CreationUser { get => GetPropertyValue<String?>("CreationUser"); set => SetPropertyValue<String?>("CreationUser", value); }
                [ODataProperty]
                public Guid? DefaultSupplyStoreId { get => GetPropertyValue<Guid?>("DefaultSupplyStoreId"); set => SetPropertyValue<Guid?>("DefaultSupplyStoreId", value); }
                [ODataProperty]
                public Int32? NumberOfDimensions { get => GetPropertyValue<Int32?>("NumberOfDimensions"); set => SetPropertyValue<Int32?>("NumberOfDimensions", value); }
                [ODataProperty]
                public String? SchemaXML { get => GetPropertyValue<String?>("SchemaXML"); set => SetPropertyValue<String?>("SchemaXML", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Boolean? Unmanaged { get => GetPropertyValue<Boolean?>("Unmanaged"); set => SetPropertyValue<Boolean?>("Unmanaged", value); }
                [ODataProperty]
                public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
                [ODataProperty]
                public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? DefaultStoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("DefaultStoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("DefaultStoreBin", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Parent { get => GetPropertyValue<Logistics.Inventory.Store>("Parent"); set => SetPropertyValue<Logistics.Inventory.Store>("Parent", value); }
                [ODataProperty]
                public General.Contacts.Party? ResponsibleParty { get => GetPropertyValue<General.Contacts.Party>("ResponsibleParty"); set => SetPropertyValue<General.Contacts.Party>("ResponsibleParty", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreGroup? StoreGroup { get => GetPropertyValue<Logistics.Inventory.StoreGroup>("StoreGroup"); set => SetPropertyValue<Logistics.Inventory.StoreGroup>("StoreGroup", value); }
                [ODataProperty]
                public Finance.Excise.TaxWarehouse? TaxWarehouse { get => GetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse"); set => SetPropertyValue<Finance.Excise.TaxWarehouse>("TaxWarehouse", value); }
                [ODataProperty]
                public Logistics.Wms.Warehouse? Warehouse { get => GetPropertyValue<Logistics.Wms.Warehouse>("Warehouse"); set => SetPropertyValue<Logistics.Wms.Warehouse>("Warehouse", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.StoreBin>? Bins { get => GetCollection<Logistics.Inventory.StoreBin>("Bins"); set => SetCollection<Logistics.Inventory.StoreBin>("Bins", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.StoreResponsibleParty>? ResponsibleParties { get => GetCollection<Logistics.Inventory.StoreResponsibleParty>("ResponsibleParties"); set => SetCollection<Logistics.Inventory.StoreResponsibleParty>("ResponsibleParties", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_StoreBins", TableName = "Inv_Store_Bins")]
            public partial class StoreBin: EntityResource
            {
                public StoreBin(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_StoreBins";
                public const string EntityTableName = "Inv_Store_Bins";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public General.Contacts.Party? BlockedForParty { get => GetPropertyValue<General.Contacts.Party>("BlockedForParty"); set => SetPropertyValue<General.Contacts.Party>("BlockedForParty", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_StoreGroups", TableName = "Inv_Store_Groups")]
            public partial class StoreGroup: EntityResource
            {
                public StoreGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_StoreGroups";
                public const string EntityTableName = "Inv_Store_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? ParentFullPath { get => GetPropertyValue<String?>("ParentFullPath"); set => SetPropertyValue<String?>("ParentFullPath", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? EnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("EnterpriseCompanyLocation", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreGroup? Parent { get => GetPropertyValue<Logistics.Inventory.StoreGroup>("Parent"); set => SetPropertyValue<Logistics.Inventory.StoreGroup>("Parent", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_StoreOrders", TableName = "Inv_Store_Orders")]
            public partial class StoreOrder: General.Document
            {
                public StoreOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Inventory_StoreOrders";
                public new const string EntityTableName = "Inv_Store_Orders";
                [ODataProperty]
                public String? DriverName { get => GetPropertyValue<String?>("DriverName"); set => SetPropertyValue<String?>("DriverName", value); }
                [ODataProperty]
                public DateTime? DueDate { get => GetPropertyValue<DateTime?>("DueDate"); set => SetPropertyValue<DateTime?>("DueDate", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public Logistics.Inventory.MovementType? MovementType { get => GetPropertyValue<Logistics.Inventory.MovementType?>("MovementType"); set => SetPropertyValue<Logistics.Inventory.MovementType?>("MovementType", value); }
                [ODataProperty]
                public DateTime? PlannedCompletionDate { get => GetPropertyValue<DateTime?>("PlannedCompletionDate"); set => SetPropertyValue<DateTime?>("PlannedCompletionDate", value); }
                [ODataProperty]
                public DateTime? PlannedReleaseDate { get => GetPropertyValue<DateTime?>("PlannedReleaseDate"); set => SetPropertyValue<DateTime?>("PlannedReleaseDate", value); }
                [ODataProperty]
                public String? Status { get => GetPropertyValue<String?>("Status"); set => SetPropertyValue<String?>("Status", value); }
                [ODataProperty]
                public String? TempTransportCompanyName { get => GetPropertyValue<String?>("TempTransportCompanyName"); set => SetPropertyValue<String?>("TempTransportCompanyName", value); }
                [ODataProperty]
                public String? VehicleRegNumber { get => GetPropertyValue<String?>("VehicleRegNumber"); set => SetPropertyValue<String?>("VehicleRegNumber", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public General.Contacts.Party? IssuedByParty { get => GetPropertyValue<General.Contacts.Party>("IssuedByParty"); set => SetPropertyValue<General.Contacts.Party>("IssuedByParty", value); }
                [ODataProperty]
                public General.Contacts.Person? OrderingPerson { get => GetPropertyValue<General.Contacts.Person>("OrderingPerson"); set => SetPropertyValue<General.Contacts.Person>("OrderingPerson", value); }
                [ODataProperty]
                public General.Contacts.Party? ReceivedByParty { get => GetPropertyValue<General.Contacts.Party>("ReceivedByParty"); set => SetPropertyValue<General.Contacts.Party>("ReceivedByParty", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.StoreOrderLine>? Lines { get => GetCollection<Logistics.Inventory.StoreOrderLine>("Lines"); set => SetCollection<Logistics.Inventory.StoreOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_StoreOrderLines", TableName = "Inv_Store_Order_Lines")]
            public partial class StoreOrderLine: EntityResource
            {
                public StoreOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_StoreOrderLines";
                public const string EntityTableName = "Inv_Store_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? ForOrdering { get => GetPropertyValue<Boolean?>("ForOrdering"); set => SetPropertyValue<Boolean?>("ForOrdering", value); }
                [ODataProperty]
                public Int32? GuaranteePeriodDays { get => GetPropertyValue<Int32?>("GuaranteePeriodDays"); set => SetPropertyValue<Int32?>("GuaranteePeriodDays", value); }
                [ODataProperty]
                public Amount? LineCost { get => GetPropertyValue<Amount?>("LineCost"); set => SetPropertyValue<Amount?>("LineCost", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? LotNumber { get => GetPropertyValue<String?>("LotNumber"); set => SetPropertyValue<String?>("LotNumber", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Guid? ParentLineId { get => GetPropertyValue<Guid?>("ParentLineId"); set => SetPropertyValue<Guid?>("ParentLineId", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Boolean? PersistLot { get => GetPropertyValue<Boolean?>("PersistLot"); set => SetPropertyValue<Boolean?>("PersistLot", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public DateTime? TransactionTimestamp { get => GetPropertyValue<DateTime?>("TransactionTimestamp"); set => SetPropertyValue<DateTime?>("TransactionTimestamp", value); }
                [ODataProperty]
                public Amount? UnitCost { get => GetPropertyValue<Amount?>("UnitCost"); set => SetPropertyValue<Amount?>("UnitCost", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrderLine? SalesOrderLine { get => GetPropertyValue<Crm.Sales.SalesOrderLine>("SalesOrderLine"); set => SetPropertyValue<Crm.Sales.SalesOrderLine>("SalesOrderLine", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Inventory.StoreOrder? StoreOrder { get => GetPropertyValue<Logistics.Inventory.StoreOrder>("StoreOrder"); set => SetPropertyValue<Logistics.Inventory.StoreOrder>("StoreOrder", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreOrder? Document { get => GetPropertyValue<Logistics.Inventory.StoreOrder>("Document"); set => SetPropertyValue<Logistics.Inventory.StoreOrder>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_StoreOrderLinesUnfulfilledView")]
            public partial class StoreOrderLinesUnfulfilledViewEntry: EntityResource
            {
                public StoreOrderLinesUnfulfilledViewEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_StoreOrderLinesUnfulfilledView";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public DateTime? DocumentDate { get => GetPropertyValue<DateTime?>("DocumentDate"); set => SetPropertyValue<DateTime?>("DocumentDate", value); }
                [ODataProperty]
                public Int32? IsFulfilled { get => GetPropertyValue<Int32?>("IsFulfilled"); set => SetPropertyValue<Int32?>("IsFulfilled", value); }
                [ODataProperty]
                public Int32? IsQuantityFulfilled { get => GetPropertyValue<Int32?>("IsQuantityFulfilled"); set => SetPropertyValue<Int32?>("IsQuantityFulfilled", value); }
                [ODataProperty]
                public Decimal? OrderRemainingLineCost { get => GetPropertyValue<Decimal?>("OrderRemainingLineCost"); set => SetPropertyValue<Decimal?>("OrderRemainingLineCost", value); }
                [ODataProperty]
                public Decimal? OrderRemainingQuantityBase { get => GetPropertyValue<Decimal?>("OrderRemainingQuantityBase"); set => SetPropertyValue<Decimal?>("OrderRemainingQuantityBase", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreOrderLine? StoreOrderLine { get => GetPropertyValue<Logistics.Inventory.StoreOrderLine>("StoreOrderLine"); set => SetPropertyValue<Logistics.Inventory.StoreOrderLine>("StoreOrderLine", value); }
            }
            [Entity(EntitySet = "Logistics_Inventory_StoreResponsibleParties", TableName = "Inv_Store_Responsible_Parties")]
            public partial class StoreResponsibleParty: EntityResource
            {
                public StoreResponsibleParty(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_StoreResponsibleParties";
                public const string EntityTableName = "Inv_Store_Responsible_Parties";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public General.Contacts.Party? ResponsibleParty { get => GetPropertyValue<General.Contacts.Party>("ResponsibleParty"); set => SetPropertyValue<General.Contacts.Party>("ResponsibleParty", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_StoreTransactions", TableName = "Inv_Transactions")]
            public partial class StoreTransaction: General.Document
            {
                public StoreTransaction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Inventory_StoreTransactions";
                public new const string EntityTableName = "Inv_Transactions";
                [ODataProperty]
                public Logistics.Inventory.StoreTransactionsRepository.CostSource? CostSource { get => GetPropertyValue<Logistics.Inventory.StoreTransactionsRepository.CostSource?>("CostSource"); set => SetPropertyValue<Logistics.Inventory.StoreTransactionsRepository.CostSource?>("CostSource", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsScrap { get => GetPropertyValue<Boolean?>("IsScrap"); set => SetPropertyValue<Boolean?>("IsScrap", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public Boolean? IsValidField { get => GetPropertyValue<Boolean?>("IsValidField"); set => SetPropertyValue<Boolean?>("IsValidField", value); }
                [ODataProperty]
                public Logistics.Inventory.MovementType? MovementType { get => GetPropertyValue<Logistics.Inventory.MovementType?>("MovementType"); set => SetPropertyValue<Logistics.Inventory.MovementType?>("MovementType", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public General.Contacts.Person? IssuingPerson { get => GetPropertyValue<General.Contacts.Person>("IssuingPerson"); set => SetPropertyValue<General.Contacts.Person>("IssuingPerson", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreOrder? ParentStoreOrder { get => GetPropertyValue<Logistics.Inventory.StoreOrder>("ParentStoreOrder"); set => SetPropertyValue<Logistics.Inventory.StoreOrder>("ParentStoreOrder", value); }
                [ODataProperty]
                public General.Contacts.Person? ReceivingPerson { get => GetPropertyValue<General.Contacts.Person>("ReceivingPerson"); set => SetPropertyValue<General.Contacts.Person>("ReceivingPerson", value); }
                [ODataProperty]
                public Logistics.Inventory.ScrapType? ScrapType { get => GetPropertyValue<Logistics.Inventory.ScrapType>("ScrapType"); set => SetPropertyValue<Logistics.Inventory.ScrapType>("ScrapType", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.StoreTransactionLine>? Lines { get => GetCollection<Logistics.Inventory.StoreTransactionLine>("Lines"); set => SetCollection<Logistics.Inventory.StoreTransactionLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_StoreTransactionLines", TableName = "Inv_Transaction_Lines")]
            public partial class StoreTransactionLine: EntityResource
            {
                public StoreTransactionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_StoreTransactionLines";
                public const string EntityTableName = "Inv_Transaction_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? AllowOverExecution { get => GetPropertyValue<Boolean?>("AllowOverExecution"); set => SetPropertyValue<Boolean?>("AllowOverExecution", value); }
                [ODataProperty]
                public Boolean? Finished { get => GetPropertyValue<Boolean?>("Finished"); set => SetPropertyValue<Boolean?>("Finished", value); }
                [ODataProperty]
                public Int32? GuaranteePeriodDays { get => GetPropertyValue<Int32?>("GuaranteePeriodDays"); set => SetPropertyValue<Int32?>("GuaranteePeriodDays", value); }
                [ODataProperty]
                public Amount? LineBaseCost { get => GetPropertyValue<Amount?>("LineBaseCost"); set => SetPropertyValue<Amount?>("LineBaseCost", value); }
                [ODataProperty]
                public Amount? LineCost { get => GetPropertyValue<Amount?>("LineCost"); set => SetPropertyValue<Amount?>("LineCost", value); }
                [ODataProperty]
                public Amount? LineDocumentCost { get => GetPropertyValue<Amount?>("LineDocumentCost"); set => SetPropertyValue<Amount?>("LineDocumentCost", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Amount? LineProductCost { get => GetPropertyValue<Amount?>("LineProductCost"); set => SetPropertyValue<Amount?>("LineProductCost", value); }
                [ODataProperty]
                public Amount? LineStoreCost { get => GetPropertyValue<Amount?>("LineStoreCost"); set => SetPropertyValue<Amount?>("LineStoreCost", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Guid? ParentLineId { get => GetPropertyValue<Guid?>("ParentLineId"); set => SetPropertyValue<Guid?>("ParentLineId", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public String? TempOrderNo { get => GetPropertyValue<String?>("TempOrderNo"); set => SetPropertyValue<String?>("TempOrderNo", value); }
                [ODataProperty]
                public DateTime? TransactionTimestamp { get => GetPropertyValue<DateTime?>("TransactionTimestamp"); set => SetPropertyValue<DateTime?>("TransactionTimestamp", value); }
                [ODataProperty]
                public Amount? UnitCost { get => GetPropertyValue<Amount?>("UnitCost"); set => SetPropertyValue<Amount?>("UnitCost", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? OriginalProduct { get => GetPropertyValue<General.Products.Product>("OriginalProduct"); set => SetPropertyValue<General.Products.Product>("OriginalProduct", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreOrderLine? ParentStoreOrderLine { get => GetPropertyValue<Logistics.Inventory.StoreOrderLine>("ParentStoreOrderLine"); set => SetPropertyValue<Logistics.Inventory.StoreOrderLine>("ParentStoreOrderLine", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Inventory.StoreTransaction? TransactionObj { get => GetPropertyValue<Logistics.Inventory.StoreTransaction>("TransactionObj"); set => SetPropertyValue<Logistics.Inventory.StoreTransaction>("TransactionObj", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransaction? Document { get => GetPropertyValue<Logistics.Inventory.StoreTransaction>("Document"); set => SetPropertyValue<Logistics.Inventory.StoreTransaction>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace StoreTransactionsRepository
            {
                public enum CostSource
                {
                    Store = 0,
                    Document = 1
                }
            }
            [Entity(EntitySet = "Logistics_Inventory_SupplySchemata", TableName = "Inv_Supply_Schemata")]
            public partial class SupplySchema: EntityResource
            {
                public SupplySchema(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_SupplySchemata";
                public const string EntityTableName = "Inv_Supply_Schemata";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.SupplySchemaRoute>? Routes { get => GetCollection<Logistics.Inventory.SupplySchemaRoute>("Routes"); set => SetCollection<Logistics.Inventory.SupplySchemaRoute>("Routes", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_SupplySchemaRoutes", TableName = "Inv_Supply_Schema_Routes")]
            public partial class SupplySchemaRoute: EntityResource
            {
                public SupplySchemaRoute(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_SupplySchemaRoutes";
                public const string EntityTableName = "Inv_Supply_Schema_Routes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? SchemaXML { get => GetPropertyValue<String?>("SchemaXML"); set => SetPropertyValue<String?>("SchemaXML", value); }
                [ODataProperty]
                public Int32? TransitTimeDays { get => GetPropertyValue<Int32?>("TransitTimeDays"); set => SetPropertyValue<Int32?>("TransitTimeDays", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? DestinationStore { get => GetPropertyValue<Logistics.Inventory.Store>("DestinationStore"); set => SetPropertyValue<Logistics.Inventory.Store>("DestinationStore", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? SourceStore { get => GetPropertyValue<Logistics.Inventory.Store>("SourceStore"); set => SetPropertyValue<Logistics.Inventory.Store>("SourceStore", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Inventory.SupplySchema? SupplySchema { get => GetPropertyValue<Logistics.Inventory.SupplySchema>("SupplySchema"); set => SetPropertyValue<Logistics.Inventory.SupplySchema>("SupplySchema", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_TransactionCostCorrectionsSummary")]
            public partial class TransactionCostCorrectionsSummaryEntry: EntityResource
            {
                public TransactionCostCorrectionsSummaryEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_TransactionCostCorrectionsSummary";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Amount? BaseCostAdjustment { get => GetPropertyValue<Amount?>("BaseCostAdjustment"); set => SetPropertyValue<Amount?>("BaseCostAdjustment", value); }
                [ODataProperty]
                public Amount? CostCorrectionAmount { get => GetPropertyValue<Amount?>("CostCorrectionAmount"); set => SetPropertyValue<Amount?>("CostCorrectionAmount", value); }
                [ODataProperty]
                public Amount? ProductCostAdjustment { get => GetPropertyValue<Amount?>("ProductCostAdjustment"); set => SetPropertyValue<Amount?>("ProductCostAdjustment", value); }
                [ODataProperty]
                public Amount? StoreCostAdjustment { get => GetPropertyValue<Amount?>("StoreCostAdjustment"); set => SetPropertyValue<Amount?>("StoreCostAdjustment", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Inventory.StoreTransaction? TransactionObj { get => GetPropertyValue<Logistics.Inventory.StoreTransaction>("TransactionObj"); set => SetPropertyValue<Logistics.Inventory.StoreTransaction>("TransactionObj", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransactionLine? TransactionLine { get => GetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine"); set => SetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine", value); }
            }
            [Entity(EntitySet = "Logistics_Inventory_TransactionEntryTemplates", TableName = "Inv_Transaction_Entry_Templates")]
            public partial class TransactionEntryTemplate: EntityResource
            {
                public TransactionEntryTemplate(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_TransactionEntryTemplates";
                public const string EntityTableName = "Inv_Transaction_Entry_Templates";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? DocumentNotesFixedText { get => GetPropertyValue<String?>("DocumentNotesFixedText"); set => SetPropertyValue<String?>("DocumentNotesFixedText", value); }
                [ODataProperty]
                public Finance.Vat.DealType? DealType { get => GetPropertyValue<Finance.Vat.DealType>("DealType"); set => SetPropertyValue<Finance.Vat.DealType>("DealType", value); }
                [ODataProperty]
                public Systems.Workflow.Route? Route { get => GetPropertyValue<Systems.Workflow.Route>("Route"); set => SetPropertyValue<Systems.Workflow.Route>("Route", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_TransferOrders", TableName = "Inv_Transfer_Orders")]
            public partial class TransferOrder: General.Document
            {
                public TransferOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Inventory_TransferOrders";
                public new const string EntityTableName = "Inv_Transfer_Orders";
                [ODataProperty]
                public DateTime? DefaultDueDateIn { get => GetPropertyValue<DateTime?>("DefaultDueDateIn"); set => SetPropertyValue<DateTime?>("DefaultDueDateIn", value); }
                [ODataProperty]
                public DateTime? DefaultDueDateOut { get => GetPropertyValue<DateTime?>("DefaultDueDateOut"); set => SetPropertyValue<DateTime?>("DefaultDueDateOut", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Logistics.Inventory.TransferOrdersRepository.Status? Status { get => GetPropertyValue<Logistics.Inventory.TransferOrdersRepository.Status?>("Status"); set => SetPropertyValue<Logistics.Inventory.TransferOrdersRepository.Status?>("Status", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? FromStore { get => GetPropertyValue<Logistics.Inventory.Store>("FromStore"); set => SetPropertyValue<Logistics.Inventory.Store>("FromStore", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? ToStore { get => GetPropertyValue<Logistics.Inventory.Store>("ToStore"); set => SetPropertyValue<Logistics.Inventory.Store>("ToStore", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Inventory.TransferOrderLine>? Lines { get => GetCollection<Logistics.Inventory.TransferOrderLine>("Lines"); set => SetCollection<Logistics.Inventory.TransferOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_TransferOrderLines", TableName = "Inv_Transfer_Order_Lines")]
            public partial class TransferOrderLine: EntityResource
            {
                public TransferOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_TransferOrderLines";
                public const string EntityTableName = "Inv_Transfer_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? DueDateIn { get => GetPropertyValue<DateTime?>("DueDateIn"); set => SetPropertyValue<DateTime?>("DueDateIn", value); }
                [ODataProperty]
                public DateTime? DueDateOut { get => GetPropertyValue<DateTime?>("DueDateOut"); set => SetPropertyValue<DateTime?>("DueDateOut", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Amount? StandardUnitPrice { get => GetPropertyValue<Amount?>("StandardUnitPrice"); set => SetPropertyValue<Amount?>("StandardUnitPrice", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? FromStoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("FromStoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("FromStoreBin", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? ToStoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("ToStoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("ToStoreBin", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Inventory.TransferOrder? TransferOrder { get => GetPropertyValue<Logistics.Inventory.TransferOrder>("TransferOrder"); set => SetPropertyValue<Logistics.Inventory.TransferOrder>("TransferOrder", value); }
                [ODataProperty]
                public Logistics.Inventory.TransferOrder? Document { get => GetPropertyValue<Logistics.Inventory.TransferOrder>("Document"); set => SetPropertyValue<Logistics.Inventory.TransferOrder>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Inventory_TransferOrdersOptions", TableName = "Inv_Transfer_Orders_Options")]
            public partial class TransferOrdersOption: EntityResource
            {
                public TransferOrdersOption(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Inventory_TransferOrdersOptions";
                public const string EntityTableName = "Inv_Transfer_Orders_Options";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? AvailableQuantityOnly { get => GetPropertyValue<Boolean?>("AvailableQuantityOnly"); set => SetPropertyValue<Boolean?>("AvailableQuantityOnly", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace TransferOrdersRepository
            {
                public enum Status
                {
                    OpenForEditing = 1,
                    Released = 2
                }
            }
        }
        [Entity(EntitySet = "Logistics_LogisticUnits", TableName = "Log_Logistic_Units")]
        public partial class LogisticUnit: EntityResource
        {
            public LogisticUnit(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Logistics_LogisticUnits";
            public const string EntityTableName = "Log_Logistic_Units";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Decimal? ExpectedWeight { get => GetPropertyValue<Decimal?>("ExpectedWeight"); set => SetPropertyValue<Decimal?>("ExpectedWeight", value); }
            [ODataProperty]
            public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
            [ODataProperty]
            public Decimal? MeasuredWeight { get => GetPropertyValue<Decimal?>("MeasuredWeight"); set => SetPropertyValue<Decimal?>("MeasuredWeight", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public String? SerialCode { get => GetPropertyValue<String?>("SerialCode"); set => SetPropertyValue<String?>("SerialCode", value); }
            [ODataProperty]
            public Logistics.Shipment.CargoType? CargoType { get => GetPropertyValue<Logistics.Shipment.CargoType>("CargoType"); set => SetPropertyValue<Logistics.Shipment.CargoType>("CargoType", value); }
            [ODataProperty]
            public Logistics.LogisticUnitType? LogisticUnitType { get => GetPropertyValue<Logistics.LogisticUnitType>("LogisticUnitType"); set => SetPropertyValue<Logistics.LogisticUnitType>("LogisticUnitType", value); }
            [ODataProperty]
            public General.Products.Product? RepresentedAsProduct { get => GetPropertyValue<General.Products.Product>("RepresentedAsProduct"); set => SetPropertyValue<General.Products.Product>("RepresentedAsProduct", value); }
            [ODataProperty]
            public IEnumerable<Logistics.LogisticUnitContent>? Contents { get => GetCollection<Logistics.LogisticUnitContent>("Contents"); set => SetCollection<Logistics.LogisticUnitContent>("Contents", value); }
            [ODataProperty]
            public IEnumerable<Logistics.LogisticUnitSpecification>? Specifications { get => GetCollection<Logistics.LogisticUnitSpecification>("Specifications"); set => SetCollection<Logistics.LogisticUnitSpecification>("Specifications", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task UpdateGS1ApplicationCodesAsync(DomainApiService service) { await this.InvokeActionAsync(service, "UpdateGS1ApplicationCodes"); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Logistics_LogisticUnitContents", TableName = "Log_Logistic_Unit_Contents")]
        public partial class LogisticUnitContent: EntityResource
        {
            public LogisticUnitContent(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Logistics_LogisticUnitContents";
            public const string EntityTableName = "Log_Logistic_Unit_Contents";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Quantity? BaseQuantity { get => GetPropertyValue<Quantity?>("BaseQuantity"); set => SetPropertyValue<Quantity?>("BaseQuantity", value); }
            [ODataProperty]
            public DateTime? ExpirationDate { get => GetPropertyValue<DateTime?>("ExpirationDate"); set => SetPropertyValue<DateTime?>("ExpirationDate", value); }
            [ODataProperty]
            public Decimal? GrossWeight { get => GetPropertyValue<Decimal?>("GrossWeight"); set => SetPropertyValue<Decimal?>("GrossWeight", value); }
            [ODataProperty]
            public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
            [ODataProperty]
            public String? LotNumber { get => GetPropertyValue<String?>("LotNumber"); set => SetPropertyValue<String?>("LotNumber", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
            [ODataProperty]
            public Quantity? StandardQuantity { get => GetPropertyValue<Quantity?>("StandardQuantity"); set => SetPropertyValue<Quantity?>("StandardQuantity", value); }
            [Owner]
            [ODataProperty]
            public Logistics.LogisticUnit? LogisticUnit { get => GetPropertyValue<Logistics.LogisticUnit>("LogisticUnit"); set => SetPropertyValue<Logistics.LogisticUnit>("LogisticUnit", value); }
            [ODataProperty]
            public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
            [ODataProperty]
            public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
            [ODataProperty]
            public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
            [ODataProperty]
            public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
            [ODataProperty]
            public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Logistics_LogisticUnitSpecifications", TableName = "Log_Logistic_Unit_Specifications")]
        public partial class LogisticUnitSpecification: EntityResource
        {
            public LogisticUnitSpecification(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Logistics_LogisticUnitSpecifications";
            public const string EntityTableName = "Log_Logistic_Unit_Specifications";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public String? Value { get => GetPropertyValue<String?>("Value"); set => SetPropertyValue<String?>("Value", value); }
            [Owner]
            [ODataProperty]
            public Logistics.LogisticUnit? LogisticUnit { get => GetPropertyValue<Logistics.LogisticUnit>("LogisticUnit"); set => SetPropertyValue<Logistics.LogisticUnit>("LogisticUnit", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Logistics_LogisticUnitTypes", TableName = "Log_Logistic_Unit_Types")]
        public partial class LogisticUnitType: EntityResource
        {
            public LogisticUnitType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Logistics_LogisticUnitTypes";
            public const string EntityTableName = "Log_Logistic_Unit_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace Procurement
        {
            [Entity(EntitySet = "Logistics_Procurement_PurchaseControlDocuments", TableName = "Scm_Purchase_Control_Documents")]
            public partial class PurchaseControlDocument: General.Document
            {
                public PurchaseControlDocument(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Procurement_PurchaseControlDocuments";
                public new const string EntityTableName = "Scm_Purchase_Control_Documents";
                [ODataProperty]
                public Logistics.Procurement.PurchaseInvoice? PurchaseInvoice { get => GetPropertyValue<Logistics.Procurement.PurchaseInvoice>("PurchaseInvoice"); set => SetPropertyValue<Logistics.Procurement.PurchaseInvoice>("PurchaseInvoice", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseOrder? PurchaseOrder { get => GetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder"); set => SetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder", value); }
                [ODataProperty]
                public Logistics.Procurement.Requisition? PurchaseRequisition { get => GetPropertyValue<Logistics.Procurement.Requisition>("PurchaseRequisition"); set => SetPropertyValue<Logistics.Procurement.Requisition>("PurchaseRequisition", value); }
                [ODataProperty]
                public Logistics.Procurement.ReceivingOrder? ReceivingOrder { get => GetPropertyValue<Logistics.Procurement.ReceivingOrder>("ReceivingOrder"); set => SetPropertyValue<Logistics.Procurement.ReceivingOrder>("ReceivingOrder", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Procurement.PurchaseControlDocumentLine>? Lines { get => GetCollection<Logistics.Procurement.PurchaseControlDocumentLine>("Lines"); set => SetCollection<Logistics.Procurement.PurchaseControlDocumentLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_PurchaseControlDocumentLines", TableName = "Scm_Purchase_Control_Document_Lines")]
            public partial class PurchaseControlDocumentLine: EntityResource
            {
                public PurchaseControlDocumentLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_PurchaseControlDocumentLines";
                public const string EntityTableName = "Scm_Purchase_Control_Document_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? ConfirmedAmountBase { get => GetPropertyValue<Decimal?>("ConfirmedAmountBase"); set => SetPropertyValue<Decimal?>("ConfirmedAmountBase", value); }
                [ODataProperty]
                public Decimal? ConfirmedStandardQuantityBase { get => GetPropertyValue<Decimal?>("ConfirmedStandardQuantityBase"); set => SetPropertyValue<Decimal?>("ConfirmedStandardQuantityBase", value); }
                [ODataProperty]
                public Decimal? InvoicedAmountBase { get => GetPropertyValue<Decimal?>("InvoicedAmountBase"); set => SetPropertyValue<Decimal?>("InvoicedAmountBase", value); }
                [ODataProperty]
                public Decimal? InvoicedStandardQuantityBase { get => GetPropertyValue<Decimal?>("InvoicedStandardQuantityBase"); set => SetPropertyValue<Decimal?>("InvoicedStandardQuantityBase", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Decimal? OrderedAmountBase { get => GetPropertyValue<Decimal?>("OrderedAmountBase"); set => SetPropertyValue<Decimal?>("OrderedAmountBase", value); }
                [ODataProperty]
                public Decimal? OrderedStandardQuantityBase { get => GetPropertyValue<Decimal?>("OrderedStandardQuantityBase"); set => SetPropertyValue<Decimal?>("OrderedStandardQuantityBase", value); }
                [ODataProperty]
                public Decimal? ReceivedAmountBase { get => GetPropertyValue<Decimal?>("ReceivedAmountBase"); set => SetPropertyValue<Decimal?>("ReceivedAmountBase", value); }
                [ODataProperty]
                public Decimal? ReceivedStandardQuantityBase { get => GetPropertyValue<Decimal?>("ReceivedStandardQuantityBase"); set => SetPropertyValue<Decimal?>("ReceivedStandardQuantityBase", value); }
                [ODataProperty]
                public Decimal? RequestedAmountBase { get => GetPropertyValue<Decimal?>("RequestedAmountBase"); set => SetPropertyValue<Decimal?>("RequestedAmountBase", value); }
                [ODataProperty]
                public Decimal? RequestedStandardQuantityBase { get => GetPropertyValue<Decimal?>("RequestedStandardQuantityBase"); set => SetPropertyValue<Decimal?>("RequestedStandardQuantityBase", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Procurement.PurchaseControlDocument? PurchaseControlDocument { get => GetPropertyValue<Logistics.Procurement.PurchaseControlDocument>("PurchaseControlDocument"); set => SetPropertyValue<Logistics.Procurement.PurchaseControlDocument>("PurchaseControlDocument", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseControlDocument? Document { get => GetPropertyValue<Logistics.Procurement.PurchaseControlDocument>("Document"); set => SetPropertyValue<Logistics.Procurement.PurchaseControlDocument>("Document", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseInvoice? PurchaseInvoice { get => GetPropertyValue<Logistics.Procurement.PurchaseInvoice>("PurchaseInvoice"); set => SetPropertyValue<Logistics.Procurement.PurchaseInvoice>("PurchaseInvoice", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseInvoiceLine? PurchaseInvoiceLine { get => GetPropertyValue<Logistics.Procurement.PurchaseInvoiceLine>("PurchaseInvoiceLine"); set => SetPropertyValue<Logistics.Procurement.PurchaseInvoiceLine>("PurchaseInvoiceLine", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseOperationType? PurchaseOperationType { get => GetPropertyValue<Logistics.Procurement.PurchaseOperationType>("PurchaseOperationType"); set => SetPropertyValue<Logistics.Procurement.PurchaseOperationType>("PurchaseOperationType", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseOrder? PurchaseOrder { get => GetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder"); set => SetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseOrderLine? PurchaseOrderLine { get => GetPropertyValue<Logistics.Procurement.PurchaseOrderLine>("PurchaseOrderLine"); set => SetPropertyValue<Logistics.Procurement.PurchaseOrderLine>("PurchaseOrderLine", value); }
                [ODataProperty]
                public Logistics.Procurement.Requisition? PurchaseRequisition { get => GetPropertyValue<Logistics.Procurement.Requisition>("PurchaseRequisition"); set => SetPropertyValue<Logistics.Procurement.Requisition>("PurchaseRequisition", value); }
                [ODataProperty]
                public Logistics.Procurement.RequisitionLine? PurchaseRequisitionLine { get => GetPropertyValue<Logistics.Procurement.RequisitionLine>("PurchaseRequisitionLine"); set => SetPropertyValue<Logistics.Procurement.RequisitionLine>("PurchaseRequisitionLine", value); }
                [ODataProperty]
                public Logistics.Procurement.ReceivingOrder? ReceivingOrder { get => GetPropertyValue<Logistics.Procurement.ReceivingOrder>("ReceivingOrder"); set => SetPropertyValue<Logistics.Procurement.ReceivingOrder>("ReceivingOrder", value); }
                [ODataProperty]
                public Logistics.Procurement.ReceivingOrderLine? ReceivingOrderLine { get => GetPropertyValue<Logistics.Procurement.ReceivingOrderLine>("ReceivingOrderLine"); set => SetPropertyValue<Logistics.Procurement.ReceivingOrderLine>("ReceivingOrderLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_PurchaseInvoices", TableName = "Scm_Purchase_Invoices")]
            public partial class PurchaseInvoice: General.Document
            {
                public PurchaseInvoice(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Procurement_PurchaseInvoices";
                public new const string EntityTableName = "Scm_Purchase_Invoices";
                [ODataProperty]
                public DateTime? ApplyDate { get => GetPropertyValue<DateTime?>("ApplyDate"); set => SetPropertyValue<DateTime?>("ApplyDate", value); }
                [ODataProperty]
                public String? CreditNoteReason { get => GetPropertyValue<String?>("CreditNoteReason"); set => SetPropertyValue<String?>("CreditNoteReason", value); }
                [ODataProperty]
                public Finance.Intrastat.DeliveryTerms? DeliveryTermsCode { get => GetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode"); set => SetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode", value); }
                [ODataProperty]
                public Finance.Intrastat.TransactionNature? IntrastatTransactionNatureCode { get => GetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode"); set => SetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode", value); }
                [ODataProperty]
                public Finance.Intrastat.TransportMode? IntrastatTransportModeCode { get => GetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode"); set => SetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? PaymentDueDate { get => GetPropertyValue<DateTime?>("PaymentDueDate"); set => SetPropertyValue<DateTime?>("PaymentDueDate", value); }
                [ODataProperty]
                public Boolean? VATCashReportingMode { get => GetPropertyValue<Boolean?>("VATCashReportingMode"); set => SetPropertyValue<Boolean?>("VATCashReportingMode", value); }
                [ODataProperty]
                public String? VATNotes { get => GetPropertyValue<String?>("VATNotes"); set => SetPropertyValue<String?>("VATNotes", value); }
                [ODataProperty]
                public Finance.Accounting.CostCenter? CostCenter { get => GetPropertyValue<Finance.Accounting.CostCenter>("CostCenter"); set => SetPropertyValue<Finance.Accounting.CostCenter>("CostCenter", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseInvoice? CreditNoteOriginalPurchaseInvoice { get => GetPropertyValue<Logistics.Procurement.PurchaseInvoice>("CreditNoteOriginalPurchaseInvoice"); set => SetPropertyValue<Logistics.Procurement.PurchaseInvoice>("CreditNoteOriginalPurchaseInvoice", value); }
                [ODataProperty]
                public Finance.Vat.DealType? DealType { get => GetPropertyValue<Finance.Vat.DealType>("DealType"); set => SetPropertyValue<Finance.Vat.DealType>("DealType", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public General.Geography.AdministrativeRegion? IntrastatDestinationRegion { get => GetPropertyValue<General.Geography.AdministrativeRegion>("IntrastatDestinationRegion"); set => SetPropertyValue<General.Geography.AdministrativeRegion>("IntrastatDestinationRegion", value); }
                [ODataProperty]
                public General.Geography.Country? IntrastatTransportCountry { get => GetPropertyValue<General.Geography.Country>("IntrastatTransportCountry"); set => SetPropertyValue<General.Geography.Country>("IntrastatTransportCountry", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseOrder? PurchaseOrder { get => GetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder"); set => SetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchasePriceList? PurchasePriceList { get => GetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList"); set => SetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList", value); }
                [ODataProperty]
                public Logistics.Procurement.ReceivingOrder? ReceivingOrder { get => GetPropertyValue<Logistics.Procurement.ReceivingOrder>("ReceivingOrder"); set => SetPropertyValue<Logistics.Procurement.ReceivingOrder>("ReceivingOrder", value); }
                [ODataProperty]
                public Finance.Vat.DealType? SaleDealType { get => GetPropertyValue<Finance.Vat.DealType>("SaleDealType"); set => SetPropertyValue<Finance.Vat.DealType>("SaleDealType", value); }
                [ODataProperty]
                public Logistics.Procurement.Supplier? Supplier { get => GetPropertyValue<Logistics.Procurement.Supplier>("Supplier"); set => SetPropertyValue<Logistics.Procurement.Supplier>("Supplier", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Procurement.PurchaseInvoiceLine>? Lines { get => GetCollection<Logistics.Procurement.PurchaseInvoiceLine>("Lines"); set => SetCollection<Logistics.Procurement.PurchaseInvoiceLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_PurchaseInvoiceLines", TableName = "Scm_Purchase_Invoice_Lines")]
            public partial class PurchaseInvoiceLine: EntityResource
            {
                public PurchaseInvoiceLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_PurchaseInvoiceLines";
                public const string EntityTableName = "Scm_Purchase_Invoice_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Finance.Intrastat.DeliveryTerms? DeliveryTermsCode { get => GetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode"); set => SetPropertyValue<Finance.Intrastat.DeliveryTerms?>("DeliveryTermsCode", value); }
                [ODataProperty]
                public DateTime? IntrastatApplyDate { get => GetPropertyValue<DateTime?>("IntrastatApplyDate"); set => SetPropertyValue<DateTime?>("IntrastatApplyDate", value); }
                [ODataProperty]
                public Finance.Intrastat.TransactionNature? IntrastatTransactionNatureCode { get => GetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode"); set => SetPropertyValue<Finance.Intrastat.TransactionNature?>("IntrastatTransactionNatureCode", value); }
                [ODataProperty]
                public Finance.Intrastat.TransportMode? IntrastatTransportModeCode { get => GetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode"); set => SetPropertyValue<Finance.Intrastat.TransportMode?>("IntrastatTransportModeCode", value); }
                [ODataProperty]
                public Amount? LineAmount { get => GetPropertyValue<Amount?>("LineAmount"); set => SetPropertyValue<Amount?>("LineAmount", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public MultilanguageString? ProductName { get => GetPropertyValue<MultilanguageString?>("ProductName"); set => SetPropertyValue<MultilanguageString?>("ProductName", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Amount? UnitPrice { get => GetPropertyValue<Amount?>("UnitPrice"); set => SetPropertyValue<Amount?>("UnitPrice", value); }
                [ODataProperty]
                public General.Geography.AdministrativeRegion? IntrastatDestinationRegion { get => GetPropertyValue<General.Geography.AdministrativeRegion>("IntrastatDestinationRegion"); set => SetPropertyValue<General.Geography.AdministrativeRegion>("IntrastatDestinationRegion", value); }
                [ODataProperty]
                public General.Geography.Country? IntrastatTransportCountry { get => GetPropertyValue<General.Geography.Country>("IntrastatTransportCountry"); set => SetPropertyValue<General.Geography.Country>("IntrastatTransportCountry", value); }
                [ODataProperty]
                public Finance.Accounting.CostCenter? LineCostCenter { get => GetPropertyValue<Finance.Accounting.CostCenter>("LineCostCenter"); set => SetPropertyValue<Finance.Accounting.CostCenter>("LineCostCenter", value); }
                [ODataProperty]
                public Finance.Vat.DealType? LineDealType { get => GetPropertyValue<Finance.Vat.DealType>("LineDealType"); set => SetPropertyValue<Finance.Vat.DealType>("LineDealType", value); }
                [ODataProperty]
                public General.Geography.Country? OriginCountry { get => GetPropertyValue<General.Geography.Country>("OriginCountry"); set => SetPropertyValue<General.Geography.Country>("OriginCountry", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Procurement.PurchaseInvoice? PurchaseInvoice { get => GetPropertyValue<Logistics.Procurement.PurchaseInvoice>("PurchaseInvoice"); set => SetPropertyValue<Logistics.Procurement.PurchaseInvoice>("PurchaseInvoice", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseInvoice? Document { get => GetPropertyValue<Logistics.Procurement.PurchaseInvoice>("Document"); set => SetPropertyValue<Logistics.Procurement.PurchaseInvoice>("Document", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Procurement.ReceivingOrderLine? ReceivingOrderLine { get => GetPropertyValue<Logistics.Procurement.ReceivingOrderLine>("ReceivingOrderLine"); set => SetPropertyValue<Logistics.Procurement.ReceivingOrderLine>("ReceivingOrderLine", value); }
                [ODataProperty]
                public Finance.Vat.DealType? SaleLineDealType { get => GetPropertyValue<Finance.Vat.DealType>("SaleLineDealType"); set => SetPropertyValue<Finance.Vat.DealType>("SaleLineDealType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_PurchaseInvoicesOptions", TableName = "Scm_Purchase_Invoices_Options")]
            public partial class PurchaseInvoicesOption: EntityResource
            {
                public PurchaseInvoicesOption(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_PurchaseInvoicesOptions";
                public const string EntityTableName = "Scm_Purchase_Invoices_Options";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseInvoicesOptionsRepository.SignRestriction? SignRestriction { get => GetPropertyValue<Logistics.Procurement.PurchaseInvoicesOptionsRepository.SignRestriction?>("SignRestriction"); set => SetPropertyValue<Logistics.Procurement.PurchaseInvoicesOptionsRepository.SignRestriction?>("SignRestriction", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseInvoicesOptionsRepository.TotalAmountSignRestriction? TotalAmountSignRestriction { get => GetPropertyValue<Logistics.Procurement.PurchaseInvoicesOptionsRepository.TotalAmountSignRestriction?>("TotalAmountSignRestriction"); set => SetPropertyValue<Logistics.Procurement.PurchaseInvoicesOptionsRepository.TotalAmountSignRestriction?>("TotalAmountSignRestriction", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace PurchaseInvoicesOptionsRepository
            {
                public enum SignRestriction
                {
                    AllowAll = 0,
                    AllowOnlyPositive = 1,
                    AllowOnlyNegative = -1
                }
                public enum TotalAmountSignRestriction
                {
                    AllowAll = 0,
                    AllowOnlyPositive = 1,
                    AllowOnlyNegative = -1
                }
            }
            [Entity(EntitySet = "Logistics_Procurement_PurchaseOperationTypes", TableName = "Scm_Purchase_Operation_Types")]
            public partial class PurchaseOperationType: EntityResource
            {
                public PurchaseOperationType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_PurchaseOperationTypes";
                public const string EntityTableName = "Scm_Purchase_Operation_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_PurchaseOrders", TableName = "Scm_Purchase_Orders")]
            public partial class PurchaseOrder: General.Document
            {
                public PurchaseOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Procurement_PurchaseOrders";
                public new const string EntityTableName = "Scm_Purchase_Orders";
                [ODataProperty]
                public String? InvoiceDocumentNo { get => GetPropertyValue<String?>("InvoiceDocumentNo"); set => SetPropertyValue<String?>("InvoiceDocumentNo", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? PaymentDueDate { get => GetPropertyValue<DateTime?>("PaymentDueDate"); set => SetPropertyValue<DateTime?>("PaymentDueDate", value); }
                [ODataProperty]
                public DateTime? PlannedDeliveryDate { get => GetPropertyValue<DateTime?>("PlannedDeliveryDate"); set => SetPropertyValue<DateTime?>("PlannedDeliveryDate", value); }
                [ODataProperty]
                public DateTime? PlannedReleaseDate { get => GetPropertyValue<DateTime?>("PlannedReleaseDate"); set => SetPropertyValue<DateTime?>("PlannedReleaseDate", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchasePriceList? PurchasePriceList { get => GetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList"); set => SetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public Logistics.Procurement.Supplier? Supplier { get => GetPropertyValue<Logistics.Procurement.Supplier>("Supplier"); set => SetPropertyValue<Logistics.Procurement.Supplier>("Supplier", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Procurement.PurchaseOrderLine>? Lines { get => GetCollection<Logistics.Procurement.PurchaseOrderLine>("Lines"); set => SetCollection<Logistics.Procurement.PurchaseOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_PurchaseOrderLines", TableName = "Scm_Purchase_Order_Lines")]
            public partial class PurchaseOrderLine: EntityResource
            {
                public PurchaseOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_PurchaseOrderLines";
                public const string EntityTableName = "Scm_Purchase_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? ConfirmedPricePerUnit { get => GetPropertyValue<Amount?>("ConfirmedPricePerUnit"); set => SetPropertyValue<Amount?>("ConfirmedPricePerUnit", value); }
                [ODataProperty]
                public Quantity? ConfirmedQuantity { get => GetPropertyValue<Quantity?>("ConfirmedQuantity"); set => SetPropertyValue<Quantity?>("ConfirmedQuantity", value); }
                [ODataProperty]
                public Quantity? ConfirmedQuantityBase { get => GetPropertyValue<Quantity?>("ConfirmedQuantityBase"); set => SetPropertyValue<Quantity?>("ConfirmedQuantityBase", value); }
                [ODataProperty]
                public Quantity? ConfirmedStandardQuantityBase { get => GetPropertyValue<Quantity?>("ConfirmedStandardQuantityBase"); set => SetPropertyValue<Quantity?>("ConfirmedStandardQuantityBase", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public DateTime? PlannedDeliveryDate { get => GetPropertyValue<DateTime?>("PlannedDeliveryDate"); set => SetPropertyValue<DateTime?>("PlannedDeliveryDate", value); }
                [ODataProperty]
                public Amount? PricePerUnit { get => GetPropertyValue<Amount?>("PricePerUnit"); set => SetPropertyValue<Amount?>("PricePerUnit", value); }
                [ODataProperty]
                public MultilanguageString? ProductDescription { get => GetPropertyValue<MultilanguageString?>("ProductDescription"); set => SetPropertyValue<MultilanguageString?>("ProductDescription", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Procurement.PurchaseOrder? PurchaseOrder { get => GetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder"); set => SetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseOrder? Document { get => GetPropertyValue<Logistics.Procurement.PurchaseOrder>("Document"); set => SetPropertyValue<Logistics.Procurement.PurchaseOrder>("Document", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseProductPrice? PurchaseProductPrice { get => GetPropertyValue<Logistics.Procurement.PurchaseProductPrice>("PurchaseProductPrice"); set => SetPropertyValue<Logistics.Procurement.PurchaseProductPrice>("PurchaseProductPrice", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Procurement.RequisitionLine? RequisitionLine { get => GetPropertyValue<Logistics.Procurement.RequisitionLine>("RequisitionLine"); set => SetPropertyValue<Logistics.Procurement.RequisitionLine>("RequisitionLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_PurchasePriceLists", TableName = "Scm_Purchase_Price_Lists")]
            public partial class PurchasePriceList: EntityResource
            {
                public PurchasePriceList(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_PurchasePriceLists";
                public const string EntityTableName = "Scm_Purchase_Price_Lists";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_PurchaseProductPrices", TableName = "Scm_Purchase_Product_Prices")]
            public partial class PurchaseProductPrice: EntityResource
            {
                public PurchaseProductPrice(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_PurchaseProductPrices";
                public const string EntityTableName = "Scm_Purchase_Product_Prices";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public Quantity? MaxQuantity { get => GetPropertyValue<Quantity?>("MaxQuantity"); set => SetPropertyValue<Quantity?>("MaxQuantity", value); }
                [ODataProperty]
                public Quantity? MinQuantity { get => GetPropertyValue<Quantity?>("MinQuantity"); set => SetPropertyValue<Quantity?>("MinQuantity", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Amount? Price { get => GetPropertyValue<Amount?>("Price"); set => SetPropertyValue<Amount?>("Price", value); }
                [ODataProperty]
                public Quantity? PriceQuantity { get => GetPropertyValue<Quantity?>("PriceQuantity"); set => SetPropertyValue<Quantity?>("PriceQuantity", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseProductPricesRepository.Priority? Priority { get => GetPropertyValue<Logistics.Procurement.PurchaseProductPricesRepository.Priority?>("Priority"); set => SetPropertyValue<Logistics.Procurement.PurchaseProductPricesRepository.Priority?>("Priority", value); }
                [ODataProperty]
                public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
                [ODataProperty]
                public General.Currency? Currency { get => GetPropertyValue<General.Currency>("Currency"); set => SetPropertyValue<General.Currency>("Currency", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.MeasurementUnit? PriceQuantityMeasurementUnit { get => GetPropertyValue<General.MeasurementUnit>("PriceQuantityMeasurementUnit"); set => SetPropertyValue<General.MeasurementUnit>("PriceQuantityMeasurementUnit", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchasePriceList? PurchasePriceList { get => GetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList"); set => SetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList", value); }
                [ODataProperty]
                public Logistics.Procurement.Supplier? Supplier { get => GetPropertyValue<Logistics.Procurement.Supplier>("Supplier"); set => SetPropertyValue<Logistics.Procurement.Supplier>("Supplier", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace PurchaseProductPricesRepository
            {
                public enum Priority
                {
                    Lowest = 1,
                    Two = 2,
                    Three = 3,
                    Four = 4,
                    Highest = 5
                }
            }
            [Entity(EntitySet = "Logistics_Procurement_ReceivingOrders", TableName = "Scm_Receiving_Orders")]
            public partial class ReceivingOrder: General.Document
            {
                public ReceivingOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Procurement_ReceivingOrders";
                public new const string EntityTableName = "Scm_Receiving_Orders";
                [ODataProperty]
                public String? InvoiceDocumentNo { get => GetPropertyValue<String?>("InvoiceDocumentNo"); set => SetPropertyValue<String?>("InvoiceDocumentNo", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? PaymentDueDate { get => GetPropertyValue<DateTime?>("PaymentDueDate"); set => SetPropertyValue<DateTime?>("PaymentDueDate", value); }
                [ODataProperty]
                public DateTime? PlannedDeliveryDate { get => GetPropertyValue<DateTime?>("PlannedDeliveryDate"); set => SetPropertyValue<DateTime?>("PlannedDeliveryDate", value); }
                [ODataProperty]
                public DateTime? PlannedReleaseDate { get => GetPropertyValue<DateTime?>("PlannedReleaseDate"); set => SetPropertyValue<DateTime?>("PlannedReleaseDate", value); }
                [ODataProperty]
                public String? PurchaseLotDescription { get => GetPropertyValue<String?>("PurchaseLotDescription"); set => SetPropertyValue<String?>("PurchaseLotDescription", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? PaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("PaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? PaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("PaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("PaymentType", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseOrder? PurchaseOrder { get => GetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder"); set => SetPropertyValue<Logistics.Procurement.PurchaseOrder>("PurchaseOrder", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchasePriceList? PurchasePriceList { get => GetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList"); set => SetPropertyValue<Logistics.Procurement.PurchasePriceList>("PurchasePriceList", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public Logistics.Procurement.Supplier? Supplier { get => GetPropertyValue<Logistics.Procurement.Supplier>("Supplier"); set => SetPropertyValue<Logistics.Procurement.Supplier>("Supplier", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Procurement.ReceivingOrderLine>? Lines { get => GetCollection<Logistics.Procurement.ReceivingOrderLine>("Lines"); set => SetCollection<Logistics.Procurement.ReceivingOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_ReceivingOrderLines", TableName = "Scm_Receiving_Order_Lines")]
            public partial class ReceivingOrderLine: EntityResource
            {
                public ReceivingOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_ReceivingOrderLines";
                public const string EntityTableName = "Scm_Receiving_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? ConfirmedQuantity { get => GetPropertyValue<Quantity?>("ConfirmedQuantity"); set => SetPropertyValue<Quantity?>("ConfirmedQuantity", value); }
                [ODataProperty]
                public Quantity? ConfirmedQuantityBase { get => GetPropertyValue<Quantity?>("ConfirmedQuantityBase"); set => SetPropertyValue<Quantity?>("ConfirmedQuantityBase", value); }
                [ODataProperty]
                public Quantity? ConfirmedStandardQuantityBase { get => GetPropertyValue<Quantity?>("ConfirmedStandardQuantityBase"); set => SetPropertyValue<Quantity?>("ConfirmedStandardQuantityBase", value); }
                [ODataProperty]
                public Boolean? Finished { get => GetPropertyValue<Boolean?>("Finished"); set => SetPropertyValue<Boolean?>("Finished", value); }
                [ODataProperty]
                public Amount? LineAmount { get => GetPropertyValue<Amount?>("LineAmount"); set => SetPropertyValue<Amount?>("LineAmount", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Amount? PricePerUnit { get => GetPropertyValue<Amount?>("PricePerUnit"); set => SetPropertyValue<Amount?>("PricePerUnit", value); }
                [ODataProperty]
                public MultilanguageString? ProductDescription { get => GetPropertyValue<MultilanguageString?>("ProductDescription"); set => SetPropertyValue<MultilanguageString?>("ProductDescription", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? LineStore { get => GetPropertyValue<Logistics.Inventory.Store>("LineStore"); set => SetPropertyValue<Logistics.Inventory.Store>("LineStore", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseOrderLine? PurchaseOrderLine { get => GetPropertyValue<Logistics.Procurement.PurchaseOrderLine>("PurchaseOrderLine"); set => SetPropertyValue<Logistics.Procurement.PurchaseOrderLine>("PurchaseOrderLine", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchaseProductPrice? PurchaseProductPrice { get => GetPropertyValue<Logistics.Procurement.PurchaseProductPrice>("PurchaseProductPrice"); set => SetPropertyValue<Logistics.Procurement.PurchaseProductPrice>("PurchaseProductPrice", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Procurement.ReceivingOrder? ReceivingOrder { get => GetPropertyValue<Logistics.Procurement.ReceivingOrder>("ReceivingOrder"); set => SetPropertyValue<Logistics.Procurement.ReceivingOrder>("ReceivingOrder", value); }
                [ODataProperty]
                public Logistics.Procurement.ReceivingOrder? Document { get => GetPropertyValue<Logistics.Procurement.ReceivingOrder>("Document"); set => SetPropertyValue<Logistics.Procurement.ReceivingOrder>("Document", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_Requisitions", TableName = "Scm_Requisitions")]
            public partial class Requisition: General.Document
            {
                public Requisition(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Procurement_Requisitions";
                public new const string EntityTableName = "Scm_Requisitions";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? RequiredDeliveryDate { get => GetPropertyValue<DateTime?>("RequiredDeliveryDate"); set => SetPropertyValue<DateTime?>("RequiredDeliveryDate", value); }
                [ODataProperty]
                public General.Contacts.Party? RequestedByParty { get => GetPropertyValue<General.Contacts.Party>("RequestedByParty"); set => SetPropertyValue<General.Contacts.Party>("RequestedByParty", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Procurement.RequisitionLine>? Lines { get => GetCollection<Logistics.Procurement.RequisitionLine>("Lines"); set => SetCollection<Logistics.Procurement.RequisitionLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_RequisitionLines", TableName = "Scm_Requisition_Lines")]
            public partial class RequisitionLine: EntityResource
            {
                public RequisitionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_RequisitionLines";
                public const string EntityTableName = "Scm_Requisition_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public MultilanguageString? ProductDescription { get => GetPropertyValue<MultilanguageString?>("ProductDescription"); set => SetPropertyValue<MultilanguageString?>("ProductDescription", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public DateTime? RequiredDeliveryDate { get => GetPropertyValue<DateTime?>("RequiredDeliveryDate"); set => SetPropertyValue<DateTime?>("RequiredDeliveryDate", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Procurement.Requisition? Requisition { get => GetPropertyValue<Logistics.Procurement.Requisition>("Requisition"); set => SetPropertyValue<Logistics.Procurement.Requisition>("Requisition", value); }
                [ODataProperty]
                public Logistics.Procurement.Requisition? Document { get => GetPropertyValue<Logistics.Procurement.Requisition>("Document"); set => SetPropertyValue<Logistics.Procurement.Requisition>("Document", value); }
                [ODataProperty]
                public Logistics.Procurement.Supplier? SuggestedSupplier { get => GetPropertyValue<Logistics.Procurement.Supplier>("SuggestedSupplier"); set => SetPropertyValue<Logistics.Procurement.Supplier>("SuggestedSupplier", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_Suppliers", TableName = "Scm_Suppliers")]
            public partial class Supplier: EntityResource
            {
                public Supplier(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_Suppliers";
                public const string EntityTableName = "Scm_Suppliers";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
                [ODataProperty]
                public String? CreationUser { get => GetPropertyValue<String?>("CreationUser"); set => SetPropertyValue<String?>("CreationUser", value); }
                [ODataProperty]
                public Int32? DefaultDeliveryTermDays { get => GetPropertyValue<Int32?>("DefaultDeliveryTermDays"); set => SetPropertyValue<Int32?>("DefaultDeliveryTermDays", value); }
                [ODataProperty]
                public Int32? DefaultPaymentStartDays { get => GetPropertyValue<Int32?>("DefaultPaymentStartDays"); set => SetPropertyValue<Int32?>("DefaultPaymentStartDays", value); }
                [ODataProperty]
                public Int32? DefaultPaymentTermDays { get => GetPropertyValue<Int32?>("DefaultPaymentTermDays"); set => SetPropertyValue<Int32?>("DefaultPaymentTermDays", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Number { get => GetPropertyValue<String?>("Number"); set => SetPropertyValue<String?>("Number", value); }
                [ODataProperty]
                public DateTime? ThruDate { get => GetPropertyValue<DateTime?>("ThruDate"); set => SetPropertyValue<DateTime?>("ThruDate", value); }
                [ODataProperty]
                public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
                [ODataProperty]
                public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
                [ODataProperty]
                public General.Currency? DefaultCurrency { get => GetPropertyValue<General.Currency>("DefaultCurrency"); set => SetPropertyValue<General.Currency>("DefaultCurrency", value); }
                [ODataProperty]
                public Finance.Payments.PaymentAccount? DefaultPaymentAccount { get => GetPropertyValue<Finance.Payments.PaymentAccount>("DefaultPaymentAccount"); set => SetPropertyValue<Finance.Payments.PaymentAccount>("DefaultPaymentAccount", value); }
                [ODataProperty]
                public Finance.Payments.PaymentType? DefaultPaymentType { get => GetPropertyValue<Finance.Payments.PaymentType>("DefaultPaymentType"); set => SetPropertyValue<Finance.Payments.PaymentType>("DefaultPaymentType", value); }
                [ODataProperty]
                public Logistics.Procurement.PurchasePriceList? DefaultPurchasePriceList { get => GetPropertyValue<Logistics.Procurement.PurchasePriceList>("DefaultPurchasePriceList"); set => SetPropertyValue<Logistics.Procurement.PurchasePriceList>("DefaultPurchasePriceList", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.Party? Party { get => GetPropertyValue<General.Contacts.Party>("Party"); set => SetPropertyValue<General.Contacts.Party>("Party", value); }
                [ODataProperty]
                public Logistics.Procurement.SupplierType? SupplierType { get => GetPropertyValue<Logistics.Procurement.SupplierType>("SupplierType"); set => SetPropertyValue<Logistics.Procurement.SupplierType>("SupplierType", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Procurement_SupplierTypes", TableName = "Scm_Supplier_Types")]
            public partial class SupplierType: EntityResource
            {
                public SupplierType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Procurement_SupplierTypes";
                public const string EntityTableName = "Scm_Supplier_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Shipment
        {
            [Entity(EntitySet = "Logistics_Shipment_CargoTypes", TableName = "Log_Cargo_Types")]
            public partial class CargoType: EntityResource
            {
                public CargoType(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Shipment_CargoTypes";
                public const string EntityTableName = "Log_Cargo_Types";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_Carriers", TableName = "Log_Carriers")]
            public partial class Carrier: EntityResource
            {
                public Carrier(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Shipment_Carriers";
                public const string EntityTableName = "Log_Carriers";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? AgreementEndDate { get => GetPropertyValue<DateTime?>("AgreementEndDate"); set => SetPropertyValue<DateTime?>("AgreementEndDate", value); }
                [ODataProperty]
                public DateTime? AgreementStartDate { get => GetPropertyValue<DateTime?>("AgreementStartDate"); set => SetPropertyValue<DateTime?>("AgreementStartDate", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Logistics.Procurement.Supplier? Supplier { get => GetPropertyValue<Logistics.Procurement.Supplier>("Supplier"); set => SetPropertyValue<Logistics.Procurement.Supplier>("Supplier", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_Shipments", TableName = "Log_Shipments")]
            public partial class Shipment: General.Document
            {
                public Shipment(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Shipment_Shipments";
                public new const string EntityTableName = "Log_Shipments";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? RequiredDeliveryDate { get => GetPropertyValue<DateTime?>("RequiredDeliveryDate"); set => SetPropertyValue<DateTime?>("RequiredDeliveryDate", value); }
                [ODataProperty]
                public General.Contacts.Person? IssuedByPerson { get => GetPropertyValue<General.Contacts.Person>("IssuedByPerson"); set => SetPropertyValue<General.Contacts.Person>("IssuedByPerson", value); }
                [ODataProperty]
                public General.Contacts.Person? ReceivedByPerson { get => GetPropertyValue<General.Contacts.Person>("ReceivedByPerson"); set => SetPropertyValue<General.Contacts.Person>("ReceivedByPerson", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? ShipFromStore { get => GetPropertyValue<Logistics.Inventory.Store>("ShipFromStore"); set => SetPropertyValue<Logistics.Inventory.Store>("ShipFromStore", value); }
                [ODataProperty]
                public General.Contacts.PartyContactMechanism? ShipToPartyContactMechanism { get => GetPropertyValue<General.Contacts.PartyContactMechanism>("ShipToPartyContactMechanism"); set => SetPropertyValue<General.Contacts.PartyContactMechanism>("ShipToPartyContactMechanism", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Shipment.ShipmentLine>? Lines { get => GetCollection<Logistics.Shipment.ShipmentLine>("Lines"); set => SetCollection<Logistics.Shipment.ShipmentLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_ShipmentLines", TableName = "Log_Shipment_Lines")]
            public partial class ShipmentLine: EntityResource
            {
                public ShipmentLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Shipment_ShipmentLines";
                public const string EntityTableName = "Log_Shipment_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? BoxCount { get => GetPropertyValue<Int32?>("BoxCount"); set => SetPropertyValue<Int32?>("BoxCount", value); }
                [ODataProperty]
                public Boolean? Finished { get => GetPropertyValue<Boolean?>("Finished"); set => SetPropertyValue<Boolean?>("Finished", value); }
                [ODataProperty]
                public Decimal? GrossWeightkg { get => GetPropertyValue<Decimal?>("GrossWeightkg"); set => SetPropertyValue<Decimal?>("GrossWeightkg", value); }
                [ODataProperty]
                public Int32? GuaranteePeriodDays { get => GetPropertyValue<Int32?>("GuaranteePeriodDays"); set => SetPropertyValue<Int32?>("GuaranteePeriodDays", value); }
                [ODataProperty]
                public Decimal? Heightm { get => GetPropertyValue<Decimal?>("Heightm"); set => SetPropertyValue<Decimal?>("Heightm", value); }
                [ODataProperty]
                public Decimal? Lengthm { get => GetPropertyValue<Decimal?>("Lengthm"); set => SetPropertyValue<Decimal?>("Lengthm", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public DateTime? LineRequiredDeliveryDate { get => GetPropertyValue<DateTime?>("LineRequiredDeliveryDate"); set => SetPropertyValue<DateTime?>("LineRequiredDeliveryDate", value); }
                [ODataProperty]
                public Decimal? NetWeightkg { get => GetPropertyValue<Decimal?>("NetWeightkg"); set => SetPropertyValue<Decimal?>("NetWeightkg", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? PalletNo { get => GetPropertyValue<Int32?>("PalletNo"); set => SetPropertyValue<Int32?>("PalletNo", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Decimal? Volumel { get => GetPropertyValue<Decimal?>("Volumel"); set => SetPropertyValue<Decimal?>("Volumel", value); }
                [ODataProperty]
                public Decimal? Widthm { get => GetPropertyValue<Decimal?>("Widthm"); set => SetPropertyValue<Decimal?>("Widthm", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrderLine? ParentSalesOrderLine { get => GetPropertyValue<Crm.Sales.SalesOrderLine>("ParentSalesOrderLine"); set => SetPropertyValue<Crm.Sales.SalesOrderLine>("ParentSalesOrderLine", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Shipment.Shipment? Shipment { get => GetPropertyValue<Logistics.Shipment.Shipment>("Shipment"); set => SetPropertyValue<Logistics.Shipment.Shipment>("Shipment", value); }
                [ODataProperty]
                public Logistics.Shipment.Shipment? Document { get => GetPropertyValue<Logistics.Shipment.Shipment>("Document"); set => SetPropertyValue<Logistics.Shipment.Shipment>("Document", value); }
                [ODataProperty]
                public Logistics.Shipment.ShipmentOrderLine? ShipmentOrderLine { get => GetPropertyValue<Logistics.Shipment.ShipmentOrderLine>("ShipmentOrderLine"); set => SetPropertyValue<Logistics.Shipment.ShipmentOrderLine>("ShipmentOrderLine", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreTransactionLine? TransactionLine { get => GetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine"); set => SetPropertyValue<Logistics.Inventory.StoreTransactionLine>("TransactionLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_ShipmentOrders", TableName = "Log_Shipment_Orders")]
            public partial class ShipmentOrder: General.Document
            {
                public ShipmentOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Shipment_ShipmentOrders";
                public new const string EntityTableName = "Log_Shipment_Orders";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public DateTime? RequiredDeliveryDate { get => GetPropertyValue<DateTime?>("RequiredDeliveryDate"); set => SetPropertyValue<DateTime?>("RequiredDeliveryDate", value); }
                [ODataProperty]
                public Crm.Customer? Customer { get => GetPropertyValue<Crm.Customer>("Customer"); set => SetPropertyValue<Crm.Customer>("Customer", value); }
                [ODataProperty]
                public General.Contacts.Person? IssuedByPerson { get => GetPropertyValue<General.Contacts.Person>("IssuedByPerson"); set => SetPropertyValue<General.Contacts.Person>("IssuedByPerson", value); }
                [ODataProperty]
                public General.Contacts.Person? ReceivedByPerson { get => GetPropertyValue<General.Contacts.Person>("ReceivedByPerson"); set => SetPropertyValue<General.Contacts.Person>("ReceivedByPerson", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? ShipFromStore { get => GetPropertyValue<Logistics.Inventory.Store>("ShipFromStore"); set => SetPropertyValue<Logistics.Inventory.Store>("ShipFromStore", value); }
                [ODataProperty]
                public General.Contacts.PartyContactMechanism? ShipToPartyContactMechanism { get => GetPropertyValue<General.Contacts.PartyContactMechanism>("ShipToPartyContactMechanism"); set => SetPropertyValue<General.Contacts.PartyContactMechanism>("ShipToPartyContactMechanism", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Shipment.ShipmentOrderLine>? Lines { get => GetCollection<Logistics.Shipment.ShipmentOrderLine>("Lines"); set => SetCollection<Logistics.Shipment.ShipmentOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_ShipmentOrderLines", TableName = "Log_Shipment_Order_Lines")]
            public partial class ShipmentOrderLine: EntityResource
            {
                public ShipmentOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Shipment_ShipmentOrderLines";
                public const string EntityTableName = "Log_Shipment_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? BoxCount { get => GetPropertyValue<Int32?>("BoxCount"); set => SetPropertyValue<Int32?>("BoxCount", value); }
                [ODataProperty]
                public Boolean? Finished { get => GetPropertyValue<Boolean?>("Finished"); set => SetPropertyValue<Boolean?>("Finished", value); }
                [ODataProperty]
                public Decimal? GrossWeightkg { get => GetPropertyValue<Decimal?>("GrossWeightkg"); set => SetPropertyValue<Decimal?>("GrossWeightkg", value); }
                [ODataProperty]
                public Int32? GuaranteePeriodDays { get => GetPropertyValue<Int32?>("GuaranteePeriodDays"); set => SetPropertyValue<Int32?>("GuaranteePeriodDays", value); }
                [ODataProperty]
                public Decimal? Heightm { get => GetPropertyValue<Decimal?>("Heightm"); set => SetPropertyValue<Decimal?>("Heightm", value); }
                [ODataProperty]
                public Decimal? Lengthm { get => GetPropertyValue<Decimal?>("Lengthm"); set => SetPropertyValue<Decimal?>("Lengthm", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Decimal? NetWeightkg { get => GetPropertyValue<Decimal?>("NetWeightkg"); set => SetPropertyValue<Decimal?>("NetWeightkg", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? PalletNo { get => GetPropertyValue<Int32?>("PalletNo"); set => SetPropertyValue<Int32?>("PalletNo", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Boolean? PersistLot { get => GetPropertyValue<Boolean?>("PersistLot"); set => SetPropertyValue<Boolean?>("PersistLot", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantityBase { get => GetPropertyValue<Quantity?>("StandardQuantityBase"); set => SetPropertyValue<Quantity?>("StandardQuantityBase", value); }
                [ODataProperty]
                public Decimal? Volumel { get => GetPropertyValue<Decimal?>("Volumel"); set => SetPropertyValue<Decimal?>("Volumel", value); }
                [ODataProperty]
                public Decimal? Widthm { get => GetPropertyValue<Decimal?>("Widthm"); set => SetPropertyValue<Decimal?>("Widthm", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public Crm.Sales.SalesOrderLine? ParentSalesOrderLine { get => GetPropertyValue<Crm.Sales.SalesOrderLine>("ParentSalesOrderLine"); set => SetPropertyValue<Crm.Sales.SalesOrderLine>("ParentSalesOrderLine", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Shipment.ShipmentOrder? ShipmentOrder { get => GetPropertyValue<Logistics.Shipment.ShipmentOrder>("ShipmentOrder"); set => SetPropertyValue<Logistics.Shipment.ShipmentOrder>("ShipmentOrder", value); }
                [ODataProperty]
                public Logistics.Shipment.ShipmentOrder? Document { get => GetPropertyValue<Logistics.Shipment.ShipmentOrder>("Document"); set => SetPropertyValue<Logistics.Shipment.ShipmentOrder>("Document", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_TransportationExecutions", TableName = "Log_Transportation_Executions")]
            public partial class TransportationExecution: General.Document
            {
                public TransportationExecution(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Shipment_TransportationExecutions";
                public new const string EntityTableName = "Log_Transportation_Executions";
                [ODataProperty]
                public DateTime? ExecutionDate { get => GetPropertyValue<DateTime?>("ExecutionDate"); set => SetPropertyValue<DateTime?>("ExecutionDate", value); }
                [ODataProperty]
                public TimeSpan? ExecutionTime { get => GetPropertyValue<TimeSpan?>("ExecutionTime"); set => SetPropertyValue<TimeSpan?>("ExecutionTime", value); }
                [ODataProperty]
                public General.Geography.GeoPoint? GeoPoint { get => GetPropertyValue<General.Geography.GeoPoint>("GeoPoint"); set => SetPropertyValue<General.Geography.GeoPoint>("GeoPoint", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Shipment.TransportationExecutionLine>? Lines { get => GetCollection<Logistics.Shipment.TransportationExecutionLine>("Lines"); set => SetCollection<Logistics.Shipment.TransportationExecutionLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_TransportationExecutionLines", TableName = "Log_Transportation_Execution_Lines")]
            public partial class TransportationExecutionLine: EntityResource
            {
                public TransportationExecutionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Shipment_TransportationExecutionLines";
                public const string EntityTableName = "Log_Transportation_Execution_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? ExecutionDate { get => GetPropertyValue<DateTime?>("ExecutionDate"); set => SetPropertyValue<DateTime?>("ExecutionDate", value); }
                [ODataProperty]
                public TimeSpan? ExecutionTime { get => GetPropertyValue<TimeSpan?>("ExecutionTime"); set => SetPropertyValue<TimeSpan?>("ExecutionTime", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Logistics.Shipment.TransportationExecutionLinesRepository.OperationType? OperationType { get => GetPropertyValue<Logistics.Shipment.TransportationExecutionLinesRepository.OperationType?>("OperationType"); set => SetPropertyValue<Logistics.Shipment.TransportationExecutionLinesRepository.OperationType?>("OperationType", value); }
                [ODataProperty]
                public String? PalletNumber { get => GetPropertyValue<String?>("PalletNumber"); set => SetPropertyValue<String?>("PalletNumber", value); }
                [ODataProperty]
                public Int32? PalletsCount { get => GetPropertyValue<Int32?>("PalletsCount"); set => SetPropertyValue<Int32?>("PalletsCount", value); }
                [ODataProperty]
                public Int32? VolumeCbm { get => GetPropertyValue<Int32?>("VolumeCbm"); set => SetPropertyValue<Int32?>("VolumeCbm", value); }
                [ODataProperty]
                public Int32? WeightKg { get => GetPropertyValue<Int32?>("WeightKg"); set => SetPropertyValue<Int32?>("WeightKg", value); }
                [ODataProperty]
                public Logistics.Shipment.TransportationOrderLine? ExecutionOfTransportationOrderLine { get => GetPropertyValue<Logistics.Shipment.TransportationOrderLine>("ExecutionOfTransportationOrderLine"); set => SetPropertyValue<Logistics.Shipment.TransportationOrderLine>("ExecutionOfTransportationOrderLine", value); }
                [ODataProperty]
                public General.Geography.GeoPoint? GeoPoint { get => GetPropertyValue<General.Geography.GeoPoint>("GeoPoint"); set => SetPropertyValue<General.Geography.GeoPoint>("GeoPoint", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Shipment.TransportationExecution? TransportationExecution { get => GetPropertyValue<Logistics.Shipment.TransportationExecution>("TransportationExecution"); set => SetPropertyValue<Logistics.Shipment.TransportationExecution>("TransportationExecution", value); }
                [ODataProperty]
                public Logistics.Shipment.TransportationExecution? Document { get => GetPropertyValue<Logistics.Shipment.TransportationExecution>("Document"); set => SetPropertyValue<Logistics.Shipment.TransportationExecution>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace TransportationExecutionLinesRepository
            {
                public enum OperationType
                {
                    Loading = 0,
                    Unloading = 1,
                    Other = 2
                }
            }
            [Entity(EntitySet = "Logistics_Shipment_TransportationModes", TableName = "Log_Transportation_Modes")]
            public partial class TransportationMode: EntityResource
            {
                public TransportationMode(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Shipment_TransportationModes";
                public const string EntityTableName = "Log_Transportation_Modes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? SystemIcon { get => GetPropertyValue<String?>("SystemIcon"); set => SetPropertyValue<String?>("SystemIcon", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_TransportationOrders", TableName = "Log_Transportation_Orders")]
            public partial class TransportationOrder: General.Document
            {
                public TransportationOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Shipment_TransportationOrders";
                public new const string EntityTableName = "Log_Transportation_Orders";
                [ODataProperty]
                public DateTime? ArrivalDate { get => GetPropertyValue<DateTime?>("ArrivalDate"); set => SetPropertyValue<DateTime?>("ArrivalDate", value); }
                [ODataProperty]
                public TimeSpan? ArrivalTime { get => GetPropertyValue<TimeSpan?>("ArrivalTime"); set => SetPropertyValue<TimeSpan?>("ArrivalTime", value); }
                [ODataProperty]
                public DateTime? DepartureDate { get => GetPropertyValue<DateTime?>("DepartureDate"); set => SetPropertyValue<DateTime?>("DepartureDate", value); }
                [ODataProperty]
                public TimeSpan? DepartureTime { get => GetPropertyValue<TimeSpan?>("DepartureTime"); set => SetPropertyValue<TimeSpan?>("DepartureTime", value); }
                [ODataProperty]
                public Logistics.Shipment.Carrier? Carrier { get => GetPropertyValue<Logistics.Shipment.Carrier>("Carrier"); set => SetPropertyValue<Logistics.Shipment.Carrier>("Carrier", value); }
                [ODataProperty]
                public Applications.Fleet.Crew? Crew { get => GetPropertyValue<Applications.Fleet.Crew>("Crew"); set => SetPropertyValue<Applications.Fleet.Crew>("Crew", value); }
                [ODataProperty]
                public General.Geography.GeoPoint? FromGeoPoint { get => GetPropertyValue<General.Geography.GeoPoint>("FromGeoPoint"); set => SetPropertyValue<General.Geography.GeoPoint>("FromGeoPoint", value); }
                [ODataProperty]
                public General.Geography.GeoPoint? ToGeoPoint { get => GetPropertyValue<General.Geography.GeoPoint>("ToGeoPoint"); set => SetPropertyValue<General.Geography.GeoPoint>("ToGeoPoint", value); }
                [ODataProperty]
                public Logistics.Shipment.TransportationMode? TransportationMode { get => GetPropertyValue<Logistics.Shipment.TransportationMode>("TransportationMode"); set => SetPropertyValue<Logistics.Shipment.TransportationMode>("TransportationMode", value); }
                [ODataProperty]
                public Logistics.Shipment.TransportationVehicle? TransportationVehicle { get => GetPropertyValue<Logistics.Shipment.TransportationVehicle>("TransportationVehicle"); set => SetPropertyValue<Logistics.Shipment.TransportationVehicle>("TransportationVehicle", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Shipment.TransportationOrderLine>? Lines { get => GetCollection<Logistics.Shipment.TransportationOrderLine>("Lines"); set => SetCollection<Logistics.Shipment.TransportationOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_TransportationOrderLines", TableName = "Log_Transportation_Order_Lines")]
            public partial class TransportationOrderLine: EntityResource
            {
                public TransportationOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Shipment_TransportationOrderLines";
                public const string EntityTableName = "Log_Transportation_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ContentsDescription { get => GetPropertyValue<String?>("ContentsDescription"); set => SetPropertyValue<String?>("ContentsDescription", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? PalletsCount { get => GetPropertyValue<Int32?>("PalletsCount"); set => SetPropertyValue<Int32?>("PalletsCount", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Int32? VolumeCbm { get => GetPropertyValue<Int32?>("VolumeCbm"); set => SetPropertyValue<Int32?>("VolumeCbm", value); }
                [ODataProperty]
                public Int32? WeightKg { get => GetPropertyValue<Int32?>("WeightKg"); set => SetPropertyValue<Int32?>("WeightKg", value); }
                [ODataProperty]
                public Logistics.Shipment.CargoType? CargoType { get => GetPropertyValue<Logistics.Shipment.CargoType>("CargoType"); set => SetPropertyValue<Logistics.Shipment.CargoType>("CargoType", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Shipment.TransportationOrder? TransportationOrder { get => GetPropertyValue<Logistics.Shipment.TransportationOrder>("TransportationOrder"); set => SetPropertyValue<Logistics.Shipment.TransportationOrder>("TransportationOrder", value); }
                [ODataProperty]
                public Logistics.Shipment.TransportationOrder? Document { get => GetPropertyValue<Logistics.Shipment.TransportationOrder>("Document"); set => SetPropertyValue<Logistics.Shipment.TransportationOrder>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_TransportationRequisitions", TableName = "Log_Transportation_Requisitions")]
            public partial class TransportationRequisition: General.Document
            {
                public TransportationRequisition(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Shipment_TransportationRequisitions";
                public new const string EntityTableName = "Log_Transportation_Requisitions";
                [ODataProperty]
                public DateTime? RequestedArrivalDate { get => GetPropertyValue<DateTime?>("RequestedArrivalDate"); set => SetPropertyValue<DateTime?>("RequestedArrivalDate", value); }
                [ODataProperty]
                public TimeSpan? RequestedArrivalTime { get => GetPropertyValue<TimeSpan?>("RequestedArrivalTime"); set => SetPropertyValue<TimeSpan?>("RequestedArrivalTime", value); }
                [ODataProperty]
                public DateTime? RequestedDepartureDate { get => GetPropertyValue<DateTime?>("RequestedDepartureDate"); set => SetPropertyValue<DateTime?>("RequestedDepartureDate", value); }
                [ODataProperty]
                public TimeSpan? RequestedDepartureTime { get => GetPropertyValue<TimeSpan?>("RequestedDepartureTime"); set => SetPropertyValue<TimeSpan?>("RequestedDepartureTime", value); }
                [ODataProperty]
                public General.Geography.GeoPoint? TransportFromGeoPoint { get => GetPropertyValue<General.Geography.GeoPoint>("TransportFromGeoPoint"); set => SetPropertyValue<General.Geography.GeoPoint>("TransportFromGeoPoint", value); }
                [ODataProperty]
                public General.Contacts.PartyContactMechanism? TransportFromPartyContactMechanism { get => GetPropertyValue<General.Contacts.PartyContactMechanism>("TransportFromPartyContactMechanism"); set => SetPropertyValue<General.Contacts.PartyContactMechanism>("TransportFromPartyContactMechanism", value); }
                [ODataProperty]
                public General.Contacts.Party? TransportFromParty { get => GetPropertyValue<General.Contacts.Party>("TransportFromParty"); set => SetPropertyValue<General.Contacts.Party>("TransportFromParty", value); }
                [ODataProperty]
                public General.Geography.GeoPoint? TransportToGeoPoint { get => GetPropertyValue<General.Geography.GeoPoint>("TransportToGeoPoint"); set => SetPropertyValue<General.Geography.GeoPoint>("TransportToGeoPoint", value); }
                [ODataProperty]
                public General.Contacts.PartyContactMechanism? TransportToPartyContactMechanism { get => GetPropertyValue<General.Contacts.PartyContactMechanism>("TransportToPartyContactMechanism"); set => SetPropertyValue<General.Contacts.PartyContactMechanism>("TransportToPartyContactMechanism", value); }
                [ODataProperty]
                public General.Contacts.Party? TransportToParty { get => GetPropertyValue<General.Contacts.Party>("TransportToParty"); set => SetPropertyValue<General.Contacts.Party>("TransportToParty", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Shipment.TransportationRequisitionLine>? Lines { get => GetCollection<Logistics.Shipment.TransportationRequisitionLine>("Lines"); set => SetCollection<Logistics.Shipment.TransportationRequisitionLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_TransportationRequisitionLines", TableName = "Log_Transportation_Requisition_Lines")]
            public partial class TransportationRequisitionLine: EntityResource
            {
                public TransportationRequisitionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Shipment_TransportationRequisitionLines";
                public const string EntityTableName = "Log_Transportation_Requisition_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ContentsDescription { get => GetPropertyValue<String?>("ContentsDescription"); set => SetPropertyValue<String?>("ContentsDescription", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public Int32? PalletsCount { get => GetPropertyValue<Int32?>("PalletsCount"); set => SetPropertyValue<Int32?>("PalletsCount", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Int32? VolumeCbm { get => GetPropertyValue<Int32?>("VolumeCbm"); set => SetPropertyValue<Int32?>("VolumeCbm", value); }
                [ODataProperty]
                public Int32? WeightKg { get => GetPropertyValue<Int32?>("WeightKg"); set => SetPropertyValue<Int32?>("WeightKg", value); }
                [ODataProperty]
                public Logistics.Shipment.CargoType? CargoType { get => GetPropertyValue<Logistics.Shipment.CargoType>("CargoType"); set => SetPropertyValue<Logistics.Shipment.CargoType>("CargoType", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Shipment.TransportationRequisition? TransportationRequisition { get => GetPropertyValue<Logistics.Shipment.TransportationRequisition>("TransportationRequisition"); set => SetPropertyValue<Logistics.Shipment.TransportationRequisition>("TransportationRequisition", value); }
                [ODataProperty]
                public Logistics.Shipment.TransportationRequisition? Document { get => GetPropertyValue<Logistics.Shipment.TransportationRequisition>("Document"); set => SetPropertyValue<Logistics.Shipment.TransportationRequisition>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Shipment_TransportationVehicles", TableName = "Log_Transportation_Vehicles")]
            public partial class TransportationVehicle: EntityResource
            {
                public TransportationVehicle(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Shipment_TransportationVehicles";
                public const string EntityTableName = "Log_Transportation_Vehicles";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public Int32? MaxCargoWeightKg { get => GetPropertyValue<Int32?>("MaxCargoWeightKg"); set => SetPropertyValue<Int32?>("MaxCargoWeightKg", value); }
                [ODataProperty]
                public Int32? MaxPalletsCount { get => GetPropertyValue<Int32?>("MaxPalletsCount"); set => SetPropertyValue<Int32?>("MaxPalletsCount", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Logistics.Shipment.CargoType? CargoType { get => GetPropertyValue<Logistics.Shipment.CargoType>("CargoType"); set => SetPropertyValue<Logistics.Shipment.CargoType>("CargoType", value); }
                [ODataProperty]
                public Logistics.Shipment.Carrier? Carrier { get => GetPropertyValue<Logistics.Shipment.Carrier>("Carrier"); set => SetPropertyValue<Logistics.Shipment.Carrier>("Carrier", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Logistics.Shipment.TransportationMode? TransportationMode { get => GetPropertyValue<Logistics.Shipment.TransportationMode>("TransportationMode"); set => SetPropertyValue<Logistics.Shipment.TransportationMode>("TransportationMode", value); }
                [Owner]
                [ODataProperty]
                public Applications.Fleet.Vehicle? Vehicle { get => GetPropertyValue<Applications.Fleet.Vehicle>("Vehicle"); set => SetPropertyValue<Applications.Fleet.Vehicle>("Vehicle", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Wms
        {
            [Entity(EntitySet = "Logistics_Wms_Warehouses", TableName = "Wms_Warehouses")]
            public partial class Warehouse: EntityResource
            {
                public Warehouse(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Wms_Warehouses";
                public const string EntityTableName = "Wms_Warehouses";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Wms.WarehouseLocation>? Locations { get => GetCollection<Logistics.Wms.WarehouseLocation>("Locations"); set => SetCollection<Logistics.Wms.WarehouseLocation>("Locations", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Wms.WarehousePolicy>? Policies { get => GetCollection<Logistics.Wms.WarehousePolicy>("Policies"); set => SetCollection<Logistics.Wms.WarehousePolicy>("Policies", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Wms.WarehouseWorker>? Workers { get => GetCollection<Logistics.Wms.WarehouseWorker>("Workers"); set => SetCollection<Logistics.Wms.WarehouseWorker>("Workers", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Wms.WarehouseZone>? Zones { get => GetCollection<Logistics.Wms.WarehouseZone>("Zones"); set => SetCollection<Logistics.Wms.WarehouseZone>("Zones", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehouseAvailabilityView")]
            public partial class WarehouseAvailabilityViewEntry: EntityResource
            {
                public WarehouseAvailabilityViewEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Wms_WarehouseAvailabilityView";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Decimal? QuantityBaseAvailable { get => GetPropertyValue<Decimal?>("QuantityBaseAvailable"); set => SetPropertyValue<Decimal?>("QuantityBaseAvailable", value); }
                [ODataProperty]
                public Decimal? StandardQuantityAvailable { get => GetPropertyValue<Decimal?>("StandardQuantityAvailable"); set => SetPropertyValue<Decimal?>("StandardQuantityAvailable", value); }
                [ODataProperty]
                public Logistics.LogisticUnit? LogisticUnit { get => GetPropertyValue<Logistics.LogisticUnit>("LogisticUnit"); set => SetPropertyValue<Logistics.LogisticUnit>("LogisticUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Wms.Warehouse? Warehouse { get => GetPropertyValue<Logistics.Wms.Warehouse>("Warehouse"); set => SetPropertyValue<Logistics.Wms.Warehouse>("Warehouse", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseLocation? WarehouseLocation { get => GetPropertyValue<Logistics.Wms.WarehouseLocation>("WarehouseLocation"); set => SetPropertyValue<Logistics.Wms.WarehouseLocation>("WarehouseLocation", value); }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehouseLocations", TableName = "Wms_Warehouse_Locations")]
            public partial class WarehouseLocation: EntityResource
            {
                public WarehouseLocation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Wms_WarehouseLocations";
                public const string EntityTableName = "Wms_Warehouse_Locations";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? LocationAddress { get => GetPropertyValue<String?>("LocationAddress"); set => SetPropertyValue<String?>("LocationAddress", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Wms.Warehouse? Warehouse { get => GetPropertyValue<Logistics.Wms.Warehouse>("Warehouse"); set => SetPropertyValue<Logistics.Wms.Warehouse>("Warehouse", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseZone? WarehouseZone { get => GetPropertyValue<Logistics.Wms.WarehouseZone>("WarehouseZone"); set => SetPropertyValue<Logistics.Wms.WarehouseZone>("WarehouseZone", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehouseOrders", TableName = "Wms_Warehouse_Orders")]
            public partial class WarehouseOrder: General.Document
            {
                public WarehouseOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Wms_WarehouseOrders";
                public new const string EntityTableName = "Wms_Warehouse_Orders";
                [ODataProperty]
                public Logistics.Wms.Warehouse? Warehouse { get => GetPropertyValue<Logistics.Wms.Warehouse>("Warehouse"); set => SetPropertyValue<Logistics.Wms.Warehouse>("Warehouse", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseWorker? WarehouseWorker { get => GetPropertyValue<Logistics.Wms.WarehouseWorker>("WarehouseWorker"); set => SetPropertyValue<Logistics.Wms.WarehouseWorker>("WarehouseWorker", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Wms.WarehouseOrderLine>? Lines { get => GetCollection<Logistics.Wms.WarehouseOrderLine>("Lines"); set => SetCollection<Logistics.Wms.WarehouseOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehouseOrderLines", TableName = "Wms_Warehouse_Order_Lines")]
            public partial class WarehouseOrderLine: EntityResource
            {
                public WarehouseOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Wms_WarehouseOrderLines";
                public const string EntityTableName = "Wms_Warehouse_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineGroupNo { get => GetPropertyValue<Int32?>("LineGroupNo"); set => SetPropertyValue<Int32?>("LineGroupNo", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantity { get => GetPropertyValue<Quantity?>("StandardQuantity"); set => SetPropertyValue<Quantity?>("StandardQuantity", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseOrderLinesRepository.TaskType? TaskType { get => GetPropertyValue<Logistics.Wms.WarehouseOrderLinesRepository.TaskType?>("TaskType"); set => SetPropertyValue<Logistics.Wms.WarehouseOrderLinesRepository.TaskType?>("TaskType", value); }
                [ODataProperty]
                public Logistics.LogisticUnit? LogisticUnit { get => GetPropertyValue<Logistics.LogisticUnit>("LogisticUnit"); set => SetPropertyValue<Logistics.LogisticUnit>("LogisticUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseRequisition? ParentDocument { get => GetPropertyValue<Logistics.Wms.WarehouseRequisition>("ParentDocument"); set => SetPropertyValue<Logistics.Wms.WarehouseRequisition>("ParentDocument", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseLocation? ToWarehouseLocation { get => GetPropertyValue<Logistics.Wms.WarehouseLocation>("ToWarehouseLocation"); set => SetPropertyValue<Logistics.Wms.WarehouseLocation>("ToWarehouseLocation", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseLocation? WarehouseLocation { get => GetPropertyValue<Logistics.Wms.WarehouseLocation>("WarehouseLocation"); set => SetPropertyValue<Logistics.Wms.WarehouseLocation>("WarehouseLocation", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Wms.WarehouseOrder? WarehouseOrder { get => GetPropertyValue<Logistics.Wms.WarehouseOrder>("WarehouseOrder"); set => SetPropertyValue<Logistics.Wms.WarehouseOrder>("WarehouseOrder", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseOrder? Document { get => GetPropertyValue<Logistics.Wms.WarehouseOrder>("Document"); set => SetPropertyValue<Logistics.Wms.WarehouseOrder>("Document", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseWorker? WarehouseWorker { get => GetPropertyValue<Logistics.Wms.WarehouseWorker>("WarehouseWorker"); set => SetPropertyValue<Logistics.Wms.WarehouseWorker>("WarehouseWorker", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseZone? WarehouseZone { get => GetPropertyValue<Logistics.Wms.WarehouseZone>("WarehouseZone"); set => SetPropertyValue<Logistics.Wms.WarehouseZone>("WarehouseZone", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace WarehouseOrderLinesRepository
            {
                public enum TaskType
                {
                    Receive = 0,
                    Dispatch = 1,
                    Move = 2,
                    Label = 3,
                    Inspect = 4,
                    Pack = 5,
                    Unpack = 6,
                    Kit = 7,
                    Dekit = 8,
                    Count = 9,
                    UserTask = 10,
                    ComponentDispatch = 11,
                    ComponentReceive = 12,
                    Assemble = 13,
                    Disassemble = 14
                }
            }
            namespace WarehousePoliciesRepository
            {
                public enum PolicyKind
                {
                    AllowProductChange = 0,
                    AllowLotChange = 1,
                    AllowLocationChange = 2,
                    AllowUnitChange = 3,
                    RequireSourceScan = 4,
                    RequireDestinationScan = 5,
                    AllowLineSkip = 6,
                    ZoneType = 7,
                    KittingControllingLevel = 8,
                    DekittingControllingLevel = 9,
                    GS1SSCCCompanyPrefix = 10,
                    GS1SSCCNextSerial = 11
                }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehousePolicies", TableName = "Wms_Warehouse_Policies")]
            public partial class WarehousePolicy: EntityResource
            {
                public WarehousePolicy(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Wms_WarehousePolicies";
                public const string EntityTableName = "Wms_Warehouse_Policies";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public DateTime? FromDate { get => GetPropertyValue<DateTime?>("FromDate"); set => SetPropertyValue<DateTime?>("FromDate", value); }
                [ODataProperty]
                public Int32? Importance { get => GetPropertyValue<Int32?>("Importance"); set => SetPropertyValue<Int32?>("Importance", value); }
                [ODataProperty]
                public String? Note { get => GetPropertyValue<String?>("Note"); set => SetPropertyValue<String?>("Note", value); }
                [ODataProperty]
                public Logistics.Wms.WarehousePoliciesRepository.PolicyKind? PolicyKind { get => GetPropertyValue<Logistics.Wms.WarehousePoliciesRepository.PolicyKind?>("PolicyKind"); set => SetPropertyValue<Logistics.Wms.WarehousePoliciesRepository.PolicyKind?>("PolicyKind", value); }
                [ODataProperty]
                public DateTime? ToDate { get => GetPropertyValue<DateTime?>("ToDate"); set => SetPropertyValue<DateTime?>("ToDate", value); }
                [ODataProperty]
                public String? Value { get => GetPropertyValue<String?>("Value"); set => SetPropertyValue<String?>("Value", value); }
                [ODataProperty]
                public General.Products.ProductGroup? ProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ProductGroup", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductType? ProductType { get => GetPropertyValue<General.Products.ProductType>("ProductType"); set => SetPropertyValue<General.Products.ProductType>("ProductType", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Wms.Warehouse? Warehouse { get => GetPropertyValue<Logistics.Wms.Warehouse>("Warehouse"); set => SetPropertyValue<Logistics.Wms.Warehouse>("Warehouse", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseZone? Zone { get => GetPropertyValue<Logistics.Wms.WarehouseZone>("Zone"); set => SetPropertyValue<Logistics.Wms.WarehouseZone>("Zone", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehouseRequisitions", TableName = "Wms_Warehouse_Requisitions")]
            public partial class WarehouseRequisition: General.Document
            {
                public WarehouseRequisition(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Logistics_Wms_WarehouseRequisitions";
                public new const string EntityTableName = "Wms_Warehouse_Requisitions";
                [ODataProperty]
                public DateTime? ExpectedDate { get => GetPropertyValue<DateTime?>("ExpectedDate"); set => SetPropertyValue<DateTime?>("ExpectedDate", value); }
                [ODataProperty]
                public TimeSpan? ExpectedTime { get => GetPropertyValue<TimeSpan?>("ExpectedTime"); set => SetPropertyValue<TimeSpan?>("ExpectedTime", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseRequisitionsRepository.RequisitionType? RequisitionType { get => GetPropertyValue<Logistics.Wms.WarehouseRequisitionsRepository.RequisitionType?>("RequisitionType"); set => SetPropertyValue<Logistics.Wms.WarehouseRequisitionsRepository.RequisitionType?>("RequisitionType", value); }
                [ODataProperty]
                public Logistics.Wms.Warehouse? Warehouse { get => GetPropertyValue<Logistics.Wms.Warehouse>("Warehouse"); set => SetPropertyValue<Logistics.Wms.Warehouse>("Warehouse", value); }
                [ODataProperty]
                public IEnumerable<Logistics.Wms.WarehouseRequisitionLine>? Lines { get => GetCollection<Logistics.Wms.WarehouseRequisitionLine>("Lines"); set => SetCollection<Logistics.Wms.WarehouseRequisitionLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehouseRequisitionLines", TableName = "Wms_Warehouse_Requisition_Lines")]
            public partial class WarehouseRequisitionLine: EntityResource
            {
                public WarehouseRequisitionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Wms_WarehouseRequisitionLines";
                public const string EntityTableName = "Wms_Warehouse_Requisition_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantity { get => GetPropertyValue<Quantity?>("StandardQuantity"); set => SetPropertyValue<Quantity?>("StandardQuantity", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Wms.WarehouseRequisition? WarehouseRequisition { get => GetPropertyValue<Logistics.Wms.WarehouseRequisition>("WarehouseRequisition"); set => SetPropertyValue<Logistics.Wms.WarehouseRequisition>("WarehouseRequisition", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseRequisition? Document { get => GetPropertyValue<Logistics.Wms.WarehouseRequisition>("Document"); set => SetPropertyValue<Logistics.Wms.WarehouseRequisition>("Document", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace WarehouseRequisitionsRepository
            {
                public enum RequisitionType
                {
                    Inbound = 0,
                    Outbound = 1
                }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehouseTransactions", TableName = "Wms_Warehouse_Transactions")]
            public partial class WarehouseTransaction: EntityResource
            {
                public WarehouseTransaction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Wms_WarehouseTransactions";
                public const string EntityTableName = "Wms_Warehouse_Transactions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? CatchQuantity { get => GetPropertyValue<Decimal?>("CatchQuantity"); set => SetPropertyValue<Decimal?>("CatchQuantity", value); }
                [ODataProperty]
                public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseTransactionsRepository.Direction? Direction { get => GetPropertyValue<Logistics.Wms.WarehouseTransactionsRepository.Direction?>("Direction"); set => SetPropertyValue<Logistics.Wms.WarehouseTransactionsRepository.Direction?>("Direction", value); }
                [ODataProperty]
                public Decimal? Quantity { get => GetPropertyValue<Decimal?>("Quantity"); set => SetPropertyValue<Decimal?>("Quantity", value); }
                [ODataProperty]
                public Quantity? QuantityBase { get => GetPropertyValue<Quantity?>("QuantityBase"); set => SetPropertyValue<Quantity?>("QuantityBase", value); }
                [ODataProperty]
                public Quantity? StandardQuantity { get => GetPropertyValue<Quantity?>("StandardQuantity"); set => SetPropertyValue<Quantity?>("StandardQuantity", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseOrderLinesRepository.TaskType? TaskType { get => GetPropertyValue<Logistics.Wms.WarehouseOrderLinesRepository.TaskType?>("TaskType"); set => SetPropertyValue<Logistics.Wms.WarehouseOrderLinesRepository.TaskType?>("TaskType", value); }
                [ODataProperty]
                public General.MeasurementUnit? CatchQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("CatchQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("CatchQuantityUnit", value); }
                [ODataProperty]
                public Systems.Security.User? CreationUser { get => GetPropertyValue<Systems.Security.User>("CreationUser"); set => SetPropertyValue<Systems.Security.User>("CreationUser", value); }
                [ODataProperty]
                public Logistics.LogisticUnit? LogisticUnit { get => GetPropertyValue<Logistics.LogisticUnit>("LogisticUnit"); set => SetPropertyValue<Logistics.LogisticUnit>("LogisticUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public General.Products.ProductVariant? ProductVariant { get => GetPropertyValue<General.Products.ProductVariant>("ProductVariant"); set => SetPropertyValue<General.Products.ProductVariant>("ProductVariant", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Wms.Warehouse? Warehouse { get => GetPropertyValue<Logistics.Wms.Warehouse>("Warehouse"); set => SetPropertyValue<Logistics.Wms.Warehouse>("Warehouse", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseLocation? WarehouseLocation { get => GetPropertyValue<Logistics.Wms.WarehouseLocation>("WarehouseLocation"); set => SetPropertyValue<Logistics.Wms.WarehouseLocation>("WarehouseLocation", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseOrder? WarehouseOrder { get => GetPropertyValue<Logistics.Wms.WarehouseOrder>("WarehouseOrder"); set => SetPropertyValue<Logistics.Wms.WarehouseOrder>("WarehouseOrder", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseOrderLine? WarehouseOrderLine { get => GetPropertyValue<Logistics.Wms.WarehouseOrderLine>("WarehouseOrderLine"); set => SetPropertyValue<Logistics.Wms.WarehouseOrderLine>("WarehouseOrderLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace WarehouseTransactionsRepository
            {
                public enum Direction
                {
                    IN = 0,
                    OUT = 1
                }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehouseWorkers", TableName = "Wms_Warehouse_Workers")]
            public partial class WarehouseWorker: EntityResource
            {
                public WarehouseWorker(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Wms_WarehouseWorkers";
                public const string EntityTableName = "Wms_Warehouse_Workers";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? ActiveFrom { get => GetPropertyValue<DateTime?>("ActiveFrom"); set => SetPropertyValue<DateTime?>("ActiveFrom", value); }
                [ODataProperty]
                public DateTime? ActiveTo { get => GetPropertyValue<DateTime?>("ActiveTo"); set => SetPropertyValue<DateTime?>("ActiveTo", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Wms.Warehouse? Warehouse { get => GetPropertyValue<Logistics.Wms.Warehouse>("Warehouse"); set => SetPropertyValue<Logistics.Wms.Warehouse>("Warehouse", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Logistics_Wms_WarehouseZones", TableName = "Wms_Warehouse_Zones")]
            public partial class WarehouseZone: EntityResource
            {
                public WarehouseZone(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Logistics_Wms_WarehouseZones";
                public const string EntityTableName = "Wms_Warehouse_Zones";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Logistics.Wms.WarehouseZone? Parent { get => GetPropertyValue<Logistics.Wms.WarehouseZone>("Parent"); set => SetPropertyValue<Logistics.Wms.WarehouseZone>("Parent", value); }
                [Owner]
                [ODataProperty]
                public Logistics.Wms.Warehouse? Warehouse { get => GetPropertyValue<Logistics.Wms.Warehouse>("Warehouse"); set => SetPropertyValue<Logistics.Wms.Warehouse>("Warehouse", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
    }
    public partial class MultilanguageString: ComplexTypeResource
    {
        public MultilanguageString(IDictionary<string, object?>? rawData = null): base(rawData) {}
        [ODataProperty]
        public String? EN { get => GetPropertyValue<String?>("EN"); set => SetPropertyValue<String?>("EN", value); }
        [ODataProperty]
        public String? BG { get => GetPropertyValue<String?>("BG"); set => SetPropertyValue<String?>("BG", value); }
        [ODataProperty]
        public String? DE { get => GetPropertyValue<String?>("DE"); set => SetPropertyValue<String?>("DE", value); }
        [ODataProperty]
        public String? ES { get => GetPropertyValue<String?>("ES"); set => SetPropertyValue<String?>("ES", value); }
    }
    public partial class OpenObject: ComplexTypeResource
    {
        public OpenObject(IDictionary<string, object?>? rawData = null): base(rawData) {}
    }
    namespace Production
    {
        namespace Resources
        {
            [Entity(EntitySet = "Production_Resources_Capacity", TableName = "Prd_Capacity")]
            public partial class Capacity: EntityResource
            {
                public Capacity(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_Capacity";
                public const string EntityTableName = "Prd_Capacity";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? AvailableEndTime { get => GetPropertyValue<DateTime?>("AvailableEndTime"); set => SetPropertyValue<DateTime?>("AvailableEndTime", value); }
                [ODataProperty]
                public Quantity? AvailableQuantity { get => GetPropertyValue<Quantity?>("AvailableQuantity"); set => SetPropertyValue<Quantity?>("AvailableQuantity", value); }
                [ODataProperty]
                public DateTime? AvailableStartTime { get => GetPropertyValue<DateTime?>("AvailableStartTime"); set => SetPropertyValue<DateTime?>("AvailableStartTime", value); }
                [ODataProperty]
                public DateTime? CalendarDate { get => GetPropertyValue<DateTime?>("CalendarDate"); set => SetPropertyValue<DateTime?>("CalendarDate", value); }
                [Owner]
                [ODataProperty]
                public Production.Resources.WorkgroupResource? WorkgroupResource { get => GetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource"); set => SetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_Functions", TableName = "Prd_Functions")]
            public partial class Function: EntityResource
            {
                public Function(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_Functions";
                public const string EntityTableName = "Prd_Functions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [Owner]
                [ODataProperty]
                public Production.Resources.FunctionGroup? FunctionGroup { get => GetPropertyValue<Production.Resources.FunctionGroup>("FunctionGroup"); set => SetPropertyValue<Production.Resources.FunctionGroup>("FunctionGroup", value); }
                [ODataProperty]
                public General.MeasurementUnit? PrimaryUnit { get => GetPropertyValue<General.MeasurementUnit>("PrimaryUnit"); set => SetPropertyValue<General.MeasurementUnit>("PrimaryUnit", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_FunctionGroups", TableName = "Prd_Function_Groups")]
            public partial class FunctionGroup: EntityResource
            {
                public FunctionGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_FunctionGroups";
                public const string EntityTableName = "Prd_Function_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Parent { get => GetPropertyValue<String?>("Parent"); set => SetPropertyValue<String?>("Parent", value); }
                [ODataProperty]
                public IEnumerable<Production.Resources.Function>? Functions { get => GetCollection<Production.Resources.Function>("Functions"); set => SetCollection<Production.Resources.Function>("Functions", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_Load", TableName = "Prd_Load")]
            public partial class Load: EntityResource
            {
                public Load(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_Load";
                public const string EntityTableName = "Prd_Load";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CalendarDate { get => GetPropertyValue<DateTime?>("CalendarDate"); set => SetPropertyValue<DateTime?>("CalendarDate", value); }
                [ODataProperty]
                public Production.Resources.LoadRepository.Priority? Priority { get => GetPropertyValue<Production.Resources.LoadRepository.Priority?>("Priority"); set => SetPropertyValue<Production.Resources.LoadRepository.Priority?>("Priority", value); }
                [ODataProperty]
                public Production.Resources.LoadRepository.TimeType? TimeType { get => GetPropertyValue<Production.Resources.LoadRepository.TimeType?>("TimeType"); set => SetPropertyValue<Production.Resources.LoadRepository.TimeType?>("TimeType", value); }
                [ODataProperty]
                public DateTime? UsageEndTime { get => GetPropertyValue<DateTime?>("UsageEndTime"); set => SetPropertyValue<DateTime?>("UsageEndTime", value); }
                [ODataProperty]
                public Quantity? UsageQuantity { get => GetPropertyValue<Quantity?>("UsageQuantity"); set => SetPropertyValue<Quantity?>("UsageQuantity", value); }
                [ODataProperty]
                public DateTime? UsageStartTime { get => GetPropertyValue<DateTime?>("UsageStartTime"); set => SetPropertyValue<DateTime?>("UsageStartTime", value); }
                [ODataProperty]
                public Int32? UsageTimeMinutes { get => GetPropertyValue<Int32?>("UsageTimeMinutes"); set => SetPropertyValue<Int32?>("UsageTimeMinutes", value); }
                [Owner]
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItemOperation? WorkOrderItemOperation { get => GetPropertyValue<Production.ShopFloor.WorkOrderItemOperation>("WorkOrderItemOperation"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItemOperation>("WorkOrderItemOperation", value); }
                [ODataProperty]
                public Production.Resources.WorkgroupResource? WorkgroupResource { get => GetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource"); set => SetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace LoadRepository
            {
                public enum Priority
                {
                    Lowest = 1,
                    Two = 2,
                    Three = 3,
                    Four = 4,
                    Highest = 5
                }
                public enum TimeType
                {
                    Move = 0,
                    Run = 1,
                    Setup = 2,
                    Wait = 3
                }
            }
            [Entity(EntitySet = "Production_Resources_Operations", TableName = "Prd_Operations")]
            public partial class Operation: EntityResource
            {
                public Operation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_Operations";
                public const string EntityTableName = "Prd_Operations";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Int32? MinimumConcurrentStartTimeMinutes { get => GetPropertyValue<Int32?>("MinimumConcurrentStartTimeMinutes"); set => SetPropertyValue<Int32?>("MinimumConcurrentStartTimeMinutes", value); }
                [ODataProperty]
                public Int32? MoveTimeMinutes { get => GetPropertyValue<Int32?>("MoveTimeMinutes"); set => SetPropertyValue<Int32?>("MoveTimeMinutes", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Int32? RunTimeMinutes { get => GetPropertyValue<Int32?>("RunTimeMinutes"); set => SetPropertyValue<Int32?>("RunTimeMinutes", value); }
                [ODataProperty]
                public Decimal? ScrapRate { get => GetPropertyValue<Decimal?>("ScrapRate"); set => SetPropertyValue<Decimal?>("ScrapRate", value); }
                [ODataProperty]
                public Int32? SetupTimeMinutes { get => GetPropertyValue<Int32?>("SetupTimeMinutes"); set => SetPropertyValue<Int32?>("SetupTimeMinutes", value); }
                [ODataProperty]
                public Decimal? StandardPricePerHour { get => GetPropertyValue<Decimal?>("StandardPricePerHour"); set => SetPropertyValue<Decimal?>("StandardPricePerHour", value); }
                [ODataProperty]
                public String? Tooling { get => GetPropertyValue<String?>("Tooling"); set => SetPropertyValue<String?>("Tooling", value); }
                [ODataProperty]
                public Quantity? UseQuantityBase { get => GetPropertyValue<Quantity?>("UseQuantityBase"); set => SetPropertyValue<Quantity?>("UseQuantityBase", value); }
                [ODataProperty]
                public Int32? WaitTimeMinutes { get => GetPropertyValue<Int32?>("WaitTimeMinutes"); set => SetPropertyValue<Int32?>("WaitTimeMinutes", value); }
                [Owner]
                [ODataProperty]
                public Production.Resources.OperationGroup? OperationGroup { get => GetPropertyValue<Production.Resources.OperationGroup>("OperationGroup"); set => SetPropertyValue<Production.Resources.OperationGroup>("OperationGroup", value); }
                [ODataProperty]
                public Production.Resources.OperationInstruction? OperationInstructions { get => GetPropertyValue<Production.Resources.OperationInstruction>("OperationInstructions"); set => SetPropertyValue<Production.Resources.OperationInstruction>("OperationInstructions", value); }
                [ODataProperty]
                public Production.Resources.WorkgroupResource? WorkgroupResource { get => GetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource"); set => SetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_OperationGroups", TableName = "Prd_Operation_Groups")]
            public partial class OperationGroup: EntityResource
            {
                public OperationGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_OperationGroups";
                public const string EntityTableName = "Prd_Operation_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Parent { get => GetPropertyValue<String?>("Parent"); set => SetPropertyValue<String?>("Parent", value); }
                [ODataProperty]
                public IEnumerable<Production.Resources.Operation>? Operations { get => GetCollection<Production.Resources.Operation>("Operations"); set => SetCollection<Production.Resources.Operation>("Operations", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_OperationInstructions", TableName = "Prd_Operation_Instructions")]
            public partial class OperationInstruction: EntityResource
            {
                public OperationInstruction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_OperationInstructions";
                public const string EntityTableName = "Prd_Operation_Instructions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Byte[]? Instructions { get => GetPropertyValue<Byte[]?>("Instructions"); set => SetPropertyValue<Byte[]?>("Instructions", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_Resources", TableName = "Prd_Resources")]
            public partial class Resource: EntityResource
            {
                public Resource(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_Resources";
                public const string EntityTableName = "Prd_Resources";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Decimal? SetupDurationHours { get => GetPropertyValue<Decimal?>("SetupDurationHours"); set => SetPropertyValue<Decimal?>("SetupDurationHours", value); }
                [ODataProperty]
                public Quantity? SetupScrapQuantity { get => GetPropertyValue<Quantity?>("SetupScrapQuantity"); set => SetPropertyValue<Quantity?>("SetupScrapQuantity", value); }
                [ODataProperty]
                public Amount? StandardCostPerHour { get => GetPropertyValue<Amount?>("StandardCostPerHour"); set => SetPropertyValue<Amount?>("StandardCostPerHour", value); }
                [ODataProperty]
                public Amount? StandardPricePerHour { get => GetPropertyValue<Amount?>("StandardPricePerHour"); set => SetPropertyValue<Amount?>("StandardPricePerHour", value); }
                [ODataProperty]
                public General.MeasurementUnit? PrimaryUnit { get => GetPropertyValue<General.MeasurementUnit>("PrimaryUnit"); set => SetPropertyValue<General.MeasurementUnit>("PrimaryUnit", value); }
                [ODataProperty]
                public General.Currency? ResourceCurrency { get => GetPropertyValue<General.Currency>("ResourceCurrency"); set => SetPropertyValue<General.Currency>("ResourceCurrency", value); }
                [Owner]
                [ODataProperty]
                public Production.Resources.ResourceGroup? ResourceGroup { get => GetPropertyValue<Production.Resources.ResourceGroup>("ResourceGroup"); set => SetPropertyValue<Production.Resources.ResourceGroup>("ResourceGroup", value); }
                [ODataProperty]
                public General.MeasurementUnit? SetupScrapUnit { get => GetPropertyValue<General.MeasurementUnit>("SetupScrapUnit"); set => SetPropertyValue<General.MeasurementUnit>("SetupScrapUnit", value); }
                [ODataProperty]
                public IEnumerable<Production.Resources.ResourceFunction>? Functions { get => GetCollection<Production.Resources.ResourceFunction>("Functions"); set => SetCollection<Production.Resources.ResourceFunction>("Functions", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_ResourceFunctions", TableName = "Prd_Resource_Functions")]
            public partial class ResourceFunction: EntityResource
            {
                public ResourceFunction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_ResourceFunctions";
                public const string EntityTableName = "Prd_Resource_Functions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Production.Resources.Function? Function { get => GetPropertyValue<Production.Resources.Function>("Function"); set => SetPropertyValue<Production.Resources.Function>("Function", value); }
                [Owner]
                [ODataProperty]
                public Production.Resources.Resource? Resource { get => GetPropertyValue<Production.Resources.Resource>("Resource"); set => SetPropertyValue<Production.Resources.Resource>("Resource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_ResourceGroups", TableName = "Prd_Resource_Groups")]
            public partial class ResourceGroup: EntityResource
            {
                public ResourceGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_ResourceGroups";
                public const string EntityTableName = "Prd_Resource_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? Parent { get => GetPropertyValue<String?>("Parent"); set => SetPropertyValue<String?>("Parent", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public IEnumerable<Production.Resources.Resource>? Resources { get => GetCollection<Production.Resources.Resource>("Resources"); set => SetCollection<Production.Resources.Resource>("Resources", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_Workgroups", TableName = "Prd_Workgroups")]
            public partial class Workgroup: EntityResource
            {
                public Workgroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_Workgroups";
                public const string EntityTableName = "Prd_Workgroups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public String? CostCurrency { get => GetPropertyValue<String?>("CostCurrency"); set => SetPropertyValue<String?>("CostCurrency", value); }
                [ODataProperty]
                public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Parent { get => GetPropertyValue<String?>("Parent"); set => SetPropertyValue<String?>("Parent", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public IEnumerable<Production.Resources.WorkgroupResource>? Resources { get => GetCollection<Production.Resources.WorkgroupResource>("Resources"); set => SetCollection<Production.Resources.WorkgroupResource>("Resources", value); }
                [ODataProperty]
                public IEnumerable<Production.Resources.WorkgroupShift>? Shifts { get => GetCollection<Production.Resources.WorkgroupShift>("Shifts"); set => SetCollection<Production.Resources.WorkgroupShift>("Shifts", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_WorkgroupResources", TableName = "Prd_Workgroup_Resources")]
            public partial class WorkgroupResource: EntityResource
            {
                public WorkgroupResource(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_WorkgroupResources";
                public const string EntityTableName = "Prd_Workgroup_Resources";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public Quantity? AvailableQuantity { get => GetPropertyValue<Quantity?>("AvailableQuantity"); set => SetPropertyValue<Quantity?>("AvailableQuantity", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Production.Resources.Resource? Resource { get => GetPropertyValue<Production.Resources.Resource>("Resource"); set => SetPropertyValue<Production.Resources.Resource>("Resource", value); }
                [Owner]
                [ODataProperty]
                public Production.Resources.Workgroup? Workgroup { get => GetPropertyValue<Production.Resources.Workgroup>("Workgroup"); set => SetPropertyValue<Production.Resources.Workgroup>("Workgroup", value); }
                [ODataProperty]
                public IEnumerable<Production.Resources.Capacity>? Capacity { get => GetCollection<Production.Resources.Capacity>("Capacity"); set => SetCollection<Production.Resources.Capacity>("Capacity", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Resources_WorkgroupShifts", TableName = "Prd_Workgroup_Shifts")]
            public partial class WorkgroupShift: EntityResource
            {
                public WorkgroupShift(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Resources_WorkgroupShifts";
                public const string EntityTableName = "Prd_Workgroup_Shifts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? EfficiencyFactorPercent { get => GetPropertyValue<Decimal?>("EfficiencyFactorPercent"); set => SetPropertyValue<Decimal?>("EfficiencyFactorPercent", value); }
                [ODataProperty]
                public DateTime? EstablishmentDate { get => GetPropertyValue<DateTime?>("EstablishmentDate"); set => SetPropertyValue<DateTime?>("EstablishmentDate", value); }
                [ODataProperty]
                public String? ShiftName { get => GetPropertyValue<String?>("ShiftName"); set => SetPropertyValue<String?>("ShiftName", value); }
                [ODataProperty]
                public General.Resources.WorkSchedule? WorkSchedule { get => GetPropertyValue<General.Resources.WorkSchedule>("WorkSchedule"); set => SetPropertyValue<General.Resources.WorkSchedule>("WorkSchedule", value); }
                [Owner]
                [ODataProperty]
                public Production.Resources.Workgroup? Workgroup { get => GetPropertyValue<Production.Resources.Workgroup>("Workgroup"); set => SetPropertyValue<Production.Resources.Workgroup>("Workgroup", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace ShopFloor
        {
            [Entity(EntitySet = "Production_ShopFloor_ConsumptionOrders", TableName = "Prd_Consumption_Orders")]
            public partial class ConsumptionOrder: General.Document
            {
                public ConsumptionOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Production_ShopFloor_ConsumptionOrders";
                public new const string EntityTableName = "Prd_Consumption_Orders";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Status { get => GetPropertyValue<String?>("Status"); set => SetPropertyValue<String?>("Status", value); }
                [ODataProperty]
                public General.Currency? DocumentCurrency { get => GetPropertyValue<General.Currency>("DocumentCurrency"); set => SetPropertyValue<General.Currency>("DocumentCurrency", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrder? WorkOrder { get => GetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder"); set => SetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder", value); }
                [ODataProperty]
                public IEnumerable<Production.ShopFloor.ConsumptionOrderLine>? Lines { get => GetCollection<Production.ShopFloor.ConsumptionOrderLine>("Lines"); set => SetCollection<Production.ShopFloor.ConsumptionOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Production_ShopFloor_ConsumptionOrderLines", TableName = "Prd_Consumption_Order_Lines")]
            public partial class ConsumptionOrderLine: EntityResource
            {
                public ConsumptionOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_ShopFloor_ConsumptionOrderLines";
                public const string EntityTableName = "Prd_Consumption_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? ConsumedQuantity { get => GetPropertyValue<Quantity?>("ConsumedQuantity"); set => SetPropertyValue<Quantity?>("ConsumedQuantity", value); }
                [ODataProperty]
                public Quantity? ConsumedQuantityBase { get => GetPropertyValue<Quantity?>("ConsumedQuantityBase"); set => SetPropertyValue<Quantity?>("ConsumedQuantityBase", value); }
                [ODataProperty]
                public Quantity? ConsumedStandardQuantityBase { get => GetPropertyValue<Quantity?>("ConsumedStandardQuantityBase"); set => SetPropertyValue<Quantity?>("ConsumedStandardQuantityBase", value); }
                [ODataProperty]
                public Production.ShopFloor.ConsumptionOrderLinesRepository.ConsumptionType? ConsumptionType { get => GetPropertyValue<Production.ShopFloor.ConsumptionOrderLinesRepository.ConsumptionType?>("ConsumptionType"); set => SetPropertyValue<Production.ShopFloor.ConsumptionOrderLinesRepository.ConsumptionType?>("ConsumptionType", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? ScheduledDateTime { get => GetPropertyValue<DateTime?>("ScheduledDateTime"); set => SetPropertyValue<DateTime?>("ScheduledDateTime", value); }
                [ODataProperty]
                public General.MeasurementUnit? ConsumedQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("ConsumedQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("ConsumedQuantityUnit", value); }
                [Owner]
                [ODataProperty]
                public Production.ShopFloor.ConsumptionOrder? ConsumptionOrder { get => GetPropertyValue<Production.ShopFloor.ConsumptionOrder>("ConsumptionOrder"); set => SetPropertyValue<Production.ShopFloor.ConsumptionOrder>("ConsumptionOrder", value); }
                [ODataProperty]
                public Production.ShopFloor.ConsumptionOrder? Document { get => GetPropertyValue<Production.ShopFloor.ConsumptionOrder>("Document"); set => SetPropertyValue<Production.ShopFloor.ConsumptionOrder>("Document", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItemIngredient? WorkOrderItemIngredient { get => GetPropertyValue<Production.ShopFloor.WorkOrderItemIngredient>("WorkOrderItemIngredient"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItemIngredient>("WorkOrderItemIngredient", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ConsumptionOrderLinesRepository
            {
                public enum ConsumptionType
                {
                    ForSpecifiedItem = 0,
                    ForAllItems = 1
                }
            }
            [Entity(EntitySet = "Production_ShopFloor_OutputOrders", TableName = "Prd_Output_Orders")]
            public partial class OutputOrder: General.Document
            {
                public OutputOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Production_ShopFloor_OutputOrders";
                public new const string EntityTableName = "Prd_Output_Orders";
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Status { get => GetPropertyValue<String?>("Status"); set => SetPropertyValue<String?>("Status", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrder? WorkOrder { get => GetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder"); set => SetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder", value); }
                [ODataProperty]
                public IEnumerable<Production.ShopFloor.OutputOrderConsumptionLine>? ConsumptionLines { get => GetCollection<Production.ShopFloor.OutputOrderConsumptionLine>("ConsumptionLines"); set => SetCollection<Production.ShopFloor.OutputOrderConsumptionLine>("ConsumptionLines", value); }
                [ODataProperty]
                public IEnumerable<Production.ShopFloor.OutputOrderLine>? Lines { get => GetCollection<Production.ShopFloor.OutputOrderLine>("Lines"); set => SetCollection<Production.ShopFloor.OutputOrderLine>("Lines", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Production_ShopFloor_OutputOrderConsumptionLines", TableName = "Prd_Output_Order_Consumption_Lines")]
            public partial class OutputOrderConsumptionLine: EntityResource
            {
                public OutputOrderConsumptionLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_ShopFloor_OutputOrderConsumptionLines";
                public const string EntityTableName = "Prd_Output_Order_Consumption_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Quantity? ConsumedQuantityForRun { get => GetPropertyValue<Quantity?>("ConsumedQuantityForRun"); set => SetPropertyValue<Quantity?>("ConsumedQuantityForRun", value); }
                [ODataProperty]
                public Quantity? ConsumedQuantityForScrap { get => GetPropertyValue<Quantity?>("ConsumedQuantityForScrap"); set => SetPropertyValue<Quantity?>("ConsumedQuantityForScrap", value); }
                [ODataProperty]
                public Quantity? ConsumedQuantityForSetup { get => GetPropertyValue<Quantity?>("ConsumedQuantityForSetup"); set => SetPropertyValue<Quantity?>("ConsumedQuantityForSetup", value); }
                [ODataProperty]
                public Int32? LineNo { get => GetPropertyValue<Int32?>("LineNo"); set => SetPropertyValue<Int32?>("LineNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrder? LineWorkOrder { get => GetPropertyValue<Production.ShopFloor.WorkOrder>("LineWorkOrder"); set => SetPropertyValue<Production.ShopFloor.WorkOrder>("LineWorkOrder", value); }
                [ODataProperty]
                public General.Products.Product? Material { get => GetPropertyValue<General.Products.Product>("Material"); set => SetPropertyValue<General.Products.Product>("Material", value); }
                [Owner]
                [ODataProperty]
                public Production.ShopFloor.OutputOrder? OutputOrder { get => GetPropertyValue<Production.ShopFloor.OutputOrder>("OutputOrder"); set => SetPropertyValue<Production.ShopFloor.OutputOrder>("OutputOrder", value); }
                [ODataProperty]
                public Production.ShopFloor.OutputOrder? Document { get => GetPropertyValue<Production.ShopFloor.OutputOrder>("Document"); set => SetPropertyValue<Production.ShopFloor.OutputOrder>("Document", value); }
                [ODataProperty]
                public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
                [ODataProperty]
                public Logistics.Inventory.ScrapType? ScrapType { get => GetPropertyValue<Logistics.Inventory.ScrapType>("ScrapType"); set => SetPropertyValue<Logistics.Inventory.ScrapType>("ScrapType", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItem? WorkOrderItem { get => GetPropertyValue<Production.ShopFloor.WorkOrderItem>("WorkOrderItem"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItem>("WorkOrderItem", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItemOperation? WorkOrderItemOperation { get => GetPropertyValue<Production.ShopFloor.WorkOrderItemOperation>("WorkOrderItemOperation"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItemOperation>("WorkOrderItemOperation", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_ShopFloor_OutputOrderDistributedMaterialConsumptions", TableName = "Prd_Output_Order_Distributed_Material_Consumptions")]
            public partial class OutputOrderDistributedMaterialConsumption: EntityResource
            {
                public OutputOrderDistributedMaterialConsumption(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_ShopFloor_OutputOrderDistributedMaterialConsumptions";
                public const string EntityTableName = "Prd_Output_Order_Distributed_Material_Consumptions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? ConsumedCost { get => GetPropertyValue<Amount?>("ConsumedCost"); set => SetPropertyValue<Amount?>("ConsumedCost", value); }
                [ODataProperty]
                public Quantity? ConsumedQuantity { get => GetPropertyValue<Quantity?>("ConsumedQuantity"); set => SetPropertyValue<Quantity?>("ConsumedQuantity", value); }
                [ODataProperty]
                public Production.ShopFloor.ConsumptionOrderLine? ConsumptionOrderLine { get => GetPropertyValue<Production.ShopFloor.ConsumptionOrderLine>("ConsumptionOrderLine"); set => SetPropertyValue<Production.ShopFloor.ConsumptionOrderLine>("ConsumptionOrderLine", value); }
                [Owner]
                [ODataProperty]
                public Production.ShopFloor.OutputOrderLine? OutputOrderLine { get => GetPropertyValue<Production.ShopFloor.OutputOrderLine>("OutputOrderLine"); set => SetPropertyValue<Production.ShopFloor.OutputOrderLine>("OutputOrderLine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_ShopFloor_OutputOrderLines", TableName = "Prd_Output_Order_Lines")]
            public partial class OutputOrderLine: EntityResource
            {
                public OutputOrderLine(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_ShopFloor_OutputOrderLines";
                public const string EntityTableName = "Prd_Output_Order_Lines";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? BeginDateTime { get => GetPropertyValue<DateTime?>("BeginDateTime"); set => SetPropertyValue<DateTime?>("BeginDateTime", value); }
                [ODataProperty]
                public DateTime? EndTime { get => GetPropertyValue<DateTime?>("EndTime"); set => SetPropertyValue<DateTime?>("EndTime", value); }
                [ODataProperty]
                public Boolean? Finished { get => GetPropertyValue<Boolean?>("Finished"); set => SetPropertyValue<Boolean?>("Finished", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Quantity? ProducedQuantity { get => GetPropertyValue<Quantity?>("ProducedQuantity"); set => SetPropertyValue<Quantity?>("ProducedQuantity", value); }
                [ODataProperty]
                public Quantity? ProducedQuantityBase { get => GetPropertyValue<Quantity?>("ProducedQuantityBase"); set => SetPropertyValue<Quantity?>("ProducedQuantityBase", value); }
                [ODataProperty]
                public Quantity? ProducedStandardQuantityBase { get => GetPropertyValue<Quantity?>("ProducedStandardQuantityBase"); set => SetPropertyValue<Quantity?>("ProducedStandardQuantityBase", value); }
                [ODataProperty]
                public DateTime? StartTime { get => GetPropertyValue<DateTime?>("StartTime"); set => SetPropertyValue<DateTime?>("StartTime", value); }
                [ODataProperty]
                public DateTime? TransactionTimestamp { get => GetPropertyValue<DateTime?>("TransactionTimestamp"); set => SetPropertyValue<DateTime?>("TransactionTimestamp", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrder? LineWorkOrder { get => GetPropertyValue<Production.ShopFloor.WorkOrder>("LineWorkOrder"); set => SetPropertyValue<Production.ShopFloor.WorkOrder>("LineWorkOrder", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [Owner]
                [ODataProperty]
                public Production.ShopFloor.OutputOrder? OutputOrder { get => GetPropertyValue<Production.ShopFloor.OutputOrder>("OutputOrder"); set => SetPropertyValue<Production.ShopFloor.OutputOrder>("OutputOrder", value); }
                [ODataProperty]
                public Production.ShopFloor.OutputOrder? Document { get => GetPropertyValue<Production.ShopFloor.OutputOrder>("Document"); set => SetPropertyValue<Production.ShopFloor.OutputOrder>("Document", value); }
                [ODataProperty]
                public General.MeasurementUnit? ProducedQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("ProducedQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("ProducedQuantityUnit", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public General.Contacts.Party? WorkDoneByParty { get => GetPropertyValue<General.Contacts.Party>("WorkDoneByParty"); set => SetPropertyValue<General.Contacts.Party>("WorkDoneByParty", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItem? WorkOrderItem { get => GetPropertyValue<Production.ShopFloor.WorkOrderItem>("WorkOrderItem"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItem>("WorkOrderItem", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItemOperation? WorkOrderItemOperation { get => GetPropertyValue<Production.ShopFloor.WorkOrderItemOperation>("WorkOrderItemOperation"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItemOperation>("WorkOrderItemOperation", value); }
                [ODataProperty]
                public Production.Resources.WorkgroupResource? WorkgroupResource { get => GetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource"); set => SetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource", value); }
                [ODataProperty]
                public IEnumerable<Production.ShopFloor.OutputOrderDistributedMaterialConsumption>? OutputOrderDistributedMaterialConsumptions { get => GetCollection<Production.ShopFloor.OutputOrderDistributedMaterialConsumption>("OutputOrderDistributedMaterialConsumptions"); set => SetCollection<Production.ShopFloor.OutputOrderDistributedMaterialConsumption>("OutputOrderDistributedMaterialConsumptions", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_ShopFloor_WorkOrders", TableName = "Prd_Work_Orders")]
            public partial class WorkOrder: General.Document
            {
                public WorkOrder(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public new const string EntitySetName = "Production_ShopFloor_WorkOrders";
                public new const string EntityTableName = "Prd_Work_Orders";
                [ODataProperty]
                public DateTime? CompletionDate { get => GetPropertyValue<DateTime?>("CompletionDate"); set => SetPropertyValue<DateTime?>("CompletionDate", value); }
                [ODataProperty]
                public DateTime? DueDate { get => GetPropertyValue<DateTime?>("DueDate"); set => SetPropertyValue<DateTime?>("DueDate", value); }
                [ODataProperty]
                public Decimal? DurationHour { get => GetPropertyValue<Decimal?>("DurationHour"); set => SetPropertyValue<Decimal?>("DurationHour", value); }
                [ODataProperty]
                public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
                [ODataProperty]
                public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrdersRepository.Priority? Priority { get => GetPropertyValue<Production.ShopFloor.WorkOrdersRepository.Priority?>("Priority"); set => SetPropertyValue<Production.ShopFloor.WorkOrdersRepository.Priority?>("Priority", value); }
                [ODataProperty]
                public DateTime? ReleaseDate { get => GetPropertyValue<DateTime?>("ReleaseDate"); set => SetPropertyValue<DateTime?>("ReleaseDate", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? DefaultMaterialsStore { get => GetPropertyValue<Logistics.Inventory.Store>("DefaultMaterialsStore"); set => SetPropertyValue<Logistics.Inventory.Store>("DefaultMaterialsStore", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? DefaultOutputStore { get => GetPropertyValue<Logistics.Inventory.Store>("DefaultOutputStore"); set => SetPropertyValue<Logistics.Inventory.Store>("DefaultOutputStore", value); }
                [ODataProperty]
                public Production.Resources.Workgroup? Workgroup { get => GetPropertyValue<Production.Resources.Workgroup>("Workgroup"); set => SetPropertyValue<Production.Resources.Workgroup>("Workgroup", value); }
                [ODataProperty]
                public IEnumerable<Production.ShopFloor.WorkOrderItemIngredient>? ItemIngredients { get => GetCollection<Production.ShopFloor.WorkOrderItemIngredient>("ItemIngredients"); set => SetCollection<Production.ShopFloor.WorkOrderItemIngredient>("ItemIngredients", value); }
                [ODataProperty]
                public IEnumerable<Production.ShopFloor.WorkOrderItem>? Items { get => GetCollection<Production.ShopFloor.WorkOrderItem>("Items"); set => SetCollection<Production.ShopFloor.WorkOrderItem>("Items", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
                public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
                public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
                public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
                public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
                public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
            }
            [Entity(EntitySet = "Production_ShopFloor_WorkOrderItems", TableName = "Prd_Work_Order_Items")]
            public partial class WorkOrderItem: EntityResource
            {
                public WorkOrderItem(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_ShopFloor_WorkOrderItems";
                public const string EntityTableName = "Prd_Work_Order_Items";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CompletionDate { get => GetPropertyValue<DateTime?>("CompletionDate"); set => SetPropertyValue<DateTime?>("CompletionDate", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public Quantity? LotSize { get => GetPropertyValue<Quantity?>("LotSize"); set => SetPropertyValue<Quantity?>("LotSize", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Guid? ParentLineId { get => GetPropertyValue<Guid?>("ParentLineId"); set => SetPropertyValue<Guid?>("ParentLineId", value); }
                [ODataProperty]
                public Int32? ParentLineNo { get => GetPropertyValue<Int32?>("ParentLineNo"); set => SetPropertyValue<Int32?>("ParentLineNo", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItemsRepository.Priority? Priority { get => GetPropertyValue<Production.ShopFloor.WorkOrderItemsRepository.Priority?>("Priority"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItemsRepository.Priority?>("Priority", value); }
                [ODataProperty]
                public Quantity? ProducedQuantity { get => GetPropertyValue<Quantity?>("ProducedQuantity"); set => SetPropertyValue<Quantity?>("ProducedQuantity", value); }
                [ODataProperty]
                public Quantity? ProducedQuantityBase { get => GetPropertyValue<Quantity?>("ProducedQuantityBase"); set => SetPropertyValue<Quantity?>("ProducedQuantityBase", value); }
                [ODataProperty]
                public Quantity? ProducedStandardQuantityBase { get => GetPropertyValue<Quantity?>("ProducedStandardQuantityBase"); set => SetPropertyValue<Quantity?>("ProducedStandardQuantityBase", value); }
                [ODataProperty]
                public DateTime? ReleaseDate { get => GetPropertyValue<DateTime?>("ReleaseDate"); set => SetPropertyValue<DateTime?>("ReleaseDate", value); }
                [ODataProperty]
                public DateTime? ScheduledEndDateTime { get => GetPropertyValue<DateTime?>("ScheduledEndDateTime"); set => SetPropertyValue<DateTime?>("ScheduledEndDateTime", value); }
                [ODataProperty]
                public DateTime? ScheduledStartDateTime { get => GetPropertyValue<DateTime?>("ScheduledStartDateTime"); set => SetPropertyValue<DateTime?>("ScheduledStartDateTime", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? OutputStore { get => GetPropertyValue<Logistics.Inventory.Store>("OutputStore"); set => SetPropertyValue<Logistics.Inventory.Store>("OutputStore", value); }
                [ODataProperty]
                public General.Document? ParentDocument { get => GetPropertyValue<General.Document>("ParentDocument"); set => SetPropertyValue<General.Document>("ParentDocument", value); }
                [ODataProperty]
                public General.MeasurementUnit? ProducedQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("ProducedQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("ProducedQuantityUnit", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Production.Technologies.Recipe? Recipe { get => GetPropertyValue<Production.Technologies.Recipe>("Recipe"); set => SetPropertyValue<Production.Technologies.Recipe>("Recipe", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                [Owner]
                [ODataProperty]
                public Production.ShopFloor.WorkOrder? WorkOrder { get => GetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder"); set => SetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrder? Document { get => GetPropertyValue<Production.ShopFloor.WorkOrder>("Document"); set => SetPropertyValue<Production.ShopFloor.WorkOrder>("Document", value); }
                [ODataProperty]
                public IEnumerable<Production.ShopFloor.WorkOrderItemOperation>? Operations { get => GetCollection<Production.ShopFloor.WorkOrderItemOperation>("Operations"); set => SetCollection<Production.ShopFloor.WorkOrderItemOperation>("Operations", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_ShopFloor_WorkOrderItemIngredients", TableName = "Prd_Work_Order_Item_Ingredients")]
            public partial class WorkOrderItemIngredient: EntityResource
            {
                public WorkOrderItemIngredient(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_ShopFloor_WorkOrderItemIngredients";
                public const string EntityTableName = "Prd_Work_Order_Item_Ingredients";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItemIngredientsRepository.DistributeBy? DistributeBy { get => GetPropertyValue<Production.ShopFloor.WorkOrderItemIngredientsRepository.DistributeBy?>("DistributeBy"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItemIngredientsRepository.DistributeBy?>("DistributeBy", value); }
                [ODataProperty]
                public Quantity? FixedScrapQuantity { get => GetPropertyValue<Quantity?>("FixedScrapQuantity"); set => SetPropertyValue<Quantity?>("FixedScrapQuantity", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Quantity? UsedQuantity { get => GetPropertyValue<Quantity?>("UsedQuantity"); set => SetPropertyValue<Quantity?>("UsedQuantity", value); }
                [ODataProperty]
                public Quantity? UsedQuantityBase { get => GetPropertyValue<Quantity?>("UsedQuantityBase"); set => SetPropertyValue<Quantity?>("UsedQuantityBase", value); }
                [ODataProperty]
                public Quantity? UsedStandardQuantityBase { get => GetPropertyValue<Quantity?>("UsedStandardQuantityBase"); set => SetPropertyValue<Quantity?>("UsedStandardQuantityBase", value); }
                [ODataProperty]
                public General.MeasurementCategory? DistributeByMeasurementCategory { get => GetPropertyValue<General.MeasurementCategory>("DistributeByMeasurementCategory"); set => SetPropertyValue<General.MeasurementCategory>("DistributeByMeasurementCategory", value); }
                [ODataProperty]
                public Logistics.Inventory.Lot? Lot { get => GetPropertyValue<Logistics.Inventory.Lot>("Lot"); set => SetPropertyValue<Logistics.Inventory.Lot>("Lot", value); }
                [ODataProperty]
                public General.Products.Product? Material { get => GetPropertyValue<General.Products.Product>("Material"); set => SetPropertyValue<General.Products.Product>("Material", value); }
                [ODataProperty]
                public Production.Resources.Operation? Operation { get => GetPropertyValue<Production.Resources.Operation>("Operation"); set => SetPropertyValue<Production.Resources.Operation>("Operation", value); }
                [ODataProperty]
                public Production.Technologies.PrincipalRecipeIngredient? PrincipalRecipeIngredient { get => GetPropertyValue<Production.Technologies.PrincipalRecipeIngredient>("PrincipalRecipeIngredient"); set => SetPropertyValue<Production.Technologies.PrincipalRecipeIngredient>("PrincipalRecipeIngredient", value); }
                [ODataProperty]
                public General.Products.ProductCode? ProductCode { get => GetPropertyValue<General.Products.ProductCode>("ProductCode"); set => SetPropertyValue<General.Products.ProductCode>("ProductCode", value); }
                [ODataProperty]
                public Logistics.Inventory.SerialNumber? SerialNumber { get => GetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber"); set => SetPropertyValue<Logistics.Inventory.SerialNumber>("SerialNumber", value); }
                [ODataProperty]
                public Logistics.Inventory.StoreBin? StoreBin { get => GetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin"); set => SetPropertyValue<Logistics.Inventory.StoreBin>("StoreBin", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public General.MeasurementUnit? UsedQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("UsedQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("UsedQuantityUnit", value); }
                [Owner]
                [ODataProperty]
                public Production.ShopFloor.WorkOrder? WorkOrder { get => GetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder"); set => SetPropertyValue<Production.ShopFloor.WorkOrder>("WorkOrder", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrder? Document { get => GetPropertyValue<Production.ShopFloor.WorkOrder>("Document"); set => SetPropertyValue<Production.ShopFloor.WorkOrder>("Document", value); }
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItem? WorkOrderItem { get => GetPropertyValue<Production.ShopFloor.WorkOrderItem>("WorkOrderItem"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItem>("WorkOrderItem", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace WorkOrderItemIngredientsRepository
            {
                public enum DistributeBy
                {
                    StandardPrice = 0,
                    Measurement = 1,
                    StandardCost = 2
                }
            }
            [Entity(EntitySet = "Production_ShopFloor_WorkOrderItemOperations", TableName = "Prd_Work_Order_Item_Operations")]
            public partial class WorkOrderItemOperation: EntityResource
            {
                public WorkOrderItemOperation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_ShopFloor_WorkOrderItemOperations";
                public const string EntityTableName = "Prd_Work_Order_Item_Operations";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? ActualEndDateTime { get => GetPropertyValue<DateTime?>("ActualEndDateTime"); set => SetPropertyValue<DateTime?>("ActualEndDateTime", value); }
                [ODataProperty]
                public DateTime? ActualStartDateTime { get => GetPropertyValue<DateTime?>("ActualStartDateTime"); set => SetPropertyValue<DateTime?>("ActualStartDateTime", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public Int32? MinimumConcurrentStartTimeMinutes { get => GetPropertyValue<Int32?>("MinimumConcurrentStartTimeMinutes"); set => SetPropertyValue<Int32?>("MinimumConcurrentStartTimeMinutes", value); }
                [ODataProperty]
                public Int32? MoveTimeMinutes { get => GetPropertyValue<Int32?>("MoveTimeMinutes"); set => SetPropertyValue<Int32?>("MoveTimeMinutes", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? OperationDescription { get => GetPropertyValue<String?>("OperationDescription"); set => SetPropertyValue<String?>("OperationDescription", value); }
                [ODataProperty]
                public Int32? RunTimeMinutes { get => GetPropertyValue<Int32?>("RunTimeMinutes"); set => SetPropertyValue<Int32?>("RunTimeMinutes", value); }
                [ODataProperty]
                public DateTime? ScheduledEndDateTime { get => GetPropertyValue<DateTime?>("ScheduledEndDateTime"); set => SetPropertyValue<DateTime?>("ScheduledEndDateTime", value); }
                [ODataProperty]
                public DateTime? ScheduledStartDateTime { get => GetPropertyValue<DateTime?>("ScheduledStartDateTime"); set => SetPropertyValue<DateTime?>("ScheduledStartDateTime", value); }
                [ODataProperty]
                public Decimal? ScrapRate { get => GetPropertyValue<Decimal?>("ScrapRate"); set => SetPropertyValue<Decimal?>("ScrapRate", value); }
                [ODataProperty]
                public Int32? SetupTimeMinutes { get => GetPropertyValue<Int32?>("SetupTimeMinutes"); set => SetPropertyValue<Int32?>("SetupTimeMinutes", value); }
                [ODataProperty]
                public String? Tooling { get => GetPropertyValue<String?>("Tooling"); set => SetPropertyValue<String?>("Tooling", value); }
                [ODataProperty]
                public Quantity? UseQuantity { get => GetPropertyValue<Quantity?>("UseQuantity"); set => SetPropertyValue<Quantity?>("UseQuantity", value); }
                [ODataProperty]
                public Int32? WaitTimeMinutes { get => GetPropertyValue<Int32?>("WaitTimeMinutes"); set => SetPropertyValue<Int32?>("WaitTimeMinutes", value); }
                [ODataProperty]
                public Production.Resources.Operation? Operation { get => GetPropertyValue<Production.Resources.Operation>("Operation"); set => SetPropertyValue<Production.Resources.Operation>("Operation", value); }
                [Owner]
                [ODataProperty]
                public Production.ShopFloor.WorkOrderItem? WorkOrderItem { get => GetPropertyValue<Production.ShopFloor.WorkOrderItem>("WorkOrderItem"); set => SetPropertyValue<Production.ShopFloor.WorkOrderItem>("WorkOrderItem", value); }
                [ODataProperty]
                public Production.Resources.WorkgroupResource? WorkgroupResource { get => GetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource"); set => SetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource", value); }
                [ODataProperty]
                public IEnumerable<Production.Resources.Load>? Load { get => GetCollection<Production.Resources.Load>("Load"); set => SetCollection<Production.Resources.Load>("Load", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace WorkOrderItemsRepository
            {
                public enum Priority
                {
                    Lowest = 1,
                    Two = 2,
                    Three = 3,
                    Four = 4,
                    Highest = 5
                }
            }
            namespace WorkOrdersRepository
            {
                public enum Priority
                {
                    Lowest = 1,
                    Two = 2,
                    Three = 3,
                    Four = 4,
                    Highest = 5
                }
            }
        }
        namespace Technologies
        {
            [Entity(EntitySet = "Production_Technologies_PrincipalRecipes", TableName = "Prd_Principal_Recipes")]
            public partial class PrincipalRecipe: EntityResource
            {
                public PrincipalRecipe(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Technologies_PrincipalRecipes";
                public const string EntityTableName = "Prd_Principal_Recipes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Decimal? DurationHour { get => GetPropertyValue<Decimal?>("DurationHour"); set => SetPropertyValue<Decimal?>("DurationHour", value); }
                [ODataProperty]
                public DateTime? ExpiryDate { get => GetPropertyValue<DateTime?>("ExpiryDate"); set => SetPropertyValue<DateTime?>("ExpiryDate", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Quantity? ProduceQuantity { get => GetPropertyValue<Quantity?>("ProduceQuantity"); set => SetPropertyValue<Quantity?>("ProduceQuantity", value); }
                [ODataProperty]
                public DateTime? ReleaseDate { get => GetPropertyValue<DateTime?>("ReleaseDate"); set => SetPropertyValue<DateTime?>("ReleaseDate", value); }
                [ODataProperty]
                public Decimal? ScrapRate { get => GetPropertyValue<Decimal?>("ScrapRate"); set => SetPropertyValue<Decimal?>("ScrapRate", value); }
                [ODataProperty]
                public General.MeasurementUnit? ProduceUnit { get => GetPropertyValue<General.MeasurementUnit>("ProduceUnit"); set => SetPropertyValue<General.MeasurementUnit>("ProduceUnit", value); }
                [Owner]
                [ODataProperty]
                public General.Products.ProductGroup? ProductGroup { get => GetPropertyValue<General.Products.ProductGroup>("ProductGroup"); set => SetPropertyValue<General.Products.ProductGroup>("ProductGroup", value); }
                [ODataProperty]
                public IEnumerable<Production.Technologies.PrincipalRecipeIngredient>? Ingredients { get => GetCollection<Production.Technologies.PrincipalRecipeIngredient>("Ingredients"); set => SetCollection<Production.Technologies.PrincipalRecipeIngredient>("Ingredients", value); }
                [ODataProperty]
                public IEnumerable<Production.Technologies.PrincipalRecipeOperation>? Operations { get => GetCollection<Production.Technologies.PrincipalRecipeOperation>("Operations"); set => SetCollection<Production.Technologies.PrincipalRecipeOperation>("Operations", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Technologies_PrincipalRecipeIngredients", TableName = "Prd_Principal_Recipe_Ingredients")]
            public partial class PrincipalRecipeIngredient: EntityResource
            {
                public PrincipalRecipeIngredient(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Technologies_PrincipalRecipeIngredients";
                public const string EntityTableName = "Prd_Principal_Recipe_Ingredients";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? ConditionalPropertyDescription { get => GetPropertyValue<MultilanguageString?>("ConditionalPropertyDescription"); set => SetPropertyValue<MultilanguageString?>("ConditionalPropertyDescription", value); }
                [ODataProperty]
                public String? ConditionalPropertyValue { get => GetPropertyValue<String?>("ConditionalPropertyValue"); set => SetPropertyValue<String?>("ConditionalPropertyValue", value); }
                [ODataProperty]
                public Quantity? FixedScrapQuantity { get => GetPropertyValue<Quantity?>("FixedScrapQuantity"); set => SetPropertyValue<Quantity?>("FixedScrapQuantity", value); }
                [ODataProperty]
                public Guid? IngredientId { get => GetPropertyValue<Guid?>("IngredientId"); set => SetPropertyValue<Guid?>("IngredientId", value); }
                [ODataProperty]
                public String? IngredientName { get => GetPropertyValue<String?>("IngredientName"); set => SetPropertyValue<String?>("IngredientName", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public Decimal? ScrapRate { get => GetPropertyValue<Decimal?>("ScrapRate"); set => SetPropertyValue<Decimal?>("ScrapRate", value); }
                [ODataProperty]
                public Quantity? UsageQuantity { get => GetPropertyValue<Quantity?>("UsageQuantity"); set => SetPropertyValue<Quantity?>("UsageQuantity", value); }
                [ODataProperty]
                public String? UsageQuantityFormula { get => GetPropertyValue<String?>("UsageQuantityFormula"); set => SetPropertyValue<String?>("UsageQuantityFormula", value); }
                [ODataProperty]
                public General.CustomPropertyAllowedValue? ConditionalPropertyAllowedValue { get => GetPropertyValue<General.CustomPropertyAllowedValue>("ConditionalPropertyAllowedValue"); set => SetPropertyValue<General.CustomPropertyAllowedValue>("ConditionalPropertyAllowedValue", value); }
                [ODataProperty]
                public General.CustomProperty? ConditionalProperty { get => GetPropertyValue<General.CustomProperty>("ConditionalProperty"); set => SetPropertyValue<General.CustomProperty>("ConditionalProperty", value); }
                [ODataProperty]
                public General.Products.Product? DefaultMaterial { get => GetPropertyValue<General.Products.Product>("DefaultMaterial"); set => SetPropertyValue<General.Products.Product>("DefaultMaterial", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? DefaultStore { get => GetPropertyValue<Logistics.Inventory.Store>("DefaultStore"); set => SetPropertyValue<Logistics.Inventory.Store>("DefaultStore", value); }
                [ODataProperty]
                public General.CustomProperty? MaterialFromProperty { get => GetPropertyValue<General.CustomProperty>("MaterialFromProperty"); set => SetPropertyValue<General.CustomProperty>("MaterialFromProperty", value); }
                [ODataProperty]
                public General.Products.ProductGroup? MaterialGroup { get => GetPropertyValue<General.Products.ProductGroup>("MaterialGroup"); set => SetPropertyValue<General.Products.ProductGroup>("MaterialGroup", value); }
                [ODataProperty]
                public Production.Resources.Operation? Operation { get => GetPropertyValue<Production.Resources.Operation>("Operation"); set => SetPropertyValue<Production.Resources.Operation>("Operation", value); }
                [Owner]
                [ODataProperty]
                public Production.Technologies.PrincipalRecipe? PrincipalRecipe { get => GetPropertyValue<Production.Technologies.PrincipalRecipe>("PrincipalRecipe"); set => SetPropertyValue<Production.Technologies.PrincipalRecipe>("PrincipalRecipe", value); }
                [ODataProperty]
                public General.MeasurementUnit? UsageUnit { get => GetPropertyValue<General.MeasurementUnit>("UsageUnit"); set => SetPropertyValue<General.MeasurementUnit>("UsageUnit", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Technologies_PrincipalRecipeOperations", TableName = "Prd_Principal_Recipe_Operations")]
            public partial class PrincipalRecipeOperation: EntityResource
            {
                public PrincipalRecipeOperation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Technologies_PrincipalRecipeOperations";
                public const string EntityTableName = "Prd_Principal_Recipe_Operations";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? ConditionalPropertyDescription { get => GetPropertyValue<MultilanguageString?>("ConditionalPropertyDescription"); set => SetPropertyValue<MultilanguageString?>("ConditionalPropertyDescription", value); }
                [ODataProperty]
                public String? ConditionalPropertyValue { get => GetPropertyValue<String?>("ConditionalPropertyValue"); set => SetPropertyValue<String?>("ConditionalPropertyValue", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public Int32? MinimumConcurrentStartTimeMinutes { get => GetPropertyValue<Int32?>("MinimumConcurrentStartTimeMinutes"); set => SetPropertyValue<Int32?>("MinimumConcurrentStartTimeMinutes", value); }
                [ODataProperty]
                public Int32? MoveTimeMinutes { get => GetPropertyValue<Int32?>("MoveTimeMinutes"); set => SetPropertyValue<Int32?>("MoveTimeMinutes", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? OperationDescription { get => GetPropertyValue<String?>("OperationDescription"); set => SetPropertyValue<String?>("OperationDescription", value); }
                [ODataProperty]
                public Int32? RunTimeMinutes { get => GetPropertyValue<Int32?>("RunTimeMinutes"); set => SetPropertyValue<Int32?>("RunTimeMinutes", value); }
                [ODataProperty]
                public Decimal? ScrapRate { get => GetPropertyValue<Decimal?>("ScrapRate"); set => SetPropertyValue<Decimal?>("ScrapRate", value); }
                [ODataProperty]
                public Int32? SetupTimeMinutes { get => GetPropertyValue<Int32?>("SetupTimeMinutes"); set => SetPropertyValue<Int32?>("SetupTimeMinutes", value); }
                [ODataProperty]
                public String? Tooling { get => GetPropertyValue<String?>("Tooling"); set => SetPropertyValue<String?>("Tooling", value); }
                [ODataProperty]
                public Quantity? UseQuantity { get => GetPropertyValue<Quantity?>("UseQuantity"); set => SetPropertyValue<Quantity?>("UseQuantity", value); }
                [ODataProperty]
                public Int32? WaitTimeMinutes { get => GetPropertyValue<Int32?>("WaitTimeMinutes"); set => SetPropertyValue<Int32?>("WaitTimeMinutes", value); }
                [ODataProperty]
                public General.CustomProperty? ConditionalProperty { get => GetPropertyValue<General.CustomProperty>("ConditionalProperty"); set => SetPropertyValue<General.CustomProperty>("ConditionalProperty", value); }
                [ODataProperty]
                public Production.Resources.Operation? Operation { get => GetPropertyValue<Production.Resources.Operation>("Operation"); set => SetPropertyValue<Production.Resources.Operation>("Operation", value); }
                [ODataProperty]
                public Production.Resources.OperationInstruction? OperationInstruction { get => GetPropertyValue<Production.Resources.OperationInstruction>("OperationInstruction"); set => SetPropertyValue<Production.Resources.OperationInstruction>("OperationInstruction", value); }
                [Owner]
                [ODataProperty]
                public Production.Technologies.PrincipalRecipe? PrincipalRecipe { get => GetPropertyValue<Production.Technologies.PrincipalRecipe>("PrincipalRecipe"); set => SetPropertyValue<Production.Technologies.PrincipalRecipe>("PrincipalRecipe", value); }
                [ODataProperty]
                public General.MeasurementUnit? UseQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("UseQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("UseQuantityUnit", value); }
                [ODataProperty]
                public Production.Resources.WorkgroupResource? WorkgroupResource { get => GetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource"); set => SetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Technologies_Recipes", TableName = "Prd_Recipes")]
            public partial class Recipe: EntityResource
            {
                public Recipe(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Technologies_Recipes";
                public const string EntityTableName = "Prd_Recipes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
                [ODataProperty]
                public String? CreationUser { get => GetPropertyValue<String?>("CreationUser"); set => SetPropertyValue<String?>("CreationUser", value); }
                [ODataProperty]
                public DateTime? ExpiryDate { get => GetPropertyValue<DateTime?>("ExpiryDate"); set => SetPropertyValue<DateTime?>("ExpiryDate", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Amount? Price { get => GetPropertyValue<Amount?>("Price"); set => SetPropertyValue<Amount?>("Price", value); }
                [ODataProperty]
                public Amount? PricePerLot { get => GetPropertyValue<Amount?>("PricePerLot"); set => SetPropertyValue<Amount?>("PricePerLot", value); }
                [ODataProperty]
                public Quantity? ProduceQuantity { get => GetPropertyValue<Quantity?>("ProduceQuantity"); set => SetPropertyValue<Quantity?>("ProduceQuantity", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public DateTime? ReleaseDate { get => GetPropertyValue<DateTime?>("ReleaseDate"); set => SetPropertyValue<DateTime?>("ReleaseDate", value); }
                [ODataProperty]
                public Decimal? ScrapRate { get => GetPropertyValue<Decimal?>("ScrapRate"); set => SetPropertyValue<Decimal?>("ScrapRate", value); }
                [ODataProperty]
                public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
                [ODataProperty]
                public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
                [ODataProperty]
                public General.CurrencyDirectory? CurrencyDirectory { get => GetPropertyValue<General.CurrencyDirectory>("CurrencyDirectory"); set => SetPropertyValue<General.CurrencyDirectory>("CurrencyDirectory", value); }
                [ODataProperty]
                public Production.Technologies.PrincipalRecipe? PrincipalRecipe { get => GetPropertyValue<Production.Technologies.PrincipalRecipe>("PrincipalRecipe"); set => SetPropertyValue<Production.Technologies.PrincipalRecipe>("PrincipalRecipe", value); }
                [ODataProperty]
                public General.Products.Product? Product { get => GetPropertyValue<General.Products.Product>("Product"); set => SetPropertyValue<General.Products.Product>("Product", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public IEnumerable<Production.Technologies.RecipeIngredient>? Ingredients { get => GetCollection<Production.Technologies.RecipeIngredient>("Ingredients"); set => SetCollection<Production.Technologies.RecipeIngredient>("Ingredients", value); }
                [ODataProperty]
                public IEnumerable<Production.Technologies.RecipeOperation>? Operations { get => GetCollection<Production.Technologies.RecipeOperation>("Operations"); set => SetCollection<Production.Technologies.RecipeOperation>("Operations", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Technologies_RecipeIngredients", TableName = "Prd_Recipe_Ingredients")]
            public partial class RecipeIngredient: EntityResource
            {
                public RecipeIngredient(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Technologies_RecipeIngredients";
                public const string EntityTableName = "Prd_Recipe_Ingredients";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Amount? Cost { get => GetPropertyValue<Amount?>("Cost"); set => SetPropertyValue<Amount?>("Cost", value); }
                [ODataProperty]
                public Quantity? FixedScrapQuantity { get => GetPropertyValue<Quantity?>("FixedScrapQuantity"); set => SetPropertyValue<Quantity?>("FixedScrapQuantity", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Amount? Price { get => GetPropertyValue<Amount?>("Price"); set => SetPropertyValue<Amount?>("Price", value); }
                [ODataProperty]
                public Decimal? ScrapRate { get => GetPropertyValue<Decimal?>("ScrapRate"); set => SetPropertyValue<Decimal?>("ScrapRate", value); }
                [ODataProperty]
                public Amount? UnitCost { get => GetPropertyValue<Amount?>("UnitCost"); set => SetPropertyValue<Amount?>("UnitCost", value); }
                [ODataProperty]
                public Amount? UnitPrice { get => GetPropertyValue<Amount?>("UnitPrice"); set => SetPropertyValue<Amount?>("UnitPrice", value); }
                [ODataProperty]
                public Quantity? UsageQuantity { get => GetPropertyValue<Quantity?>("UsageQuantity"); set => SetPropertyValue<Quantity?>("UsageQuantity", value); }
                [ODataProperty]
                public General.Products.Product? Material { get => GetPropertyValue<General.Products.Product>("Material"); set => SetPropertyValue<General.Products.Product>("Material", value); }
                [ODataProperty]
                public Production.Resources.Operation? Operation { get => GetPropertyValue<Production.Resources.Operation>("Operation"); set => SetPropertyValue<Production.Resources.Operation>("Operation", value); }
                [ODataProperty]
                public Production.Technologies.PrincipalRecipeIngredient? PrincipalRecipeIngredient { get => GetPropertyValue<Production.Technologies.PrincipalRecipeIngredient>("PrincipalRecipeIngredient"); set => SetPropertyValue<Production.Technologies.PrincipalRecipeIngredient>("PrincipalRecipeIngredient", value); }
                [Owner]
                [ODataProperty]
                public Production.Technologies.Recipe? Recipe { get => GetPropertyValue<Production.Technologies.Recipe>("Recipe"); set => SetPropertyValue<Production.Technologies.Recipe>("Recipe", value); }
                [ODataProperty]
                public Logistics.Inventory.Store? Store { get => GetPropertyValue<Logistics.Inventory.Store>("Store"); set => SetPropertyValue<Logistics.Inventory.Store>("Store", value); }
                [ODataProperty]
                public General.MeasurementUnit? UsageUnit { get => GetPropertyValue<General.MeasurementUnit>("UsageUnit"); set => SetPropertyValue<General.MeasurementUnit>("UsageUnit", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Production_Technologies_RecipeOperations", TableName = "Prd_Recipe_Operations")]
            public partial class RecipeOperation: EntityResource
            {
                public RecipeOperation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Production_Technologies_RecipeOperations";
                public const string EntityTableName = "Prd_Recipe_Operations";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? LineOrd { get => GetPropertyValue<Int32?>("LineOrd"); set => SetPropertyValue<Int32?>("LineOrd", value); }
                [ODataProperty]
                public Int32? MinimumConcurrentStartTimeMinutes { get => GetPropertyValue<Int32?>("MinimumConcurrentStartTimeMinutes"); set => SetPropertyValue<Int32?>("MinimumConcurrentStartTimeMinutes", value); }
                [ODataProperty]
                public Int32? MoveTimeMinutes { get => GetPropertyValue<Int32?>("MoveTimeMinutes"); set => SetPropertyValue<Int32?>("MoveTimeMinutes", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? OperationDescription { get => GetPropertyValue<String?>("OperationDescription"); set => SetPropertyValue<String?>("OperationDescription", value); }
                [ODataProperty]
                public Guid? RoutingOperationId { get => GetPropertyValue<Guid?>("RoutingOperationId"); set => SetPropertyValue<Guid?>("RoutingOperationId", value); }
                [ODataProperty]
                public Int32? RunTimeMinutes { get => GetPropertyValue<Int32?>("RunTimeMinutes"); set => SetPropertyValue<Int32?>("RunTimeMinutes", value); }
                [ODataProperty]
                public Decimal? ScrapRate { get => GetPropertyValue<Decimal?>("ScrapRate"); set => SetPropertyValue<Decimal?>("ScrapRate", value); }
                [ODataProperty]
                public Int32? SetupTimeMinutes { get => GetPropertyValue<Int32?>("SetupTimeMinutes"); set => SetPropertyValue<Int32?>("SetupTimeMinutes", value); }
                [ODataProperty]
                public Amount? StandardCostPerHour { get => GetPropertyValue<Amount?>("StandardCostPerHour"); set => SetPropertyValue<Amount?>("StandardCostPerHour", value); }
                [ODataProperty]
                public Amount? StandardPricePerHour { get => GetPropertyValue<Amount?>("StandardPricePerHour"); set => SetPropertyValue<Amount?>("StandardPricePerHour", value); }
                [ODataProperty]
                public String? Tooling { get => GetPropertyValue<String?>("Tooling"); set => SetPropertyValue<String?>("Tooling", value); }
                [ODataProperty]
                public Quantity? UseQuantity { get => GetPropertyValue<Quantity?>("UseQuantity"); set => SetPropertyValue<Quantity?>("UseQuantity", value); }
                [ODataProperty]
                public Int32? WaitTimeMinutes { get => GetPropertyValue<Int32?>("WaitTimeMinutes"); set => SetPropertyValue<Int32?>("WaitTimeMinutes", value); }
                [ODataProperty]
                public Production.Resources.Operation? Operation { get => GetPropertyValue<Production.Resources.Operation>("Operation"); set => SetPropertyValue<Production.Resources.Operation>("Operation", value); }
                [ODataProperty]
                public Production.Resources.OperationInstruction? OperationInstruction { get => GetPropertyValue<Production.Resources.OperationInstruction>("OperationInstruction"); set => SetPropertyValue<Production.Resources.OperationInstruction>("OperationInstruction", value); }
                [Owner]
                [ODataProperty]
                public Production.Technologies.Recipe? Recipe { get => GetPropertyValue<Production.Technologies.Recipe>("Recipe"); set => SetPropertyValue<Production.Technologies.Recipe>("Recipe", value); }
                [ODataProperty]
                public General.MeasurementUnit? UseQuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("UseQuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("UseQuantityUnit", value); }
                [ODataProperty]
                public Production.Resources.WorkgroupResource? WorkgroupResource { get => GetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource"); set => SetPropertyValue<Production.Resources.WorkgroupResource>("WorkgroupResource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        [Entity(EntitySet = "Production_WorkOrderDocumentTypesOptions", TableName = "Prd_Work_Order_Document_Types_Options")]
        public partial class WorkOrderDocumentTypesOption: EntityResource
        {
            public WorkOrderDocumentTypesOption(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Production_WorkOrderDocumentTypesOptions";
            public const string EntityTableName = "Prd_Work_Order_Document_Types_Options";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public General.DocumentType? CompletingOutputOrderDocumentType { get => GetPropertyValue<General.DocumentType>("CompletingOutputOrderDocumentType"); set => SetPropertyValue<General.DocumentType>("CompletingOutputOrderDocumentType", value); }
            [Owner]
            [ODataProperty]
            public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
    }
    namespace Projects
    {
        [Entity(EntitySet = "Projects_Projects", TableName = "Prj_Projects")]
        public partial class Project: EntityResource
        {
            public Project(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_Projects";
            public const string EntityTableName = "Prj_Projects";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? FinishDate { get => GetPropertyValue<DateTime?>("FinishDate"); set => SetPropertyValue<DateTime?>("FinishDate", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public Projects.ProjectsRepository.ProjectStatus? ProjectStatus { get => GetPropertyValue<Projects.ProjectsRepository.ProjectStatus?>("ProjectStatus"); set => SetPropertyValue<Projects.ProjectsRepository.ProjectStatus?>("ProjectStatus", value); }
            [ODataProperty]
            public DateTime? StartDate { get => GetPropertyValue<DateTime?>("StartDate"); set => SetPropertyValue<DateTime?>("StartDate", value); }
            [ODataProperty]
            public General.Currency? BudgetingCurrency { get => GetPropertyValue<General.Currency>("BudgetingCurrency"); set => SetPropertyValue<General.Currency>("BudgetingCurrency", value); }
            [ODataProperty]
            public General.Contacts.Party? ClientParty { get => GetPropertyValue<General.Contacts.Party>("ClientParty"); set => SetPropertyValue<General.Contacts.Party>("ClientParty", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public General.Contacts.Person? ProjectManagerPerson { get => GetPropertyValue<General.Contacts.Person>("ProjectManagerPerson"); set => SetPropertyValue<General.Contacts.Person>("ProjectManagerPerson", value); }
            [ODataProperty]
            public Projects.ProjectType? ProjectType { get => GetPropertyValue<Projects.ProjectType>("ProjectType"); set => SetPropertyValue<Projects.ProjectType>("ProjectType", value); }
            [ODataProperty]
            public IEnumerable<Projects.ProjectParticipant>? Participants { get => GetCollection<Projects.ProjectParticipant>("Participants"); set => SetCollection<Projects.ProjectParticipant>("Participants", value); }
            [ODataProperty]
            public IEnumerable<Projects.ProjectRisk>? Risks { get => GetCollection<Projects.ProjectRisk>("Risks"); set => SetCollection<Projects.ProjectRisk>("Risks", value); }
            [ODataProperty]
            public IEnumerable<Projects.ProjectWorkElement>? WorkElements { get => GetCollection<Projects.ProjectWorkElement>("WorkElements"); set => SetCollection<Projects.ProjectWorkElement>("WorkElements", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_ProjectParticipants", TableName = "Prj_Project_Participants")]
        public partial class ProjectParticipant: EntityResource
        {
            public ProjectParticipant(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectParticipants";
            public const string EntityTableName = "Prj_Project_Participants";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public General.Contacts.Party? ParticipantParty { get => GetPropertyValue<General.Contacts.Party>("ParticipantParty"); set => SetPropertyValue<General.Contacts.Party>("ParticipantParty", value); }
            [Owner]
            [ODataProperty]
            public Projects.Project? Project { get => GetPropertyValue<Projects.Project>("Project"); set => SetPropertyValue<Projects.Project>("Project", value); }
            [ODataProperty]
            public Projects.TypeRole? ProjectTypeRole { get => GetPropertyValue<Projects.TypeRole>("ProjectTypeRole"); set => SetPropertyValue<Projects.TypeRole>("ProjectTypeRole", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_ProjectRisks", TableName = "Prj_Project_Risks")]
        public partial class ProjectRisk: EntityResource
        {
            public ProjectRisk(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectRisks";
            public const string EntityTableName = "Prj_Project_Risks";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? CreateDate { get => GetPropertyValue<DateTime?>("CreateDate"); set => SetPropertyValue<DateTime?>("CreateDate", value); }
            [ODataProperty]
            public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
            [ODataProperty]
            public Decimal? ImpactPercent { get => GetPropertyValue<Decimal?>("ImpactPercent"); set => SetPropertyValue<Decimal?>("ImpactPercent", value); }
            [ODataProperty]
            public Decimal? ProbabilityPercent { get => GetPropertyValue<Decimal?>("ProbabilityPercent"); set => SetPropertyValue<Decimal?>("ProbabilityPercent", value); }
            [ODataProperty]
            public String? ResolutionStrategy { get => GetPropertyValue<String?>("ResolutionStrategy"); set => SetPropertyValue<String?>("ResolutionStrategy", value); }
            [ODataProperty]
            public DateTime? ResolveDate { get => GetPropertyValue<DateTime?>("ResolveDate"); set => SetPropertyValue<DateTime?>("ResolveDate", value); }
            [ODataProperty]
            public Boolean? Resolved { get => GetPropertyValue<Boolean?>("Resolved"); set => SetPropertyValue<Boolean?>("Resolved", value); }
            [ODataProperty]
            public String? RiskName { get => GetPropertyValue<String?>("RiskName"); set => SetPropertyValue<String?>("RiskName", value); }
            [Owner]
            [ODataProperty]
            public Projects.Project? Project { get => GetPropertyValue<Projects.Project>("Project"); set => SetPropertyValue<Projects.Project>("Project", value); }
            [ODataProperty]
            public General.Contacts.Person? ResponsiblePerson { get => GetPropertyValue<General.Contacts.Person>("ResponsiblePerson"); set => SetPropertyValue<General.Contacts.Person>("ResponsiblePerson", value); }
            [ODataProperty]
            public IEnumerable<Projects.ProjectRiskDiscussion>? Discussion { get => GetCollection<Projects.ProjectRiskDiscussion>("Discussion"); set => SetCollection<Projects.ProjectRiskDiscussion>("Discussion", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_ProjectRiskDiscussion", TableName = "Prj_Project_Risk_Discussion")]
        public partial class ProjectRiskDiscussion: EntityResource
        {
            public ProjectRiskDiscussion(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectRiskDiscussion";
            public const string EntityTableName = "Prj_Project_Risk_Discussion";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? ContributionTime { get => GetPropertyValue<DateTime?>("ContributionTime"); set => SetPropertyValue<DateTime?>("ContributionTime", value); }
            [ODataProperty]
            public DateTime? LastEditTime { get => GetPropertyValue<DateTime?>("LastEditTime"); set => SetPropertyValue<DateTime?>("LastEditTime", value); }
            [ODataProperty]
            public String? Message { get => GetPropertyValue<String?>("Message"); set => SetPropertyValue<String?>("Message", value); }
            [ODataProperty]
            public Systems.Security.User? ContributedByUser { get => GetPropertyValue<Systems.Security.User>("ContributedByUser"); set => SetPropertyValue<Systems.Security.User>("ContributedByUser", value); }
            [Owner]
            [ODataProperty]
            public Projects.ProjectRisk? ProjectRisk { get => GetPropertyValue<Projects.ProjectRisk>("ProjectRisk"); set => SetPropertyValue<Projects.ProjectRisk>("ProjectRisk", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace ProjectsRepository
        {
            public enum ProjectStatus
            {
                NewOrStructuring = 0,
                Budgeting = 10,
                Planning = 20,
                Started = 30,
                ResolvedCompleted = 40,
                ResolvedCancelled = 45,
                ClosedCompleted = 50,
                ClosedCanceled = 55
            }
        }
        [Entity(EntitySet = "Projects_ProjectTasks", TableName = "Prj_Project_Tasks")]
        public partial class ProjectTask: EntityResource
        {
            public ProjectTask(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectTasks";
            public const string EntityTableName = "Prj_Project_Tasks";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Amount? BudgetLaborAmount { get => GetPropertyValue<Amount?>("BudgetLaborAmount"); set => SetPropertyValue<Amount?>("BudgetLaborAmount", value); }
            [ODataProperty]
            public DateTime? FinishDateTime { get => GetPropertyValue<DateTime?>("FinishDateTime"); set => SetPropertyValue<DateTime?>("FinishDateTime", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Decimal? PlannedDurationHours { get => GetPropertyValue<Decimal?>("PlannedDurationHours"); set => SetPropertyValue<Decimal?>("PlannedDurationHours", value); }
            [ODataProperty]
            public Int32? ProjectTaskNo { get => GetPropertyValue<Int32?>("ProjectTaskNo"); set => SetPropertyValue<Int32?>("ProjectTaskNo", value); }
            [ODataProperty]
            public DateTime? StartDateTime { get => GetPropertyValue<DateTime?>("StartDateTime"); set => SetPropertyValue<DateTime?>("StartDateTime", value); }
            [ODataProperty]
            public String? TaskName { get => GetPropertyValue<String?>("TaskName"); set => SetPropertyValue<String?>("TaskName", value); }
            [ODataProperty]
            public General.Contacts.Activity? Activity { get => GetPropertyValue<General.Contacts.Activity>("Activity"); set => SetPropertyValue<General.Contacts.Activity>("Activity", value); }
            [ODataProperty]
            public Projects.Project? Project { get => GetPropertyValue<Projects.Project>("Project"); set => SetPropertyValue<Projects.Project>("Project", value); }
            [ODataProperty]
            public Projects.ProjectWorkElement? ProjectWorkElement { get => GetPropertyValue<Projects.ProjectWorkElement>("ProjectWorkElement"); set => SetPropertyValue<Projects.ProjectWorkElement>("ProjectWorkElement", value); }
            [ODataProperty]
            public Projects.Resource? Resource { get => GetPropertyValue<Projects.Resource>("Resource"); set => SetPropertyValue<Projects.Resource>("Resource", value); }
            [ODataProperty]
            public General.Contacts.Party? ResponsibleParty { get => GetPropertyValue<General.Contacts.Party>("ResponsibleParty"); set => SetPropertyValue<General.Contacts.Party>("ResponsibleParty", value); }
            [ODataProperty]
            public Projects.TaskType? TaskType { get => GetPropertyValue<Projects.TaskType>("TaskType"); set => SetPropertyValue<Projects.TaskType>("TaskType", value); }
            [ODataProperty]
            public Projects.TypeWorkType? WorkType { get => GetPropertyValue<Projects.TypeWorkType>("WorkType"); set => SetPropertyValue<Projects.TypeWorkType>("WorkType", value); }
            [ODataProperty]
            public IEnumerable<Projects.ProjectTaskDependancy>? Dependancies { get => GetCollection<Projects.ProjectTaskDependancy>("Dependancies"); set => SetCollection<Projects.ProjectTaskDependancy>("Dependancies", value); }
            [ODataProperty]
            public IEnumerable<Projects.ProjectTaskMaterial>? Materials { get => GetCollection<Projects.ProjectTaskMaterial>("Materials"); set => SetCollection<Projects.ProjectTaskMaterial>("Materials", value); }
            [ODataProperty]
            public IEnumerable<Projects.ProjectTaskParticipant>? Participants { get => GetCollection<Projects.ProjectTaskParticipant>("Participants"); set => SetCollection<Projects.ProjectTaskParticipant>("Participants", value); }
            [ODataProperty]
            public IEnumerable<Projects.ProjectTaskResource>? Resources { get => GetCollection<Projects.ProjectTaskResource>("Resources"); set => SetCollection<Projects.ProjectTaskResource>("Resources", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace ProjectTaskDependanciesRepository
        {
            public enum DependancyType
            {
                FinishToStart = 0,
                StartToStart = 1,
                FinishToFinish = 2,
                StartToFinish = 3,
                SyncAllTypesInTheSameTime = 4
            }
        }
        [Entity(EntitySet = "Projects_ProjectTaskDependancies", TableName = "Prj_Project_Task_Dependancies")]
        public partial class ProjectTaskDependancy: EntityResource
        {
            public ProjectTaskDependancy(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectTaskDependancies";
            public const string EntityTableName = "Prj_Project_Task_Dependancies";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Projects.ProjectTaskDependanciesRepository.DependancyType? DependancyType { get => GetPropertyValue<Projects.ProjectTaskDependanciesRepository.DependancyType?>("DependancyType"); set => SetPropertyValue<Projects.ProjectTaskDependanciesRepository.DependancyType?>("DependancyType", value); }
            [ODataProperty]
            public Projects.ProjectTask? DependsOnTask { get => GetPropertyValue<Projects.ProjectTask>("DependsOnTask"); set => SetPropertyValue<Projects.ProjectTask>("DependsOnTask", value); }
            [Owner]
            [ODataProperty]
            public Projects.ProjectTask? ProjectTask { get => GetPropertyValue<Projects.ProjectTask>("ProjectTask"); set => SetPropertyValue<Projects.ProjectTask>("ProjectTask", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_ProjectTaskMaterials", TableName = "Prj_Project_Task_Materials")]
        public partial class ProjectTaskMaterial: EntityResource
        {
            public ProjectTaskMaterial(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectTaskMaterials";
            public const string EntityTableName = "Prj_Project_Task_Materials";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Amount? BudgetedMaterialAmount { get => GetPropertyValue<Amount?>("BudgetedMaterialAmount"); set => SetPropertyValue<Amount?>("BudgetedMaterialAmount", value); }
            [ODataProperty]
            public Int32? LineNumber { get => GetPropertyValue<Int32?>("LineNumber"); set => SetPropertyValue<Int32?>("LineNumber", value); }
            [ODataProperty]
            public Quantity? Quantity { get => GetPropertyValue<Quantity?>("Quantity"); set => SetPropertyValue<Quantity?>("Quantity", value); }
            [ODataProperty]
            public Decimal? QuantityBase { get => GetPropertyValue<Decimal?>("QuantityBase"); set => SetPropertyValue<Decimal?>("QuantityBase", value); }
            [ODataProperty]
            public General.Products.Product? MaterialProduct { get => GetPropertyValue<General.Products.Product>("MaterialProduct"); set => SetPropertyValue<General.Products.Product>("MaterialProduct", value); }
            [Owner]
            [ODataProperty]
            public Projects.ProjectTask? ProjectTask { get => GetPropertyValue<Projects.ProjectTask>("ProjectTask"); set => SetPropertyValue<Projects.ProjectTask>("ProjectTask", value); }
            [ODataProperty]
            public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_ProjectTaskParticipants", TableName = "Prj_Project_Task_Participants")]
        public partial class ProjectTaskParticipant: EntityResource
        {
            public ProjectTaskParticipant(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectTaskParticipants";
            public const string EntityTableName = "Prj_Project_Task_Participants";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Boolean? NotifyOnStatusChange { get => GetPropertyValue<Boolean?>("NotifyOnStatusChange"); set => SetPropertyValue<Boolean?>("NotifyOnStatusChange", value); }
            [ODataProperty]
            public Decimal? WorkLoadPercent { get => GetPropertyValue<Decimal?>("WorkLoadPercent"); set => SetPropertyValue<Decimal?>("WorkLoadPercent", value); }
            [ODataProperty]
            public General.Contacts.Person? ParticipantPerson { get => GetPropertyValue<General.Contacts.Person>("ParticipantPerson"); set => SetPropertyValue<General.Contacts.Person>("ParticipantPerson", value); }
            [Owner]
            [ODataProperty]
            public Projects.ProjectTask? ProjectTask { get => GetPropertyValue<Projects.ProjectTask>("ProjectTask"); set => SetPropertyValue<Projects.ProjectTask>("ProjectTask", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_ProjectTaskResources", TableName = "Prj_Project_Task_Resources")]
        public partial class ProjectTaskResource: EntityResource
        {
            public ProjectTaskResource(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectTaskResources";
            public const string EntityTableName = "Prj_Project_Task_Resources";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Decimal? BillingPricePerHour { get => GetPropertyValue<Decimal?>("BillingPricePerHour"); set => SetPropertyValue<Decimal?>("BillingPricePerHour", value); }
            [ODataProperty]
            public Decimal? BillingTotalAmount { get => GetPropertyValue<Decimal?>("BillingTotalAmount"); set => SetPropertyValue<Decimal?>("BillingTotalAmount", value); }
            [ODataProperty]
            public Decimal? CostPerHour { get => GetPropertyValue<Decimal?>("CostPerHour"); set => SetPropertyValue<Decimal?>("CostPerHour", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public Amount? PerUseCost { get => GetPropertyValue<Amount?>("PerUseCost"); set => SetPropertyValue<Amount?>("PerUseCost", value); }
            [ODataProperty]
            public Decimal? ResourceUsageHours { get => GetPropertyValue<Decimal?>("ResourceUsageHours"); set => SetPropertyValue<Decimal?>("ResourceUsageHours", value); }
            [ODataProperty]
            public Decimal? ResourceUsagePercent { get => GetPropertyValue<Decimal?>("ResourceUsagePercent"); set => SetPropertyValue<Decimal?>("ResourceUsagePercent", value); }
            [ODataProperty]
            public Decimal? TaskTotalCost { get => GetPropertyValue<Decimal?>("TaskTotalCost"); set => SetPropertyValue<Decimal?>("TaskTotalCost", value); }
            [Owner]
            [ODataProperty]
            public Projects.ProjectTask? ProjectTask { get => GetPropertyValue<Projects.ProjectTask>("ProjectTask"); set => SetPropertyValue<Projects.ProjectTask>("ProjectTask", value); }
            [ODataProperty]
            public General.Resources.Resource? Resource { get => GetPropertyValue<General.Resources.Resource>("Resource"); set => SetPropertyValue<General.Resources.Resource>("Resource", value); }
            [ODataProperty]
            public General.Resources.ResourceInstance? ResourceInstance { get => GetPropertyValue<General.Resources.ResourceInstance>("ResourceInstance"); set => SetPropertyValue<General.Resources.ResourceInstance>("ResourceInstance", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_ProjectTypes", TableName = "Prj_Types")]
        public partial class ProjectType: EntityResource
        {
            public ProjectType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectTypes";
            public const string EntityTableName = "Prj_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            [ODataProperty]
            public IEnumerable<Projects.TypeRole>? Roles { get => GetCollection<Projects.TypeRole>("Roles"); set => SetCollection<Projects.TypeRole>("Roles", value); }
            [ODataProperty]
            public IEnumerable<Projects.TypeWorkElement>? WorkElements { get => GetCollection<Projects.TypeWorkElement>("WorkElements"); set => SetCollection<Projects.TypeWorkElement>("WorkElements", value); }
            [ODataProperty]
            public IEnumerable<Projects.TypeWorkType>? WorkTypes { get => GetCollection<Projects.TypeWorkType>("WorkTypes"); set => SetCollection<Projects.TypeWorkType>("WorkTypes", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_ProjectWorkElements", TableName = "Prj_Project_Work_Elements")]
        public partial class ProjectWorkElement: EntityResource
        {
            public ProjectWorkElement(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_ProjectWorkElements";
            public const string EntityTableName = "Prj_Project_Work_Elements";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [Owner]
            [ODataProperty]
            public Projects.Project? Project { get => GetPropertyValue<Projects.Project>("Project"); set => SetPropertyValue<Projects.Project>("Project", value); }
            [ODataProperty]
            public Projects.TypeWorkElement? ProjectTypeWorkElement { get => GetPropertyValue<Projects.TypeWorkElement>("ProjectTypeWorkElement"); set => SetPropertyValue<Projects.TypeWorkElement>("ProjectTypeWorkElement", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_Resources", TableName = "Prj_Resources")]
        public partial class Resource: EntityResource
        {
            public Resource(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_Resources";
            public const string EntityTableName = "Prj_Resources";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
            [ODataProperty]
            public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
            [Owner]
            [ODataProperty]
            public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_TaskTypes", TableName = "Prj_Task_Types")]
        public partial class TaskType: EntityResource
        {
            public TaskType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_TaskTypes";
            public const string EntityTableName = "Prj_Task_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
            [ODataProperty]
            public Int32? DisplayOrder { get => GetPropertyValue<Int32?>("DisplayOrder"); set => SetPropertyValue<Int32?>("DisplayOrder", value); }
            [ODataProperty]
            public Byte[]? Icon { get => GetPropertyValue<Byte[]?>("Icon"); set => SetPropertyValue<Byte[]?>("Icon", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            [ODataProperty]
            public Projects.ProjectType? ProjectType { get => GetPropertyValue<Projects.ProjectType>("ProjectType"); set => SetPropertyValue<Projects.ProjectType>("ProjectType", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_Templates", TableName = "Prj_Templates")]
        public partial class Template: EntityResource
        {
            public Template(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_Templates";
            public const string EntityTableName = "Prj_Templates";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public String? ProjectTemplateName { get => GetPropertyValue<String?>("ProjectTemplateName"); set => SetPropertyValue<String?>("ProjectTemplateName", value); }
            [ODataProperty]
            public IEnumerable<Projects.TemplateRisk>? Risks { get => GetCollection<Projects.TemplateRisk>("Risks"); set => SetCollection<Projects.TemplateRisk>("Risks", value); }
            [ODataProperty]
            public IEnumerable<Projects.TemplateWorkElement>? WorkElements { get => GetCollection<Projects.TemplateWorkElement>("WorkElements"); set => SetCollection<Projects.TemplateWorkElement>("WorkElements", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_TemplateRisks", TableName = "Prj_Template_Risks")]
        public partial class TemplateRisk: EntityResource
        {
            public TemplateRisk(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_TemplateRisks";
            public const string EntityTableName = "Prj_Template_Risks";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
            [ODataProperty]
            public Decimal? ImpactPercent { get => GetPropertyValue<Decimal?>("ImpactPercent"); set => SetPropertyValue<Decimal?>("ImpactPercent", value); }
            [ODataProperty]
            public Decimal? ProbabilityPercent { get => GetPropertyValue<Decimal?>("ProbabilityPercent"); set => SetPropertyValue<Decimal?>("ProbabilityPercent", value); }
            [ODataProperty]
            public String? RiskName { get => GetPropertyValue<String?>("RiskName"); set => SetPropertyValue<String?>("RiskName", value); }
            [Owner]
            [ODataProperty]
            public Projects.Template? ProjectTemplate { get => GetPropertyValue<Projects.Template>("ProjectTemplate"); set => SetPropertyValue<Projects.Template>("ProjectTemplate", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_TemplateWorkElements", TableName = "Prj_Template_Work_Elements")]
        public partial class TemplateWorkElement: EntityResource
        {
            public TemplateWorkElement(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_TemplateWorkElements";
            public const string EntityTableName = "Prj_Template_Work_Elements";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [Owner]
            [ODataProperty]
            public Projects.Template? ProjectTemplate { get => GetPropertyValue<Projects.Template>("ProjectTemplate"); set => SetPropertyValue<Projects.Template>("ProjectTemplate", value); }
            [ODataProperty]
            public Projects.TypeWorkElement? ProjectTypeWorkElement { get => GetPropertyValue<Projects.TypeWorkElement>("ProjectTypeWorkElement"); set => SetPropertyValue<Projects.TypeWorkElement>("ProjectTypeWorkElement", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        namespace Todo
        {
            [Entity(EntitySet = "Projects_Todo_Tasks", TableName = "Gen_Todo_Tasks")]
            public partial class Task: EntityResource
            {
                public Task(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Projects_Todo_Tasks";
                public const string EntityTableName = "Gen_Todo_Tasks";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CompletedDateTimeUtc { get => GetPropertyValue<DateTime?>("CompletedDateTimeUtc"); set => SetPropertyValue<DateTime?>("CompletedDateTimeUtc", value); }
                [ODataProperty]
                public DateTime? DueDate { get => GetPropertyValue<DateTime?>("DueDate"); set => SetPropertyValue<DateTime?>("DueDate", value); }
                [ODataProperty]
                public Projects.Todo.TasksRepository.Importance? Importance { get => GetPropertyValue<Projects.Todo.TasksRepository.Importance?>("Importance"); set => SetPropertyValue<Projects.Todo.TasksRepository.Importance?>("Importance", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? RemindTimeUtc { get => GetPropertyValue<DateTime?>("RemindTimeUtc"); set => SetPropertyValue<DateTime?>("RemindTimeUtc", value); }
                [ODataProperty]
                public Projects.Todo.TasksRepository.State? State { get => GetPropertyValue<Projects.Todo.TasksRepository.State?>("State"); set => SetPropertyValue<Projects.Todo.TasksRepository.State?>("State", value); }
                [ODataProperty]
                public String? Title { get => GetPropertyValue<String?>("Title"); set => SetPropertyValue<String?>("Title", value); }
                [ODataProperty]
                public Systems.Security.User? AssignedToUser { get => GetPropertyValue<Systems.Security.User>("AssignedToUser"); set => SetPropertyValue<Systems.Security.User>("AssignedToUser", value); }
                [ODataProperty]
                public Systems.Security.User? OwnerUser { get => GetPropertyValue<Systems.Security.User>("OwnerUser"); set => SetPropertyValue<Systems.Security.User>("OwnerUser", value); }
                [ODataProperty]
                public Communities.Social.Group? SocialGroup { get => GetPropertyValue<Communities.Social.Group>("SocialGroup"); set => SetPropertyValue<Communities.Social.Group>("SocialGroup", value); }
                [ODataProperty]
                public IEnumerable<Projects.Todo.TaskItem>? Items { get => GetCollection<Projects.Todo.TaskItem>("Items"); set => SetCollection<Projects.Todo.TaskItem>("Items", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Projects_Todo_TaskItems", TableName = "Gen_Todo_Task_Items")]
            public partial class TaskItem: EntityResource
            {
                public TaskItem(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Projects_Todo_TaskItems";
                public const string EntityTableName = "Gen_Todo_Task_Items";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CompletedDateTimeUtc { get => GetPropertyValue<DateTime?>("CompletedDateTimeUtc"); set => SetPropertyValue<DateTime?>("CompletedDateTimeUtc", value); }
                [ODataProperty]
                public DateTime? CreatedDateTimeUtc { get => GetPropertyValue<DateTime?>("CreatedDateTimeUtc"); set => SetPropertyValue<DateTime?>("CreatedDateTimeUtc", value); }
                [ODataProperty]
                public Boolean? IsCompleted { get => GetPropertyValue<Boolean?>("IsCompleted"); set => SetPropertyValue<Boolean?>("IsCompleted", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Title { get => GetPropertyValue<String?>("Title"); set => SetPropertyValue<String?>("Title", value); }
                [Owner]
                [ODataProperty]
                public Projects.Todo.Task? Task { get => GetPropertyValue<Projects.Todo.Task>("Task"); set => SetPropertyValue<Projects.Todo.Task>("Task", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace TasksRepository
            {
                public enum Importance
                {
                    Low = 0,
                    Normal = 1,
                    High = 2
                }
                public enum State
                {
                    New = 0,
                    InProgress = 1,
                    Waiting = 2,
                    Completed = 3
                }
            }
        }
        [Entity(EntitySet = "Projects_TypeRoles", TableName = "Prj_Type_Roles")]
        public partial class TypeRole: EntityResource
        {
            public TypeRole(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_TypeRoles";
            public const string EntityTableName = "Prj_Type_Roles";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
            [ODataProperty]
            public String? RoleName { get => GetPropertyValue<String?>("RoleName"); set => SetPropertyValue<String?>("RoleName", value); }
            [Owner]
            [ODataProperty]
            public Projects.ProjectType? ProjectType { get => GetPropertyValue<Projects.ProjectType>("ProjectType"); set => SetPropertyValue<Projects.ProjectType>("ProjectType", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_TypeWorkElements", TableName = "Prj_Type_Work_Elements")]
        public partial class TypeWorkElement: EntityResource
        {
            public TypeWorkElement(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_TypeWorkElements";
            public const string EntityTableName = "Prj_Type_Work_Elements";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public String? FullPath { get => GetPropertyValue<String?>("FullPath"); set => SetPropertyValue<String?>("FullPath", value); }
            [ODataProperty]
            public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
            [ODataProperty]
            public String? ParentFullPath { get => GetPropertyValue<String?>("ParentFullPath"); set => SetPropertyValue<String?>("ParentFullPath", value); }
            [ODataProperty]
            public String? WorkElementCode { get => GetPropertyValue<String?>("WorkElementCode"); set => SetPropertyValue<String?>("WorkElementCode", value); }
            [ODataProperty]
            public String? WorkElementName { get => GetPropertyValue<String?>("WorkElementName"); set => SetPropertyValue<String?>("WorkElementName", value); }
            [Owner]
            [ODataProperty]
            public Projects.ProjectType? ProjectType { get => GetPropertyValue<Projects.ProjectType>("ProjectType"); set => SetPropertyValue<Projects.ProjectType>("ProjectType", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_TypeWorkTypes", TableName = "Prj_Type_Work_Types")]
        public partial class TypeWorkType: EntityResource
        {
            public TypeWorkType(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_TypeWorkTypes";
            public const string EntityTableName = "Prj_Type_Work_Types";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
            [ODataProperty]
            public String? WorkTypeName { get => GetPropertyValue<String?>("WorkTypeName"); set => SetPropertyValue<String?>("WorkTypeName", value); }
            [ODataProperty]
            public General.Products.Product? BilledWithProduct { get => GetPropertyValue<General.Products.Product>("BilledWithProduct"); set => SetPropertyValue<General.Products.Product>("BilledWithProduct", value); }
            [Owner]
            [ODataProperty]
            public Projects.ProjectType? ProjectType { get => GetPropertyValue<Projects.ProjectType>("ProjectType"); set => SetPropertyValue<Projects.ProjectType>("ProjectType", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_WorkReports", TableName = "Prj_Work_Reports")]
        public partial class WorkReport: General.Document
        {
            public WorkReport(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public new const string EntitySetName = "Projects_WorkReports";
            public new const string EntityTableName = "Prj_Work_Reports";
            [ODataProperty]
            public Boolean? IsReleased { get => GetPropertyValue<Boolean?>("IsReleased"); set => SetPropertyValue<Boolean?>("IsReleased", value); }
            [ODataProperty]
            public Boolean? IsSingleExecution { get => GetPropertyValue<Boolean?>("IsSingleExecution"); set => SetPropertyValue<Boolean?>("IsSingleExecution", value); }
            [ODataProperty]
            public Projects.Project? Project { get => GetPropertyValue<Projects.Project>("Project"); set => SetPropertyValue<Projects.Project>("Project", value); }
            [ODataProperty]
            public Projects.ProjectTask? ProjectTask { get => GetPropertyValue<Projects.ProjectTask>("ProjectTask"); set => SetPropertyValue<Projects.ProjectTask>("ProjectTask", value); }
            [ODataProperty]
            public IEnumerable<Projects.WorkReportMaterial>? Materials { get => GetCollection<Projects.WorkReportMaterial>("Materials"); set => SetCollection<Projects.WorkReportMaterial>("Materials", value); }
            [ODataProperty]
            public IEnumerable<Projects.WorkReportResource>? Resources { get => GetCollection<Projects.WorkReportResource>("Resources"); set => SetCollection<Projects.WorkReportResource>("Resources", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task ChangeStateAsync(DomainApiService service, General.DocumentState newState, General.DocumentTypeUserStatus? userStatus = null) { await this.InvokeActionAsync(service, "ChangeState", new Param<General.DocumentState>("newState", newState), new Param<General.DocumentTypeUserStatus?>("userStatus", userStatus)); }
            public async System.Threading.Tasks.Task ProcessSingleRouteAsync(DomainApiService service, Systems.Workflow.Route route, Boolean processForLowerDocumentStates) { await this.InvokeActionAsync(service, "ProcessSingleRoute", new Param<Systems.Workflow.Route>("route", route), new Param<Boolean>("processForLowerDocumentStates", processForLowerDocumentStates)); }
            public async System.Threading.Tasks.Task CompleteAsync(DomainApiService service, General.DocumentCompletion completion) { await this.InvokeActionAsync(service, "Complete", new Param<General.DocumentCompletion>("completion", completion)); }
            public async System.Threading.Tasks.Task MakeVoidAsync(DomainApiService service, String reason, General.DocumentsRepositoryBase.VoidType voidType = General.DocumentsRepositoryBase.VoidType.VoidDocument, Boolean resetParentState = true) { await this.InvokeActionAsync(service, "MakeVoid", new Param<String>("reason", reason), new Param<General.DocumentsRepositoryBase.VoidType>("voidType", voidType), new Param<Boolean>("resetParentState", resetParentState)); }
            public async System.Threading.Tasks.Task<String?> GetPrintoutAsync(DomainApiService service, String fileFormat = "pdf", General.Printout? printout = null) { return (String?)(await this.InvokeActionAsync(service, "GetPrintout", new Param<String>("fileFormat", fileFormat), new Param<General.Printout?>("printout", printout))); }
            public async System.Threading.Tasks.Task RecalculateAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Recalculate"); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<General.Document>?> GetAllParentDocumentsAsync(DomainApiService service, Boolean includeSelf = false) { return (IEnumerable<General.Document>?)(await this.InvokeFunctionAsync(service, "GetAllParentDocuments", new Param<Boolean>("includeSelf", includeSelf))); }
        }
        [Entity(EntitySet = "Projects_WorkReportMaterials", TableName = "Prj_Work_Report_Materials")]
        public partial class WorkReportMaterial: EntityResource
        {
            public WorkReportMaterial(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_WorkReportMaterials";
            public const string EntityTableName = "Prj_Work_Report_Materials";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public Decimal? Quantity { get => GetPropertyValue<Decimal?>("Quantity"); set => SetPropertyValue<Decimal?>("Quantity", value); }
            [ODataProperty]
            public Decimal? QuantityBase { get => GetPropertyValue<Decimal?>("QuantityBase"); set => SetPropertyValue<Decimal?>("QuantityBase", value); }
            [ODataProperty]
            public General.Products.Product? MaterialProduct { get => GetPropertyValue<General.Products.Product>("MaterialProduct"); set => SetPropertyValue<General.Products.Product>("MaterialProduct", value); }
            [ODataProperty]
            public Projects.ProjectTask? ProjectTask { get => GetPropertyValue<Projects.ProjectTask>("ProjectTask"); set => SetPropertyValue<Projects.ProjectTask>("ProjectTask", value); }
            [ODataProperty]
            public General.MeasurementUnit? QuantityUnit { get => GetPropertyValue<General.MeasurementUnit>("QuantityUnit"); set => SetPropertyValue<General.MeasurementUnit>("QuantityUnit", value); }
            [Owner]
            [ODataProperty]
            public Projects.WorkReport? WorkReport { get => GetPropertyValue<Projects.WorkReport>("WorkReport"); set => SetPropertyValue<Projects.WorkReport>("WorkReport", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
        [Entity(EntitySet = "Projects_WorkReportResources", TableName = "Prj_Work_Report_Resources")]
        public partial class WorkReportResource: EntityResource
        {
            public WorkReportResource(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Projects_WorkReportResources";
            public const string EntityTableName = "Prj_Work_Report_Resources";
            [ODataProperty]
            public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
            [ODataProperty]
            public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
            [ODataProperty]
            public DateTime? ActualEndTime { get => GetPropertyValue<DateTime?>("ActualEndTime"); set => SetPropertyValue<DateTime?>("ActualEndTime", value); }
            [ODataProperty]
            public DateTime? ActualStartTime { get => GetPropertyValue<DateTime?>("ActualStartTime"); set => SetPropertyValue<DateTime?>("ActualStartTime", value); }
            [ODataProperty]
            public Decimal? TotalResourceUsageHours { get => GetPropertyValue<Decimal?>("TotalResourceUsageHours"); set => SetPropertyValue<Decimal?>("TotalResourceUsageHours", value); }
            [ODataProperty]
            public Projects.ProjectTask? ProjectTask { get => GetPropertyValue<Projects.ProjectTask>("ProjectTask"); set => SetPropertyValue<Projects.ProjectTask>("ProjectTask", value); }
            [ODataProperty]
            public General.Resources.Resource? Resource { get => GetPropertyValue<General.Resources.Resource>("Resource"); set => SetPropertyValue<General.Resources.Resource>("Resource", value); }
            [ODataProperty]
            public General.Resources.ResourceInstance? ResourceInstance { get => GetPropertyValue<General.Resources.ResourceInstance>("ResourceInstance"); set => SetPropertyValue<General.Resources.ResourceInstance>("ResourceInstance", value); }
            [Owner]
            [ODataProperty]
            public Projects.WorkReport? WorkReport { get => GetPropertyValue<Projects.WorkReport>("WorkReport"); set => SetPropertyValue<Projects.WorkReport>("WorkReport", value); }
            public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
            public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
            public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
        }
    }
    namespace Public
    {
        [Entity(EntitySet = "Public_Users")]
        public partial class User: EntityResource
        {
            public User(IDictionary<string, object?>? rawData = null): base(rawData) {}
            public const string EntitySetName = "Public_Users";
            public const string EntityTableName = "";
            [ODataProperty]
            public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
            [ODataProperty]
            public String? Email { get => GetPropertyValue<String?>("Email"); set => SetPropertyValue<String?>("Email", value); }
            [ODataProperty]
            public Boolean? IsAdmin { get => GetPropertyValue<Boolean?>("IsAdmin"); set => SetPropertyValue<Boolean?>("IsAdmin", value); }
            [ODataProperty]
            public String? Login { get => GetPropertyValue<String?>("Login"); set => SetPropertyValue<String?>("Login", value); }
            [ODataProperty]
            public String? PhoneNumber { get => GetPropertyValue<String?>("PhoneNumber"); set => SetPropertyValue<String?>("PhoneNumber", value); }
            [ODataProperty]
            public Guid? UserId { get => GetPropertyValue<Guid?>("UserId"); set => SetPropertyValue<Guid?>("UserId", value); }
            [ODataProperty]
            public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
            [ODataProperty]
            public Systems.Security.Domain? Domain { get => GetPropertyValue<Systems.Security.Domain>("Domain"); set => SetPropertyValue<Systems.Security.Domain>("Domain", value); }
            [ODataProperty]
            public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
            public async System.Threading.Tasks.Task<Systems.Security.SecurityPermissions?> GetAccessKeyPermissionsAsync(DomainApiService service, Guid accessKeyId, String? userToken = null) { return (Systems.Security.SecurityPermissions?)(await this.InvokeActionAsync(service, "GetAccessKeyPermissions", new Param<Guid>("accessKeyId", accessKeyId), new Param<String?>("userToken", userToken))); }
        }
    }
    public partial class Quantity: ComplexTypeResource
    {
        public Quantity(IDictionary<string, object?>? rawData = null): base(rawData) {}
        [ODataProperty]
        public Decimal? Value { get => GetPropertyValue<Decimal?>("Value"); set => SetPropertyValue<Decimal?>("Value", value); }
        [ODataProperty]
        public String? Unit { get => GetPropertyValue<String?>("Unit"); set => SetPropertyValue<String?>("Unit", value); }
    }
    public enum RuleExecutionPriority
    {
        Early = 30,
        Normal = 50,
        Late = 70,
        SystemLateUpdate = 150,
        SystemLateValidate = 200
    }
    namespace Systems
    {
        namespace Bpm
        {
            public enum ActionParameterType
            {
                Constant = 0,
                Attribute = 1,
                Reference = 2,
                ChildList = 3,
                FormattedString = 4
            }
            [Entity(EntitySet = "Systems_Bpm_CalculatedAttributes", TableName = "Sys_Calculated_Attributes")]
            public partial class CalculatedAttribute: EntityResource
            {
                public CalculatedAttribute(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Bpm_CalculatedAttributes";
                public const string EntityTableName = "Sys_Calculated_Attributes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? Caption { get => GetPropertyValue<MultilanguageString?>("Caption"); set => SetPropertyValue<MultilanguageString?>("Caption", value); }
                [ODataProperty]
                public MultilanguageString? Hint { get => GetPropertyValue<MultilanguageString?>("Hint"); set => SetPropertyValue<MultilanguageString?>("Hint", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? RepositoryName { get => GetPropertyValue<String?>("RepositoryName"); set => SetPropertyValue<String?>("RepositoryName", value); }
                [ODataProperty]
                public Int32? StartingExpressionNo { get => GetPropertyValue<Int32?>("StartingExpressionNo"); set => SetPropertyValue<Int32?>("StartingExpressionNo", value); }
                [ODataProperty]
                public IEnumerable<Systems.Bpm.CalculatedAttributeExpression>? Expressions { get => GetCollection<Systems.Bpm.CalculatedAttributeExpression>("Expressions"); set => SetCollection<Systems.Bpm.CalculatedAttributeExpression>("Expressions", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Bpm_CalculatedAttributeExpressions", TableName = "Sys_Calculated_Attribute_Expressions")]
            public partial class CalculatedAttributeExpression: EntityResource
            {
                public CalculatedAttributeExpression(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Bpm_CalculatedAttributeExpressions";
                public const string EntityTableName = "Sys_Calculated_Attribute_Expressions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? ExpressionNo { get => GetPropertyValue<Int32?>("ExpressionNo"); set => SetPropertyValue<Int32?>("ExpressionNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Systems.Bpm.ExpressionOperator? Operator { get => GetPropertyValue<Systems.Bpm.ExpressionOperator?>("Operator"); set => SetPropertyValue<Systems.Bpm.ExpressionOperator?>("Operator", value); }
                [ODataProperty]
                public Systems.Bpm.ExpressionParameterType? Parameter1Type { get => GetPropertyValue<Systems.Bpm.ExpressionParameterType?>("Parameter1Type"); set => SetPropertyValue<Systems.Bpm.ExpressionParameterType?>("Parameter1Type", value); }
                [ODataProperty]
                public String? Parameter1Value { get => GetPropertyValue<String?>("Parameter1Value"); set => SetPropertyValue<String?>("Parameter1Value", value); }
                [ODataProperty]
                public Systems.Bpm.ExpressionParameterType? Parameter2Type { get => GetPropertyValue<Systems.Bpm.ExpressionParameterType?>("Parameter2Type"); set => SetPropertyValue<Systems.Bpm.ExpressionParameterType?>("Parameter2Type", value); }
                [ODataProperty]
                public String? Parameter2Value { get => GetPropertyValue<String?>("Parameter2Value"); set => SetPropertyValue<String?>("Parameter2Value", value); }
                [ODataProperty]
                public Systems.Bpm.ExpressionParameterType? Parameter3Type { get => GetPropertyValue<Systems.Bpm.ExpressionParameterType?>("Parameter3Type"); set => SetPropertyValue<Systems.Bpm.ExpressionParameterType?>("Parameter3Type", value); }
                [ODataProperty]
                public String? Parameter3Value { get => GetPropertyValue<String?>("Parameter3Value"); set => SetPropertyValue<String?>("Parameter3Value", value); }
                [Owner]
                [ODataProperty]
                public Systems.Bpm.CalculatedAttribute? CalculatedAttribute { get => GetPropertyValue<Systems.Bpm.CalculatedAttribute>("CalculatedAttribute"); set => SetPropertyValue<Systems.Bpm.CalculatedAttribute>("CalculatedAttribute", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            public enum ExpressionOperator
            {
                ADD = 0,
                ADDDAYS = 1,
                AND = 2,
                CAST = 3,
                CEILING = 4,
                CONCAT = 5,
                CONVERT = 6,
                COUNT = 7,
                DIVIDE = 8,
                IN = 9,
                IIF = 10,
                INCNUM = 11,
                EQUAL = 12,
                FILTER = 13,
                FIRST = 14,
                FLOOR = 15,
                FORMATSTRING = 16,
                GETVALUE = 17,
                GETOBJVALUE = 18,
                GT = 19,
                GTE = 20,
                LIKE = 21,
                LIST = 22,
                LEFT = 23,
                LEN = 24,
                LT = 25,
                LTE = 26,
                MULTIPLY = 27,
                NOT = 28,
                OR = 29,
                ORDERBY = 30,
                POS = 31,
                REGEX = 32,
                REPLACE = 33,
                RIGHT = 34,
                ROUND = 35,
                SELECT = 36,
                SORT = 37,
                SUBSTRING = 38,
                SUM = 39,
                TODAY = 40,
                TOLOWER = 41,
                TOP = 42,
                TOUPPER = 43,
                WHERE = 44,
                INTERPOLATE = 45
            }
            public enum ExpressionParameterType
            {
                Constant = 0,
                Attribute = 1,
                Reference = 2,
                ChildList = 3,
                Expression = 4,
                Input = 5,
                Repository = 6,
                System = 7
            }
            [Entity(EntitySet = "Systems_Bpm_UserBusinessRules", TableName = "Sys_User_Business_Rules")]
            public partial class UserBusinessRule: EntityResource
            {
                public UserBusinessRule(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Bpm_UserBusinessRules";
                public const string EntityTableName = "Sys_User_Business_Rules";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Byte[]? Icon { get => GetPropertyValue<Byte[]?>("Icon"); set => SetPropertyValue<Byte[]?>("Icon", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Systems.Bpm.UserBusinessRulesRepository.Layer? Layer { get => GetPropertyValue<Systems.Bpm.UserBusinessRulesRepository.Layer?>("Layer"); set => SetPropertyValue<Systems.Bpm.UserBusinessRulesRepository.Layer?>("Layer", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? RepositoryName { get => GetPropertyValue<String?>("RepositoryName"); set => SetPropertyValue<String?>("RepositoryName", value); }
                [ODataProperty]
                public Systems.Bpm.UserBusinessRulesRepository.ScriptLanguage? ScriptLanguage { get => GetPropertyValue<Systems.Bpm.UserBusinessRulesRepository.ScriptLanguage?>("ScriptLanguage"); set => SetPropertyValue<Systems.Bpm.UserBusinessRulesRepository.ScriptLanguage?>("ScriptLanguage", value); }
                [ODataProperty]
                public String? ScriptText { get => GetPropertyValue<String?>("ScriptText"); set => SetPropertyValue<String?>("ScriptText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Boolean? UserStartable { get => GetPropertyValue<Boolean?>("UserStartable"); set => SetPropertyValue<Boolean?>("UserStartable", value); }
                [ODataProperty]
                public IEnumerable<Systems.Bpm.UserBusinessRuleAction>? Actions { get => GetCollection<Systems.Bpm.UserBusinessRuleAction>("Actions"); set => SetCollection<Systems.Bpm.UserBusinessRuleAction>("Actions", value); }
                [ODataProperty]
                public IEnumerable<Systems.Bpm.UserBusinessRuleCondition>? Conditions { get => GetCollection<Systems.Bpm.UserBusinessRuleCondition>("Conditions"); set => SetCollection<Systems.Bpm.UserBusinessRuleCondition>("Conditions", value); }
                [ODataProperty]
                public IEnumerable<Systems.Bpm.UserBusinessRuleEvent>? Events { get => GetCollection<Systems.Bpm.UserBusinessRuleEvent>("Events"); set => SetCollection<Systems.Bpm.UserBusinessRuleEvent>("Events", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Bpm_UserBusinessRuleActions", TableName = "Sys_User_Business_Rule_Actions")]
            public partial class UserBusinessRuleAction: EntityResource
            {
                public UserBusinessRuleAction(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Bpm_UserBusinessRuleActions";
                public const string EntityTableName = "Sys_User_Business_Rule_Actions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? ActionNo { get => GetPropertyValue<Int32?>("ActionNo"); set => SetPropertyValue<Int32?>("ActionNo", value); }
                [ODataProperty]
                public Systems.Bpm.UserBusinessRuleActionsRepository.ActionType? ActionType { get => GetPropertyValue<Systems.Bpm.UserBusinessRuleActionsRepository.ActionType?>("ActionType"); set => SetPropertyValue<Systems.Bpm.UserBusinessRuleActionsRepository.ActionType?>("ActionType", value); }
                [ODataProperty]
                public Systems.Bpm.ActionParameterType? Parameter1Type { get => GetPropertyValue<Systems.Bpm.ActionParameterType?>("Parameter1Type"); set => SetPropertyValue<Systems.Bpm.ActionParameterType?>("Parameter1Type", value); }
                [ODataProperty]
                public String? Parameter1Value { get => GetPropertyValue<String?>("Parameter1Value"); set => SetPropertyValue<String?>("Parameter1Value", value); }
                [ODataProperty]
                public Systems.Bpm.ActionParameterType? Parameter2Type { get => GetPropertyValue<Systems.Bpm.ActionParameterType?>("Parameter2Type"); set => SetPropertyValue<Systems.Bpm.ActionParameterType?>("Parameter2Type", value); }
                [ODataProperty]
                public String? Parameter2Value { get => GetPropertyValue<String?>("Parameter2Value"); set => SetPropertyValue<String?>("Parameter2Value", value); }
                [ODataProperty]
                public Systems.Bpm.ActionParameterType? Parameter3Type { get => GetPropertyValue<Systems.Bpm.ActionParameterType?>("Parameter3Type"); set => SetPropertyValue<Systems.Bpm.ActionParameterType?>("Parameter3Type", value); }
                [ODataProperty]
                public String? Parameter3Value { get => GetPropertyValue<String?>("Parameter3Value"); set => SetPropertyValue<String?>("Parameter3Value", value); }
                [Owner]
                [ODataProperty]
                public Systems.Bpm.UserBusinessRule? UserBusinessRule { get => GetPropertyValue<Systems.Bpm.UserBusinessRule>("UserBusinessRule"); set => SetPropertyValue<Systems.Bpm.UserBusinessRule>("UserBusinessRule", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace UserBusinessRuleActionsRepository
            {
                public enum ActionType
                {
                    SETVALUE = 0,
                    FAIL = 1,
                    SENDMAIL = 2,
                    WARNING = 3,
                    NOTIFYUSER = 4,
                    WEBHOOK = 5
                }
            }
            [Entity(EntitySet = "Systems_Bpm_UserBusinessRuleConditions", TableName = "Sys_User_Business_Rule_Conditions")]
            public partial class UserBusinessRuleCondition: EntityResource
            {
                public UserBusinessRuleCondition(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Bpm_UserBusinessRuleConditions";
                public const string EntityTableName = "Sys_User_Business_Rule_Conditions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? AttributeName { get => GetPropertyValue<String?>("AttributeName"); set => SetPropertyValue<String?>("AttributeName", value); }
                [ODataProperty]
                public Systems.Bpm.UserBusinessRuleConditionsRepository.ComparisonType? ComparisonType { get => GetPropertyValue<Systems.Bpm.UserBusinessRuleConditionsRepository.ComparisonType?>("ComparisonType"); set => SetPropertyValue<Systems.Bpm.UserBusinessRuleConditionsRepository.ComparisonType?>("ComparisonType", value); }
                [ODataProperty]
                public Int32? ConditionNo { get => GetPropertyValue<Int32?>("ConditionNo"); set => SetPropertyValue<Int32?>("ConditionNo", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Value { get => GetPropertyValue<String?>("Value"); set => SetPropertyValue<String?>("Value", value); }
                [Owner]
                [ODataProperty]
                public Systems.Bpm.UserBusinessRule? UserBusinessRule { get => GetPropertyValue<Systems.Bpm.UserBusinessRule>("UserBusinessRule"); set => SetPropertyValue<Systems.Bpm.UserBusinessRule>("UserBusinessRule", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace UserBusinessRuleConditionsRepository
            {
                public enum ComparisonType
                {
                    Equals = 0,
                    Greater_Than = 1,
                    Less_Than = 2,
                    Like = 3,
                    IsNull = 4,
                    Not_Equals = 5
                }
            }
            [Entity(EntitySet = "Systems_Bpm_UserBusinessRuleEvents", TableName = "Sys_User_Business_Rule_Events")]
            public partial class UserBusinessRuleEvent: EntityResource
            {
                public UserBusinessRuleEvent(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Bpm_UserBusinessRuleEvents";
                public const string EntityTableName = "Sys_User_Business_Rule_Events";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? EventParameter { get => GetPropertyValue<String?>("EventParameter"); set => SetPropertyValue<String?>("EventParameter", value); }
                [ODataProperty]
                public Systems.Bpm.UserBusinessRuleEventsRepository.EventType? EventType { get => GetPropertyValue<Systems.Bpm.UserBusinessRuleEventsRepository.EventType?>("EventType"); set => SetPropertyValue<Systems.Bpm.UserBusinessRuleEventsRepository.EventType?>("EventType", value); }
                [ODataProperty]
                public RuleExecutionPriority? ExecutionPriority { get => GetPropertyValue<RuleExecutionPriority?>("ExecutionPriority"); set => SetPropertyValue<RuleExecutionPriority?>("ExecutionPriority", value); }
                [ODataProperty]
                public Systems.Bpm.UserBusinessRuleEventsRepository.Layer? Layer { get => GetPropertyValue<Systems.Bpm.UserBusinessRuleEventsRepository.Layer?>("Layer"); set => SetPropertyValue<Systems.Bpm.UserBusinessRuleEventsRepository.Layer?>("Layer", value); }
                [Owner]
                [ODataProperty]
                public Systems.Bpm.UserBusinessRule? UserBusinessRule { get => GetPropertyValue<Systems.Bpm.UserBusinessRule>("UserBusinessRule"); set => SetPropertyValue<Systems.Bpm.UserBusinessRule>("UserBusinessRule", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace UserBusinessRuleEventsRepository
            {
                public enum EventType
                {
                    AGGREGATECLIENTCOMMIT = 0,
                    ATTRIBUTECHANGED = 1,
                    ATTRIBUTECHANGING = 2,
                    CLIENTCOMMIT = 3,
                    COMMIT = 4,
                    STATECHANGED = 5,
                    STATECHANGING = 6,
                    VOIDING = 7,
                    CREATENEW = 8,
                    COMMITTED = 9,
                    CLIENTCOMMITTED = 10,
                    AGGREGATECLIENTCOMMITTED = 11
                }
                public enum Layer
                {
                    FrontEnd = 0,
                    BackEnd = 1
                }
            }
            namespace UserBusinessRulesRepository
            {
                public enum Layer
                {
                    FrontEnd = 0,
                    BackEnd = 1,
                    Common = 2
                }
                public enum ScriptLanguage
                {
                    Integrated = 0,
                    CSharp = 1
                }
            }
        }
        namespace Core
        {
            [Entity(EntitySet = "Systems_Core_AttributeChanges")]
            public partial class AttributeChange: EntityResource
            {
                public AttributeChange(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_AttributeChanges";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public String? AttributeName { get => GetPropertyValue<String?>("AttributeName"); set => SetPropertyValue<String?>("AttributeName", value); }
                [ODataProperty]
                public String? NewValue { get => GetPropertyValue<String?>("NewValue"); set => SetPropertyValue<String?>("NewValue", value); }
                [Owner]
                [ODataProperty]
                public Systems.Core.ObjectChange? ObjectChange { get => GetPropertyValue<Systems.Core.ObjectChange>("ObjectChange"); set => SetPropertyValue<Systems.Core.ObjectChange>("ObjectChange", value); }
            }
            [Entity(EntitySet = "Systems_Core_AttributeChangesHistory")]
            public partial class AttributeChangesHistoryEntry: EntityResource
            {
                public AttributeChangesHistoryEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_AttributeChangesHistory";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public String? AttributeName { get => GetPropertyValue<String?>("AttributeName"); set => SetPropertyValue<String?>("AttributeName", value); }
                [ODataProperty]
                public Guid? EntityItemId { get => GetPropertyValue<Guid?>("EntityItemId"); set => SetPropertyValue<Guid?>("EntityItemId", value); }
                [ODataProperty]
                public String? NewValue { get => GetPropertyValue<String?>("NewValue"); set => SetPropertyValue<String?>("NewValue", value); }
                [ODataProperty]
                public String? PreviousValue { get => GetPropertyValue<String?>("PreviousValue"); set => SetPropertyValue<String?>("PreviousValue", value); }
                [ODataProperty]
                public String? RepositoryName { get => GetPropertyValue<String?>("RepositoryName"); set => SetPropertyValue<String?>("RepositoryName", value); }
                [ODataProperty]
                public DateTime? TimeUtc { get => GetPropertyValue<DateTime?>("TimeUtc"); set => SetPropertyValue<DateTime?>("TimeUtc", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
            }
            namespace AuditLogEntriesRepository
            {
                public enum EventClass
                {
                    Entity = 0,
                    Authentication = 1,
                    Server = 2
                }
                public enum EventType
                {
                    ReadOneRecordById = 0,
                    LoadManyRecords = 1,
                    CreateRecord = 2,
                    UpdateData = 3,
                    DeleteRecord = 4,
                    CallMethod = 5,
                    OtherEntityEvent = 6,
                    Login = 7,
                    LogOut = 8,
                    SignUp = 9,
                    LoginFailed = 10,
                    ChangePassword = 11,
                    OtherAuthEvent = 12,
                    OtherServerEvent = 13
                }
            }
            [Entity(EntitySet = "Systems_Core_AuditLogEntries", TableName = "Sys_Audit_Log_Entries")]
            public partial class AuditLogEntry: EntityResource
            {
                public AuditLogEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_AuditLogEntries";
                public const string EntityTableName = "Sys_Audit_Log_Entries";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ApplicationName { get => GetPropertyValue<String?>("ApplicationName"); set => SetPropertyValue<String?>("ApplicationName", value); }
                [ODataProperty]
                public String? Details { get => GetPropertyValue<String?>("Details"); set => SetPropertyValue<String?>("Details", value); }
                [ODataProperty]
                public Guid? EntityItemId { get => GetPropertyValue<Guid?>("EntityItemId"); set => SetPropertyValue<Guid?>("EntityItemId", value); }
                [ODataProperty]
                public String? EntityName { get => GetPropertyValue<String?>("EntityName"); set => SetPropertyValue<String?>("EntityName", value); }
                [ODataProperty]
                public Systems.Core.AuditLogEntriesRepository.EventClass? EventClass { get => GetPropertyValue<Systems.Core.AuditLogEntriesRepository.EventClass?>("EventClass"); set => SetPropertyValue<Systems.Core.AuditLogEntriesRepository.EventClass?>("EventClass", value); }
                [ODataProperty]
                public String? EventName { get => GetPropertyValue<String?>("EventName"); set => SetPropertyValue<String?>("EventName", value); }
                [ODataProperty]
                public DateTime? EventTimeUtc { get => GetPropertyValue<DateTime?>("EventTimeUtc"); set => SetPropertyValue<DateTime?>("EventTimeUtc", value); }
                [ODataProperty]
                public Systems.Core.AuditLogEntriesRepository.EventType? EventType { get => GetPropertyValue<Systems.Core.AuditLogEntriesRepository.EventType?>("EventType"); set => SetPropertyValue<Systems.Core.AuditLogEntriesRepository.EventType?>("EventType", value); }
                [ODataProperty]
                public Applications.PersonalData.PersonalDataProcess? PersonalDataProcess { get => GetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess"); set => SetPropertyValue<Applications.PersonalData.PersonalDataProcess>("PersonalDataProcess", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Core_Config", TableName = "Gen_Config")]
            public partial class Config: EntityResource
            {
                public Config(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_Config";
                public const string EntityTableName = "Gen_Config";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Description { get => GetPropertyValue<String?>("Description"); set => SetPropertyValue<String?>("Description", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? KeyPath { get => GetPropertyValue<String?>("KeyPath"); set => SetPropertyValue<String?>("KeyPath", value); }
                [ODataProperty]
                public String? KeyValue { get => GetPropertyValue<String?>("KeyValue"); set => SetPropertyValue<String?>("KeyValue", value); }
                [ODataProperty]
                public String? UserLogin { get => GetPropertyValue<String?>("UserLogin"); set => SetPropertyValue<String?>("UserLogin", value); }
                [ODataProperty]
                public String? UserMachine { get => GetPropertyValue<String?>("UserMachine"); set => SetPropertyValue<String?>("UserMachine", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Core_DataEntryDefaultValues", TableName = "Sys_Default_Values")]
            public partial class DataEntryDefaultValue: EntityResource
            {
                public DataEntryDefaultValue(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_DataEntryDefaultValues";
                public const string EntityTableName = "Sys_Default_Values";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ColumnName { get => GetPropertyValue<String?>("ColumnName"); set => SetPropertyValue<String?>("ColumnName", value); }
                [ODataProperty]
                public String? ConditionFormName { get => GetPropertyValue<String?>("ConditionFormName"); set => SetPropertyValue<String?>("ConditionFormName", value); }
                [ODataProperty]
                public String? ConditionUserLogin { get => GetPropertyValue<String?>("ConditionUserLogin"); set => SetPropertyValue<String?>("ConditionUserLogin", value); }
                [ODataProperty]
                public String? ConditionUserMachine { get => GetPropertyValue<String?>("ConditionUserMachine"); set => SetPropertyValue<String?>("ConditionUserMachine", value); }
                [ODataProperty]
                public String? DefaultValueField { get => GetPropertyValue<String?>("DefaultValueField"); set => SetPropertyValue<String?>("DefaultValueField", value); }
                [ODataProperty]
                public String? PanelName { get => GetPropertyValue<String?>("PanelName"); set => SetPropertyValue<String?>("PanelName", value); }
                [ODataProperty]
                public String? TableName { get => GetPropertyValue<String?>("TableName"); set => SetPropertyValue<String?>("TableName", value); }
                [ODataProperty]
                public General.DocumentType? ConditionDocumentType { get => GetPropertyValue<General.DocumentType>("ConditionDocumentType"); set => SetPropertyValue<General.DocumentType>("ConditionDocumentType", value); }
                [ODataProperty]
                public General.EnterpriseCompany? ConditionEnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("ConditionEnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("ConditionEnterpriseCompany", value); }
                [ODataProperty]
                public Systems.Security.Role? ConditionRole { get => GetPropertyValue<Systems.Security.Role>("ConditionRole"); set => SetPropertyValue<Systems.Security.Role>("ConditionRole", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Core_EntitySettings", TableName = "Sys_Entities")]
            public partial class EntitySetting: EntityResource
            {
                public EntitySetting(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_EntitySettings";
                public const string EntityTableName = "Sys_Entities";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? DisplayTextFormat { get => GetPropertyValue<String?>("DisplayTextFormat"); set => SetPropertyValue<String?>("DisplayTextFormat", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Boolean? LogCreate { get => GetPropertyValue<Boolean?>("LogCreate"); set => SetPropertyValue<Boolean?>("LogCreate", value); }
                [ODataProperty]
                public Boolean? LogDelete { get => GetPropertyValue<Boolean?>("LogDelete"); set => SetPropertyValue<Boolean?>("LogDelete", value); }
                [ODataProperty]
                public Boolean? LogReadById { get => GetPropertyValue<Boolean?>("LogReadById"); set => SetPropertyValue<Boolean?>("LogReadById", value); }
                [ODataProperty]
                public Boolean? LogReadMany { get => GetPropertyValue<Boolean?>("LogReadMany"); set => SetPropertyValue<Boolean?>("LogReadMany", value); }
                [ODataProperty]
                public Boolean? LogUpdate { get => GetPropertyValue<Boolean?>("LogUpdate"); set => SetPropertyValue<Boolean?>("LogUpdate", value); }
                [ODataProperty]
                public Systems.Core.TrackChangesLevel? TrackChangesLevel { get => GetPropertyValue<Systems.Core.TrackChangesLevel?>("TrackChangesLevel"); set => SetPropertyValue<Systems.Core.TrackChangesLevel?>("TrackChangesLevel", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Core_ExtensibleDataObjects", TableName = "Sys_Objects")]
            public partial class ExtensibleDataObject: EntityResource
            {
                public ExtensibleDataObject(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_ExtensibleDataObjects";
                public const string EntityTableName = "Sys_Objects";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
                [ODataProperty]
                public Guid? EntityItemId { get => GetPropertyValue<Guid?>("EntityItemId"); set => SetPropertyValue<Guid?>("EntityItemId", value); }
                [ODataProperty]
                public String? EntityType { get => GetPropertyValue<String?>("EntityType"); set => SetPropertyValue<String?>("EntityType", value); }
                [ODataProperty]
                public Boolean? IsDeleted { get => GetPropertyValue<Boolean?>("IsDeleted"); set => SetPropertyValue<Boolean?>("IsDeleted", value); }
                [ODataProperty]
                public DateTime? LastUpdateTimeUtc { get => GetPropertyValue<DateTime?>("LastUpdateTimeUtc"); set => SetPropertyValue<DateTime?>("LastUpdateTimeUtc", value); }
                [ODataProperty]
                public Int32? LatestVersion { get => GetPropertyValue<Int32?>("LatestVersion"); set => SetPropertyValue<Int32?>("LatestVersion", value); }
                [ODataProperty]
                public Systems.Security.User? CreationUser { get => GetPropertyValue<Systems.Security.User>("CreationUser"); set => SetPropertyValue<Systems.Security.User>("CreationUser", value); }
                [ODataProperty]
                public Systems.Security.User? LastUpdateUser { get => GetPropertyValue<Systems.Security.User>("LastUpdateUser"); set => SetPropertyValue<Systems.Security.User>("LastUpdateUser", value); }
                [ODataProperty]
                public IEnumerable<Systems.Core.ObjectFile>? Files { get => GetCollection<Systems.Core.ObjectFile>("Files"); set => SetCollection<Systems.Core.ObjectFile>("Files", value); }
                [ODataProperty]
                public IEnumerable<Systems.Core.ObjectVersion>? Versions { get => GetCollection<Systems.Core.ObjectVersion>("Versions"); set => SetCollection<Systems.Core.ObjectVersion>("Versions", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Core_ExternalApplications", TableName = "Sys_External_Applications")]
            public partial class ExternalApplication: EntityResource
            {
                public ExternalApplication(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_ExternalApplications";
                public const string EntityTableName = "Sys_External_Applications";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Address { get => GetPropertyValue<String?>("Address"); set => SetPropertyValue<String?>("Address", value); }
                [ODataProperty]
                public Systems.Core.ExternalApplicationsRepository.AvailableInMode? AvailableInMode { get => GetPropertyValue<Systems.Core.ExternalApplicationsRepository.AvailableInMode?>("AvailableInMode"); set => SetPropertyValue<Systems.Core.ExternalApplicationsRepository.AvailableInMode?>("AvailableInMode", value); }
                [ODataProperty]
                public String? EntityName { get => GetPropertyValue<String?>("EntityName"); set => SetPropertyValue<String?>("EntityName", value); }
                [ODataProperty]
                public Boolean? ExecuteForAllObjects { get => GetPropertyValue<Boolean?>("ExecuteForAllObjects"); set => SetPropertyValue<Boolean?>("ExecuteForAllObjects", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Systems.Core.ExternalApplicationsRepository.Platform? Platform { get => GetPropertyValue<Systems.Core.ExternalApplicationsRepository.Platform?>("Platform"); set => SetPropertyValue<Systems.Core.ExternalApplicationsRepository.Platform?>("Platform", value); }
                [ODataProperty]
                public Boolean? RefreshAfterFinish { get => GetPropertyValue<Boolean?>("RefreshAfterFinish"); set => SetPropertyValue<Boolean?>("RefreshAfterFinish", value); }
                [ODataProperty]
                public Boolean? SaveBeforeStart { get => GetPropertyValue<Boolean?>("SaveBeforeStart"); set => SetPropertyValue<Boolean?>("SaveBeforeStart", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ExternalApplicationsRepository
            {
                public enum AvailableInMode
                {
                    SINGLE = 0,
                    LIST = 1,
                    ALL = 2
                }
                public enum Platform
                {
                    WINDOWS = 0,
                    WEBPAGE = 1,
                    WEBSERVICE = 2,
                    ANDROID = 3,
                    IOS = 4
                }
            }
            [Entity(EntitySet = "Systems_Core_InformationMessages", TableName = "Sys_Information_Messages")]
            public partial class InformationMessage: EntityResource
            {
                public InformationMessage(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_InformationMessages";
                public const string EntityTableName = "Sys_Information_Messages";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? InformationMessageTime { get => GetPropertyValue<DateTime?>("InformationMessageTime"); set => SetPropertyValue<DateTime?>("InformationMessageTime", value); }
                [ODataProperty]
                public Systems.Core.InformationMessagesRepository.InformationMessageType? InformationMessageType { get => GetPropertyValue<Systems.Core.InformationMessagesRepository.InformationMessageType?>("InformationMessageType"); set => SetPropertyValue<Systems.Core.InformationMessagesRepository.InformationMessageType?>("InformationMessageType", value); }
                [ODataProperty]
                public String? MachineName { get => GetPropertyValue<String?>("MachineName"); set => SetPropertyValue<String?>("MachineName", value); }
                [ODataProperty]
                public String? Message { get => GetPropertyValue<String?>("Message"); set => SetPropertyValue<String?>("Message", value); }
                [ODataProperty]
                public String? ProcessDescription { get => GetPropertyValue<String?>("ProcessDescription"); set => SetPropertyValue<String?>("ProcessDescription", value); }
                [ODataProperty]
                public String? URL { get => GetPropertyValue<String?>("URL"); set => SetPropertyValue<String?>("URL", value); }
                [ODataProperty]
                public String? UserName { get => GetPropertyValue<String?>("UserName"); set => SetPropertyValue<String?>("UserName", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace InformationMessagesRepository
            {
                public enum InformationMessageType
                {
                    Information = 0,
                    Warning = 1,
                    Error = 2
                }
            }
            [Entity(EntitySet = "Systems_Core_Jobs", TableName = "Sys_Jobs")]
            public partial class Job: EntityResource
            {
                public Job(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_Jobs";
                public const string EntityTableName = "Sys_Jobs";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Systems.Core.JobsRepository.JobType? JobType { get => GetPropertyValue<Systems.Core.JobsRepository.JobType?>("JobType"); set => SetPropertyValue<Systems.Core.JobsRepository.JobType?>("JobType", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Boolean? RunOnIdle { get => GetPropertyValue<Boolean?>("RunOnIdle"); set => SetPropertyValue<Boolean?>("RunOnIdle", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace JobsRepository
            {
                public enum JobType
                {
                    DocumentChangeState = 0,
                    RunPostponedEvents = 1,
                    DeleteOldNotifications = 2,
                    DeleteOldPrintImages = 3,
                    DeleteOldDocumentVersions = 4
                }
            }
            [Entity(EntitySet = "Systems_Core_ObjectChanges", TableName = "Sys_Object_Changes")]
            public partial class ObjectChange: EntityResource
            {
                public ObjectChange(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_ObjectChanges";
                public const string EntityTableName = "Sys_Object_Changes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Systems.Core.ObjectChangesRepository.ChangeType? ChangeType { get => GetPropertyValue<Systems.Core.ObjectChangesRepository.ChangeType?>("ChangeType"); set => SetPropertyValue<Systems.Core.ObjectChangesRepository.ChangeType?>("ChangeType", value); }
                [ODataProperty]
                public Guid? EntityItemId { get => GetPropertyValue<Guid?>("EntityItemId"); set => SetPropertyValue<Guid?>("EntityItemId", value); }
                [ODataProperty]
                public String? OldValuesJson { get => GetPropertyValue<String?>("OldValuesJson"); set => SetPropertyValue<String?>("OldValuesJson", value); }
                [ODataProperty]
                public String? RepositoryName { get => GetPropertyValue<String?>("RepositoryName"); set => SetPropertyValue<String?>("RepositoryName", value); }
                [Owner]
                [ODataProperty]
                public Systems.Core.ObjectChangeset? ObjectChangeset { get => GetPropertyValue<Systems.Core.ObjectChangeset>("ObjectChangeset"); set => SetPropertyValue<Systems.Core.ObjectChangeset>("ObjectChangeset", value); }
                [ODataProperty]
                public Systems.Core.ExtensibleDataObject? RootObject { get => GetPropertyValue<Systems.Core.ExtensibleDataObject>("RootObject"); set => SetPropertyValue<Systems.Core.ExtensibleDataObject>("RootObject", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Core_ObjectChangesets", TableName = "Sys_Object_Changesets")]
            public partial class ObjectChangeset: EntityResource
            {
                public ObjectChangeset(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_ObjectChangesets";
                public const string EntityTableName = "Sys_Object_Changesets";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ApplicationName { get => GetPropertyValue<String?>("ApplicationName"); set => SetPropertyValue<String?>("ApplicationName", value); }
                [ODataProperty]
                public String? ServerVersion { get => GetPropertyValue<String?>("ServerVersion"); set => SetPropertyValue<String?>("ServerVersion", value); }
                [ODataProperty]
                public DateTime? TimeUtc { get => GetPropertyValue<DateTime?>("TimeUtc"); set => SetPropertyValue<DateTime?>("TimeUtc", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                [ODataProperty]
                public IEnumerable<Systems.Core.ObjectChange>? ObjectChanges { get => GetCollection<Systems.Core.ObjectChange>("ObjectChanges"); set => SetCollection<Systems.Core.ObjectChange>("ObjectChanges", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ObjectChangesRepository
            {
                public enum ChangeType
                {
                    Create = 0,
                    Update = 1,
                    Delete = 2
                }
            }
            [Entity(EntitySet = "Systems_Core_ObjectFiles", TableName = "Sys_Object_Files")]
            public partial class ObjectFile: EntityResource
            {
                public ObjectFile(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_ObjectFiles";
                public const string EntityTableName = "Sys_Object_Files";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Systems.Core.ObjectFilesRepository.ContentLocation? ContentLocation { get => GetPropertyValue<Systems.Core.ObjectFilesRepository.ContentLocation?>("ContentLocation"); set => SetPropertyValue<Systems.Core.ObjectFilesRepository.ContentLocation?>("ContentLocation", value); }
                [ODataProperty]
                public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
                [ODataProperty]
                public Byte[]? EmbeddedFileContents { get => GetPropertyValue<Byte[]?>("EmbeddedFileContents"); set => SetPropertyValue<Byte[]?>("EmbeddedFileContents", value); }
                [ODataProperty]
                public String? FileName { get => GetPropertyValue<String?>("FileName"); set => SetPropertyValue<String?>("FileName", value); }
                [ODataProperty]
                public Int32? FileSizeBytes { get => GetPropertyValue<Int32?>("FileSizeBytes"); set => SetPropertyValue<Int32?>("FileSizeBytes", value); }
                [ODataProperty]
                public DateTime? LastUpdateTimeUtc { get => GetPropertyValue<DateTime?>("LastUpdateTimeUtc"); set => SetPropertyValue<DateTime?>("LastUpdateTimeUtc", value); }
                [ODataProperty]
                public String? LinkedFilePath { get => GetPropertyValue<String?>("LinkedFilePath"); set => SetPropertyValue<String?>("LinkedFilePath", value); }
                [ODataProperty]
                public Int32? MediaHeight { get => GetPropertyValue<Int32?>("MediaHeight"); set => SetPropertyValue<Int32?>("MediaHeight", value); }
                [ODataProperty]
                public String? MediaType { get => GetPropertyValue<String?>("MediaType"); set => SetPropertyValue<String?>("MediaType", value); }
                [ODataProperty]
                public Int32? MediaWidth { get => GetPropertyValue<Int32?>("MediaWidth"); set => SetPropertyValue<Int32?>("MediaWidth", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? PurposeCode { get => GetPropertyValue<String?>("PurposeCode"); set => SetPropertyValue<String?>("PurposeCode", value); }
                [ODataProperty]
                public String? Section { get => GetPropertyValue<String?>("Section"); set => SetPropertyValue<String?>("Section", value); }
                [ODataProperty]
                public Systems.Security.User? CreationUser { get => GetPropertyValue<Systems.Security.User>("CreationUser"); set => SetPropertyValue<Systems.Security.User>("CreationUser", value); }
                [ODataProperty]
                public Systems.Security.User? LastUpdateUser { get => GetPropertyValue<Systems.Security.User>("LastUpdateUser"); set => SetPropertyValue<Systems.Security.User>("LastUpdateUser", value); }
                [Owner]
                [ODataProperty]
                public Systems.Core.ExtensibleDataObject? Object { get => GetPropertyValue<Systems.Core.ExtensibleDataObject>("Object"); set => SetPropertyValue<Systems.Core.ExtensibleDataObject>("Object", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ObjectFilesRepository
            {
                public enum ContentLocation
                {
                    Embedded = 0,
                    InternetUrl = 1,
                    FileSystemLink = 2
                }
            }
            [Entity(EntitySet = "Systems_Core_ObjectVersions", TableName = "Sys_Object_Versions")]
            public partial class ObjectVersion: EntityResource
            {
                public ObjectVersion(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_ObjectVersions";
                public const string EntityTableName = "Sys_Object_Versions";
                [ODataProperty]
                public Int32? ObjectVersion1 { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Byte[]? ObjectContents { get => GetPropertyValue<Byte[]?>("ObjectContents"); set => SetPropertyValue<Byte[]?>("ObjectContents", value); }
                [ODataProperty]
                public String? ServerVersion { get => GetPropertyValue<String?>("ServerVersion"); set => SetPropertyValue<String?>("ServerVersion", value); }
                [ODataProperty]
                public Int32? Version { get => GetPropertyValue<Int32?>("Version"); set => SetPropertyValue<Int32?>("Version", value); }
                [ODataProperty]
                public DateTime? VersionTime { get => GetPropertyValue<DateTime?>("VersionTime"); set => SetPropertyValue<DateTime?>("VersionTime", value); }
                [ODataProperty]
                public Systems.Core.ObjectVersionsRepository.VersionType? VersionType { get => GetPropertyValue<Systems.Core.ObjectVersionsRepository.VersionType?>("VersionType"); set => SetPropertyValue<Systems.Core.ObjectVersionsRepository.VersionType?>("VersionType", value); }
                [Owner]
                [ODataProperty]
                public Systems.Core.ExtensibleDataObject? Object { get => GetPropertyValue<Systems.Core.ExtensibleDataObject>("Object"); set => SetPropertyValue<Systems.Core.ExtensibleDataObject>("Object", value); }
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ObjectVersionsRepository
            {
                public enum VersionType
                {
                    Create = 0,
                    Update = 1
                }
            }
            [Entity(EntitySet = "Systems_Core_ResolvedConflicts", TableName = "Sys_Resolved_Conflicts")]
            public partial class ResolvedConflict: EntityResource
            {
                public ResolvedConflict(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_ResolvedConflicts";
                public const string EntityTableName = "Sys_Resolved_Conflicts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public MultilanguageString? ConflictDescription { get => GetPropertyValue<MultilanguageString?>("ConflictDescription"); set => SetPropertyValue<MultilanguageString?>("ConflictDescription", value); }
                [ODataProperty]
                public Boolean? ResolveConfirmedByUser { get => GetPropertyValue<Boolean?>("ResolveConfirmedByUser"); set => SetPropertyValue<Boolean?>("ResolveConfirmedByUser", value); }
                [ODataProperty]
                public DateTime? ResolveConfirmedTime { get => GetPropertyValue<DateTime?>("ResolveConfirmedTime"); set => SetPropertyValue<DateTime?>("ResolveConfirmedTime", value); }
                [ODataProperty]
                public MultilanguageString? ResolveDescription { get => GetPropertyValue<MultilanguageString?>("ResolveDescription"); set => SetPropertyValue<MultilanguageString?>("ResolveDescription", value); }
                [ODataProperty]
                public DateTime? ResolvedTime { get => GetPropertyValue<DateTime?>("ResolvedTime"); set => SetPropertyValue<DateTime?>("ResolvedTime", value); }
                [ODataProperty]
                public Boolean? RevisedByUser { get => GetPropertyValue<Boolean?>("RevisedByUser"); set => SetPropertyValue<Boolean?>("RevisedByUser", value); }
                [ODataProperty]
                public MultilanguageString? TableName { get => GetPropertyValue<MultilanguageString?>("TableName"); set => SetPropertyValue<MultilanguageString?>("TableName", value); }
                [ODataProperty]
                public String? URL { get => GetPropertyValue<String?>("URL"); set => SetPropertyValue<String?>("URL", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Core_ScheduledDocumentEvents", TableName = "Gen_Scheduled_Document_Events")]
            public partial class ScheduledDocumentEvent: EntityResource
            {
                public ScheduledDocumentEvent(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_ScheduledDocumentEvents";
                public const string EntityTableName = "Gen_Scheduled_Document_Events";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Cancelled { get => GetPropertyValue<Boolean?>("Cancelled"); set => SetPropertyValue<Boolean?>("Cancelled", value); }
                [ODataProperty]
                public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
                [ODataProperty]
                public String? DocumentEvent { get => GetPropertyValue<String?>("DocumentEvent"); set => SetPropertyValue<String?>("DocumentEvent", value); }
                [ODataProperty]
                public String? LastProcessStatus { get => GetPropertyValue<String?>("LastProcessStatus"); set => SetPropertyValue<String?>("LastProcessStatus", value); }
                [ODataProperty]
                public DateTime? LastProcessTime { get => GetPropertyValue<DateTime?>("LastProcessTime"); set => SetPropertyValue<DateTime?>("LastProcessTime", value); }
                [ODataProperty]
                public Boolean? Processed { get => GetPropertyValue<Boolean?>("Processed"); set => SetPropertyValue<Boolean?>("Processed", value); }
                [ODataProperty]
                public Systems.Core.ScheduledDocumentEventsRepository.State? State { get => GetPropertyValue<Systems.Core.ScheduledDocumentEventsRepository.State?>("State"); set => SetPropertyValue<Systems.Core.ScheduledDocumentEventsRepository.State?>("State", value); }
                [ODataProperty]
                public General.Document? Document { get => GetPropertyValue<General.Document>("Document"); set => SetPropertyValue<General.Document>("Document", value); }
                [ODataProperty]
                public General.Document? SourceDocument { get => GetPropertyValue<General.Document>("SourceDocument"); set => SetPropertyValue<General.Document>("SourceDocument", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<Boolean?> ProcessAsync(DomainApiService service) { return (Boolean?)(await this.InvokeActionAsync(service, "Process")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace ScheduledDocumentEventsRepository
            {
                public enum State
                {
                    New = 0,
                    Corrective = 5,
                    Planned = 10,
                    FirmPlanned = 20,
                    Released = 30,
                    Completed = 40,
                    Closed = 50
                }
            }
            [Entity(EntitySet = "Systems_Core_Sequences", TableName = "Gen_Sequences")]
            public partial class Sequence: EntityResource
            {
                public Sequence(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_Sequences";
                public const string EntityTableName = "Gen_Sequences";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Boolean? SimultaneousTransactions { get => GetPropertyValue<Boolean?>("SimultaneousTransactions"); set => SetPropertyValue<Boolean?>("SimultaneousTransactions", value); }
                [ODataProperty]
                public IEnumerable<General.SequenceGenerator>? Generators { get => GetCollection<General.SequenceGenerator>("Generators"); set => SetCollection<General.SequenceGenerator>("Generators", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            public enum TrackChangesLevel
            {
                DoNotTrackChanges = 0,
                TrackLastChangesOnly = 1,
                TrackObjectChanges = 2,
                TrackObjectAndAttributeChanges = 3,
                TrackObjectAttributeAndBlobChanges = 4
            }
            [Entity(EntitySet = "Systems_Core_Translations", TableName = "Sys_Translations")]
            public partial class Translation: EntityResource
            {
                public Translation(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_Translations";
                public const string EntityTableName = "Sys_Translations";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public String? ApplicationName { get => GetPropertyValue<String?>("ApplicationName"); set => SetPropertyValue<String?>("ApplicationName", value); }
                [ODataProperty]
                public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
                [ODataProperty]
                public String? Language { get => GetPropertyValue<String?>("Language"); set => SetPropertyValue<String?>("Language", value); }
                [ODataProperty]
                public String? ResourceId { get => GetPropertyValue<String?>("ResourceId"); set => SetPropertyValue<String?>("ResourceId", value); }
                [ODataProperty]
                public Systems.Core.TranslationsRepository.ResourceType? ResourceType { get => GetPropertyValue<Systems.Core.TranslationsRepository.ResourceType?>("ResourceType"); set => SetPropertyValue<Systems.Core.TranslationsRepository.ResourceType?>("ResourceType", value); }
                [ODataProperty]
                public String? TranslationField { get => GetPropertyValue<String?>("TranslationField"); set => SetPropertyValue<String?>("TranslationField", value); }
                [ODataProperty]
                public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace TranslationsRepository
            {
                public enum ResourceType
                {
                    TableName = 0,
                    ColumnName = 1,
                    ColumnHint = 2,
                    MetaResource = 3,
                    ErrorMessage = 4,
                    Message = 5,
                    OtherApplicationSpecific = 6
                }
            }
            [Entity(EntitySet = "Systems_Core_UpdateProcedureExecutes", TableName = "Sys_Update_Procedure_Executes")]
            public partial class UpdateProcedureExecute: EntityResource
            {
                public UpdateProcedureExecute(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_UpdateProcedureExecutes";
                public const string EntityTableName = "Sys_Update_Procedure_Executes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? ExecuteTime { get => GetPropertyValue<DateTime?>("ExecuteTime"); set => SetPropertyValue<DateTime?>("ExecuteTime", value); }
                [ODataProperty]
                public String? ResultMessage { get => GetPropertyValue<String?>("ResultMessage"); set => SetPropertyValue<String?>("ResultMessage", value); }
                [ODataProperty]
                public Boolean? Successful { get => GetPropertyValue<Boolean?>("Successful"); set => SetPropertyValue<Boolean?>("Successful", value); }
                [ODataProperty]
                public String? UpdateProcedure { get => GetPropertyValue<String?>("UpdateProcedure"); set => SetPropertyValue<String?>("UpdateProcedure", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Core_WebHooks", TableName = "Sys_Web_Hooks")]
            public partial class WebHook: EntityResource
            {
                public WebHook(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_WebHooks";
                public const string EntityTableName = "Sys_Web_Hooks";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Body { get => GetPropertyValue<String?>("Body"); set => SetPropertyValue<String?>("Body", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public String? Headers { get => GetPropertyValue<String?>("Headers"); set => SetPropertyValue<String?>("Headers", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? RepositoryName { get => GetPropertyValue<String?>("RepositoryName"); set => SetPropertyValue<String?>("RepositoryName", value); }
                [ODataProperty]
                public Systems.Core.WebHooksRepository.RetryLogic? RetryLogic { get => GetPropertyValue<Systems.Core.WebHooksRepository.RetryLogic?>("RetryLogic"); set => SetPropertyValue<Systems.Core.WebHooksRepository.RetryLogic?>("RetryLogic", value); }
                [ODataProperty]
                public String? URL { get => GetPropertyValue<String?>("URL"); set => SetPropertyValue<String?>("URL", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace WebHooksRepository
            {
                public enum RetryLogic
                {
                    NoRetry = 0,
                    Retry = 1
                }
            }
            [Entity(EntitySet = "Systems_Core_WebHosts", TableName = "Sys_Web_Hosts")]
            public partial class WebHost: EntityResource
            {
                public WebHost(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_WebHosts";
                public const string EntityTableName = "Sys_Web_Hosts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Byte[]? CertificateContents { get => GetPropertyValue<Byte[]?>("CertificateContents"); set => SetPropertyValue<Byte[]?>("CertificateContents", value); }
                [ODataProperty]
                public DateTime? CertificateExpiryDate { get => GetPropertyValue<DateTime?>("CertificateExpiryDate"); set => SetPropertyValue<DateTime?>("CertificateExpiryDate", value); }
                [ODataProperty]
                public String? CertificateOriginalFilename { get => GetPropertyValue<String?>("CertificateOriginalFilename"); set => SetPropertyValue<String?>("CertificateOriginalFilename", value); }
                [ODataProperty]
                public String? CertificatePassword { get => GetPropertyValue<String?>("CertificatePassword"); set => SetPropertyValue<String?>("CertificatePassword", value); }
                [ODataProperty]
                public String? CertificateType { get => GetPropertyValue<String?>("CertificateType"); set => SetPropertyValue<String?>("CertificateType", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Core_WebSites", TableName = "Sys_Web_Sites")]
            public partial class WebSite: EntityResource
            {
                public WebSite(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Core_WebSites";
                public const string EntityTableName = "Sys_Web_Sites";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public Boolean? IsPrivate { get => GetPropertyValue<Boolean?>("IsPrivate"); set => SetPropertyValue<Boolean?>("IsPrivate", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? RelativeUrl { get => GetPropertyValue<String?>("RelativeUrl"); set => SetPropertyValue<String?>("RelativeUrl", value); }
                [ODataProperty]
                public String? SettingsJson { get => GetPropertyValue<String?>("SettingsJson"); set => SetPropertyValue<String?>("SettingsJson", value); }
                [ODataProperty]
                public Systems.Core.WebSitesRepository.WebSiteType? WebSiteType { get => GetPropertyValue<Systems.Core.WebSitesRepository.WebSiteType?>("WebSiteType"); set => SetPropertyValue<Systems.Core.WebSitesRepository.WebSiteType?>("WebSiteType", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Systems.Security.TrustedApplication? TrustedApplication { get => GetPropertyValue<Systems.Security.TrustedApplication>("TrustedApplication"); set => SetPropertyValue<Systems.Security.TrustedApplication>("TrustedApplication", value); }
                [ODataProperty]
                public Systems.Core.WebHost? WebHost { get => GetPropertyValue<Systems.Core.WebHost>("WebHost"); set => SetPropertyValue<Systems.Core.WebHost>("WebHost", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace WebSitesRepository
            {
                public enum WebSiteType
                {
                    API = 0,
                    ClientCenter = 1,
                    ECommerce = 2,
                    LEGALBG = 3,
                    SocialInteractions = 4,
                    DigitalMarketplace = 5,
                    WebClientApplication = 6,
                    TableAPI = 7,
                    DataAccessAPI = 8,
                    LEGALUK = 9,
                    OLAP = 10
                }
            }
        }
        namespace Dmv
        {
            [Entity(EntitySet = "Systems_Dmv_CurrentSessions")]
            public partial class CurrentSessionsEntry: EntityResource
            {
                public CurrentSessionsEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Dmv_CurrentSessions";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public DateTime? AbsoluteExpirationTime { get => GetPropertyValue<DateTime?>("AbsoluteExpirationTime"); set => SetPropertyValue<DateTime?>("AbsoluteExpirationTime", value); }
                [ODataProperty]
                public String? Applications { get => GetPropertyValue<String?>("Applications"); set => SetPropertyValue<String?>("Applications", value); }
                [ODataProperty]
                public Int32? CurrentRequestsCount { get => GetPropertyValue<Int32?>("CurrentRequestsCount"); set => SetPropertyValue<Int32?>("CurrentRequestsCount", value); }
                [ODataProperty]
                public String? Device { get => GetPropertyValue<String?>("Device"); set => SetPropertyValue<String?>("Device", value); }
                [ODataProperty]
                public Decimal? DownloadMB { get => GetPropertyValue<Decimal?>("DownloadMB"); set => SetPropertyValue<Decimal?>("DownloadMB", value); }
                [ODataProperty]
                public DateTime? LastRequestTime { get => GetPropertyValue<DateTime?>("LastRequestTime"); set => SetPropertyValue<DateTime?>("LastRequestTime", value); }
                [ODataProperty]
                public DateTime? StartTime { get => GetPropertyValue<DateTime?>("StartTime"); set => SetPropertyValue<DateTime?>("StartTime", value); }
                [ODataProperty]
                public Int64? TotalRequestsCount { get => GetPropertyValue<Int64?>("TotalRequestsCount"); set => SetPropertyValue<Int64?>("TotalRequestsCount", value); }
                [ODataProperty]
                public Decimal? UploadMB { get => GetPropertyValue<Decimal?>("UploadMB"); set => SetPropertyValue<Decimal?>("UploadMB", value); }
                [ODataProperty]
                public String? User { get => GetPropertyValue<String?>("User"); set => SetPropertyValue<String?>("User", value); }
            }
            [Entity(EntitySet = "Systems_Dmv_ExecStats")]
            public partial class ExecStatsEntry: EntityResource
            {
                public ExecStatsEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Dmv_ExecStats";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public String? Application { get => GetPropertyValue<String?>("Application"); set => SetPropertyValue<String?>("Application", value); }
                [ODataProperty]
                public Int32? AvgTimeMs { get => GetPropertyValue<Int32?>("AvgTimeMs"); set => SetPropertyValue<Int32?>("AvgTimeMs", value); }
                [ODataProperty]
                public Int32? Count { get => GetPropertyValue<Int32?>("Count"); set => SetPropertyValue<Int32?>("Count", value); }
                [ODataProperty]
                public String? Database { get => GetPropertyValue<String?>("Database"); set => SetPropertyValue<String?>("Database", value); }
                [ODataProperty]
                public Boolean? IsLongPolling { get => GetPropertyValue<Boolean?>("IsLongPolling"); set => SetPropertyValue<Boolean?>("IsLongPolling", value); }
                [ODataProperty]
                public String? Kind { get => GetPropertyValue<String?>("Kind"); set => SetPropertyValue<String?>("Kind", value); }
                [ODataProperty]
                public Int32? MaxTimeMs { get => GetPropertyValue<Int32?>("MaxTimeMs"); set => SetPropertyValue<Int32?>("MaxTimeMs", value); }
                [ODataProperty]
                public String? Operation { get => GetPropertyValue<String?>("Operation"); set => SetPropertyValue<String?>("Operation", value); }
                [ODataProperty]
                public DateTime? StatisticsSince { get => GetPropertyValue<DateTime?>("StatisticsSince"); set => SetPropertyValue<DateTime?>("StatisticsSince", value); }
                [ODataProperty]
                public Int32? TotalTimeMs { get => GetPropertyValue<Int32?>("TotalTimeMs"); set => SetPropertyValue<Int32?>("TotalTimeMs", value); }
            }
            [Entity(EntitySet = "Systems_Dmv_PrintImages")]
            public partial class PrintImagesEntry: EntityResource
            {
                public PrintImagesEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Dmv_PrintImages";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public String? DocumentEntityName { get => GetPropertyValue<String?>("DocumentEntityName"); set => SetPropertyValue<String?>("DocumentEntityName", value); }
                [ODataProperty]
                public String? PrintoutLayoutName { get => GetPropertyValue<String?>("PrintoutLayoutName"); set => SetPropertyValue<String?>("PrintoutLayoutName", value); }
                [ODataProperty]
                public Int32? PrintsCount { get => GetPropertyValue<Int32?>("PrintsCount"); set => SetPropertyValue<Int32?>("PrintsCount", value); }
                [ODataProperty]
                public Decimal? SizeMB { get => GetPropertyValue<Decimal?>("SizeMB"); set => SetPropertyValue<Decimal?>("SizeMB", value); }
                [ODataProperty]
                public MultilanguageString? TypeName { get => GetPropertyValue<MultilanguageString?>("TypeName"); set => SetPropertyValue<MultilanguageString?>("TypeName", value); }
                [ODataProperty]
                public Decimal? UnitSizeMB { get => GetPropertyValue<Decimal?>("UnitSizeMB"); set => SetPropertyValue<Decimal?>("UnitSizeMB", value); }
            }
            [Entity(EntitySet = "Systems_Dmv_ProcedureStatusInfo")]
            public partial class ProcedureStatusInfoEntry: EntityResource
            {
                public ProcedureStatusInfoEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Dmv_ProcedureStatusInfo";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Boolean? Completed { get => GetPropertyValue<Boolean?>("Completed"); set => SetPropertyValue<Boolean?>("Completed", value); }
                [ODataProperty]
                public String? ElapsedMin { get => GetPropertyValue<String?>("ElapsedMin"); set => SetPropertyValue<String?>("ElapsedMin", value); }
                [ODataProperty]
                public Double? ElapsedPercent { get => GetPropertyValue<Double?>("ElapsedPercent"); set => SetPropertyValue<Double?>("ElapsedPercent", value); }
                [ODataProperty]
                public String? EndTime { get => GetPropertyValue<String?>("EndTime"); set => SetPropertyValue<String?>("EndTime", value); }
                [ODataProperty]
                public String? Error { get => GetPropertyValue<String?>("Error"); set => SetPropertyValue<String?>("Error", value); }
                [ODataProperty]
                public String? Procedure { get => GetPropertyValue<String?>("Procedure"); set => SetPropertyValue<String?>("Procedure", value); }
                [ODataProperty]
                public String? Properties { get => GetPropertyValue<String?>("Properties"); set => SetPropertyValue<String?>("Properties", value); }
                [ODataProperty]
                public String? StartTime { get => GetPropertyValue<String?>("StartTime"); set => SetPropertyValue<String?>("StartTime", value); }
                [ODataProperty]
                public String? User { get => GetPropertyValue<String?>("User"); set => SetPropertyValue<String?>("User", value); }
            }
            [Entity(EntitySet = "Systems_Dmv_TableInfo")]
            public partial class TableInfoEntry: EntityResource
            {
                public TableInfoEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Dmv_TableInfo";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Int64? RowCount { get => GetPropertyValue<Int64?>("RowCount"); set => SetPropertyValue<Int64?>("RowCount", value); }
                [ODataProperty]
                public Decimal? SizeMB { get => GetPropertyValue<Decimal?>("SizeMB"); set => SetPropertyValue<Decimal?>("SizeMB", value); }
                [ODataProperty]
                public String? TableName { get => GetPropertyValue<String?>("TableName"); set => SetPropertyValue<String?>("TableName", value); }
            }
            [Entity(EntitySet = "Systems_Dmv_WebSites")]
            public partial class WebSitesEntry: EntityResource
            {
                public WebSitesEntry(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Dmv_WebSites";
                public const string EntityTableName = "";
                [ODataProperty]
                public Guid? ViewItemId { get => GetPropertyValue<Guid?>("ViewItemId"); set => SetPropertyValue<Guid?>("ViewItemId", value); }
                [ODataProperty]
                public Boolean? IsSystemSite { get => GetPropertyValue<Boolean?>("IsSystemSite"); set => SetPropertyValue<Boolean?>("IsSystemSite", value); }
                [ODataProperty]
                public String? RootUrl { get => GetPropertyValue<String?>("RootUrl"); set => SetPropertyValue<String?>("RootUrl", value); }
                [ODataProperty]
                public String? Status { get => GetPropertyValue<String?>("Status"); set => SetPropertyValue<String?>("Status", value); }
                [ODataProperty]
                public String? Type { get => GetPropertyValue<String?>("Type"); set => SetPropertyValue<String?>("Type", value); }
                public async System.Threading.Tasks.Task StartAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Start"); }
                public async System.Threading.Tasks.Task StopAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Stop"); }
                public async System.Threading.Tasks.Task RestartAsync(DomainApiService service) { await this.InvokeActionAsync(service, "Restart"); }
            }
        }
        namespace External
        {
            [Entity(EntitySet = "Systems_External_PublicUsers", TableName = "Ext_Public_Users")]
            public partial class PublicUser: EntityResource
            {
                public PublicUser(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_External_PublicUsers";
                public const string EntityTableName = "Ext_Public_Users";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? AboutMeText { get => GetPropertyValue<String?>("AboutMeText"); set => SetPropertyValue<String?>("AboutMeText", value); }
                [ODataProperty]
                public String? Address { get => GetPropertyValue<String?>("Address"); set => SetPropertyValue<String?>("Address", value); }
                [ODataProperty]
                public String? AlternateEmail { get => GetPropertyValue<String?>("AlternateEmail"); set => SetPropertyValue<String?>("AlternateEmail", value); }
                [ODataProperty]
                public String? City { get => GetPropertyValue<String?>("City"); set => SetPropertyValue<String?>("City", value); }
                [ODataProperty]
                public String? CompanyName { get => GetPropertyValue<String?>("CompanyName"); set => SetPropertyValue<String?>("CompanyName", value); }
                [ODataProperty]
                public String? Country { get => GetPropertyValue<String?>("Country"); set => SetPropertyValue<String?>("Country", value); }
                [ODataProperty]
                public DateTime? CreatedOn { get => GetPropertyValue<DateTime?>("CreatedOn"); set => SetPropertyValue<DateTime?>("CreatedOn", value); }
                [ODataProperty]
                public String? Email { get => GetPropertyValue<String?>("Email"); set => SetPropertyValue<String?>("Email", value); }
                [ODataProperty]
                public String? FirstName { get => GetPropertyValue<String?>("FirstName"); set => SetPropertyValue<String?>("FirstName", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? LastName { get => GetPropertyValue<String?>("LastName"); set => SetPropertyValue<String?>("LastName", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? PasswordAlgorithm { get => GetPropertyValue<String?>("PasswordAlgorithm"); set => SetPropertyValue<String?>("PasswordAlgorithm", value); }
                [ODataProperty]
                public String? PasswordHash { get => GetPropertyValue<String?>("PasswordHash"); set => SetPropertyValue<String?>("PasswordHash", value); }
                [ODataProperty]
                public Guid? PasswordRecoveryCode { get => GetPropertyValue<Guid?>("PasswordRecoveryCode"); set => SetPropertyValue<Guid?>("PasswordRecoveryCode", value); }
                [ODataProperty]
                public DateTime? PasswordRecoveryCreationTime { get => GetPropertyValue<DateTime?>("PasswordRecoveryCreationTime"); set => SetPropertyValue<DateTime?>("PasswordRecoveryCreationTime", value); }
                [ODataProperty]
                public String? PhoneNumber { get => GetPropertyValue<String?>("PhoneNumber"); set => SetPropertyValue<String?>("PhoneNumber", value); }
                [ODataProperty]
                public String? PostalCode { get => GetPropertyValue<String?>("PostalCode"); set => SetPropertyValue<String?>("PostalCode", value); }
                [ODataProperty]
                public Byte[]? ProfilePicture { get => GetPropertyValue<Byte[]?>("ProfilePicture"); set => SetPropertyValue<Byte[]?>("ProfilePicture", value); }
                [ODataProperty]
                public String? State { get => GetPropertyValue<String?>("State"); set => SetPropertyValue<String?>("State", value); }
                [ODataProperty]
                public General.Contacts.Company? Company { get => GetPropertyValue<General.Contacts.Company>("Company"); set => SetPropertyValue<General.Contacts.Company>("Company", value); }
                [ODataProperty]
                public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
                [ODataProperty]
                public Systems.External.PublicUserList? PublicUserList { get => GetPropertyValue<Systems.External.PublicUserList>("PublicUserList"); set => SetPropertyValue<Systems.External.PublicUserList>("PublicUserList", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_External_PublicUserLists", TableName = "Ext_Public_User_Lists")]
            public partial class PublicUserList: EntityResource
            {
                public PublicUserList(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_External_PublicUserLists";
                public const string EntityTableName = "Ext_Public_User_Lists";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Reporting
        {
            [Entity(EntitySet = "Systems_Reporting_DataSources", TableName = "Sys_Data_Sources")]
            public partial class DataSource: EntityResource
            {
                public DataSource(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Reporting_DataSources";
                public const string EntityTableName = "Sys_Data_Sources";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? BaseQueryName { get => GetPropertyValue<String?>("BaseQueryName"); set => SetPropertyValue<String?>("BaseQueryName", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Systems.Reporting.DataSourcesRepository.DataSourceType? DataSourceType { get => GetPropertyValue<Systems.Reporting.DataSourcesRepository.DataSourceType?>("DataSourceType"); set => SetPropertyValue<Systems.Reporting.DataSourcesRepository.DataSourceType?>("DataSourceType", value); }
                [ODataProperty]
                public Boolean? ShowParentTables { get => GetPropertyValue<Boolean?>("ShowParentTables"); set => SetPropertyValue<Boolean?>("ShowParentTables", value); }
                [ODataProperty]
                public IEnumerable<Systems.Reporting.DataSourceQuery>? Queries { get => GetCollection<Systems.Reporting.DataSourceQuery>("Queries"); set => SetCollection<Systems.Reporting.DataSourceQuery>("Queries", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DataSourceQueriesRepository
            {
                public enum DependsOnChildRows
                {
                    NoChildRowDependency = 0,
                    TheRowIsVisibleIfThereIsAtLeastOneChildRow = 1,
                    TheRowIsVisibleIfAllSubTablesContainChildRows = 2
                }
            }
            [Entity(EntitySet = "Systems_Reporting_DataSourceQueries", TableName = "Sys_Data_Source_Queries")]
            public partial class DataSourceQuery: EntityResource
            {
                public DataSourceQuery(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Reporting_DataSourceQueries";
                public const string EntityTableName = "Sys_Data_Source_Queries";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Systems.Reporting.DataSourceQueriesRepository.DependsOnChildRows? DependsOnChildRows { get => GetPropertyValue<Systems.Reporting.DataSourceQueriesRepository.DependsOnChildRows?>("DependsOnChildRows"); set => SetPropertyValue<Systems.Reporting.DataSourceQueriesRepository.DependsOnChildRows?>("DependsOnChildRows", value); }
                [ODataProperty]
                public String? ExtensionsList { get => GetPropertyValue<String?>("ExtensionsList"); set => SetPropertyValue<String?>("ExtensionsList", value); }
                [ODataProperty]
                public String? FilterXml { get => GetPropertyValue<String?>("FilterXml"); set => SetPropertyValue<String?>("FilterXml", value); }
                [ODataProperty]
                public Boolean? FirstRow { get => GetPropertyValue<Boolean?>("FirstRow"); set => SetPropertyValue<Boolean?>("FirstRow", value); }
                [ODataProperty]
                public String? ReferencePath { get => GetPropertyValue<String?>("ReferencePath"); set => SetPropertyValue<String?>("ReferencePath", value); }
                [ODataProperty]
                public String? TableName { get => GetPropertyValue<String?>("TableName"); set => SetPropertyValue<String?>("TableName", value); }
                [ODataProperty]
                public String? UniqueName { get => GetPropertyValue<String?>("UniqueName"); set => SetPropertyValue<String?>("UniqueName", value); }
                [Owner]
                [ODataProperty]
                public Systems.Reporting.DataSource? DataSource { get => GetPropertyValue<Systems.Reporting.DataSource>("DataSource"); set => SetPropertyValue<Systems.Reporting.DataSource>("DataSource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DataSourcesRepository
            {
                public enum DataSourceType
                {
                    MultiTable = 0,
                    MasterDetail = 1,
                    SingleTable = 2
                }
            }
            [Entity(EntitySet = "Systems_Reporting_Reports", TableName = "Sys_Reports")]
            public partial class Report: EntityResource
            {
                public Report(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Reporting_Reports";
                public const string EntityTableName = "Sys_Reports";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? LayoutFormat { get => GetPropertyValue<String?>("LayoutFormat"); set => SetPropertyValue<String?>("LayoutFormat", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Boolean? OneRow { get => GetPropertyValue<Boolean?>("OneRow"); set => SetPropertyValue<Boolean?>("OneRow", value); }
                [ODataProperty]
                public String? QueryName { get => GetPropertyValue<String?>("QueryName"); set => SetPropertyValue<String?>("QueryName", value); }
                [ODataProperty]
                public Byte[]? ReportBinaryLayout { get => GetPropertyValue<Byte[]?>("ReportBinaryLayout"); set => SetPropertyValue<Byte[]?>("ReportBinaryLayout", value); }
                [ODataProperty]
                public String? ReportLayout { get => GetPropertyValue<String?>("ReportLayout"); set => SetPropertyValue<String?>("ReportLayout", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? TemplateFilterXml { get => GetPropertyValue<String?>("TemplateFilterXml"); set => SetPropertyValue<String?>("TemplateFilterXml", value); }
                [ODataProperty]
                public Int32? TemplatePriority { get => GetPropertyValue<Int32?>("TemplatePriority"); set => SetPropertyValue<Int32?>("TemplatePriority", value); }
                [ODataProperty]
                public Systems.Reporting.DataSource? DataSource { get => GetPropertyValue<Systems.Reporting.DataSource>("DataSource"); set => SetPropertyValue<Systems.Reporting.DataSource>("DataSource", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace Security
        {
            [Entity(EntitySet = "Systems_Security_AccessKeys", TableName = "Sec_Access_Keys")]
            public partial class AccessKey: EntityResource
            {
                public AccessKey(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_AccessKeys";
                public const string EntityTableName = "Sec_Access_Keys";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? Code { get => GetPropertyValue<String?>("Code"); set => SetPropertyValue<String?>("Code", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? EntityName { get => GetPropertyValue<String?>("EntityName"); set => SetPropertyValue<String?>("EntityName", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Security_ColumnPermissions", TableName = "Sec_Column_Permissions")]
            public partial class ColumnPermission: EntityResource
            {
                public ColumnPermission(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_ColumnPermissions";
                public const string EntityTableName = "Sec_Column_Permissions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ColumnName { get => GetPropertyValue<String?>("ColumnName"); set => SetPropertyValue<String?>("ColumnName", value); }
                [ODataProperty]
                public String? TableName { get => GetPropertyValue<String?>("TableName"); set => SetPropertyValue<String?>("TableName", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Security_Domains", TableName = "Sec_Domains")]
            public partial class Domain: EntityResource
            {
                public Domain(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_Domains";
                public const string EntityTableName = "Sec_Domains";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? AllowLocalAccounts { get => GetPropertyValue<Boolean?>("AllowLocalAccounts"); set => SetPropertyValue<Boolean?>("AllowLocalAccounts", value); }
                [ODataProperty]
                public MultilanguageString? Description { get => GetPropertyValue<MultilanguageString?>("Description"); set => SetPropertyValue<MultilanguageString?>("Description", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Boolean? IsDefault { get => GetPropertyValue<Boolean?>("IsDefault"); set => SetPropertyValue<Boolean?>("IsDefault", value); }
                [ODataProperty]
                public IEnumerable<Systems.Security.DomainProvider>? Providers { get => GetCollection<Systems.Security.DomainProvider>("Providers"); set => SetCollection<Systems.Security.DomainProvider>("Providers", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Security_DomainProviders", TableName = "Sec_Domain_Providers")]
            public partial class DomainProvider: EntityResource
            {
                public DomainProvider(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_DomainProviders";
                public const string EntityTableName = "Sec_Domain_Providers";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ClientID { get => GetPropertyValue<String?>("ClientID"); set => SetPropertyValue<String?>("ClientID", value); }
                [ODataProperty]
                public String? ClientSecret { get => GetPropertyValue<String?>("ClientSecret"); set => SetPropertyValue<String?>("ClientSecret", value); }
                [ODataProperty]
                public MultilanguageString? DisplayName { get => GetPropertyValue<MultilanguageString?>("DisplayName"); set => SetPropertyValue<MultilanguageString?>("DisplayName", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Systems.Security.DomainProvidersRepository.ProviderName? ProviderName { get => GetPropertyValue<Systems.Security.DomainProvidersRepository.ProviderName?>("ProviderName"); set => SetPropertyValue<Systems.Security.DomainProvidersRepository.ProviderName?>("ProviderName", value); }
                [ODataProperty]
                public String? TenantID { get => GetPropertyValue<String?>("TenantID"); set => SetPropertyValue<String?>("TenantID", value); }
                [Owner]
                [ODataProperty]
                public Systems.Security.Domain? Domain { get => GetPropertyValue<Systems.Security.Domain>("Domain"); set => SetPropertyValue<Systems.Security.Domain>("Domain", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace DomainProvidersRepository
            {
                public enum ProviderName
                {
                    ERPNET = 0,
                    AZUREAD = 1,
                    GOOGLE = 2,
                    FACEBOOK = 3
                }
            }
            [Entity(EntitySet = "Systems_Security_Groups", TableName = "Sec_Groups")]
            public partial class Group: EntityResource
            {
                public Group(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_Groups";
                public const string EntityTableName = "Sec_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? EditPeriodDays { get => GetPropertyValue<Int32?>("EditPeriodDays"); set => SetPropertyValue<Int32?>("EditPeriodDays", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Systems.Security.GroupsRepository.GroupType? GroupType { get => GetPropertyValue<Systems.Security.GroupsRepository.GroupType?>("GroupType"); set => SetPropertyValue<Systems.Security.GroupsRepository.GroupType?>("GroupType", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public Systems.Security.User? GroupForUser { get => GetPropertyValue<Systems.Security.User>("GroupForUser"); set => SetPropertyValue<Systems.Security.User>("GroupForUser", value); }
                [ODataProperty]
                public IEnumerable<Systems.Security.GroupAccessKey>? AccessKeys { get => GetCollection<Systems.Security.GroupAccessKey>("AccessKeys"); set => SetCollection<Systems.Security.GroupAccessKey>("AccessKeys", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Security_GroupAccessKeys", TableName = "Sec_Group_Access_Keys")]
            public partial class GroupAccessKey: EntityResource
            {
                public GroupAccessKey(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_GroupAccessKeys";
                public const string EntityTableName = "Sec_Group_Access_Keys";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? CanAdminister { get => GetPropertyValue<Boolean?>("CanAdminister"); set => SetPropertyValue<Boolean?>("CanAdminister", value); }
                [ODataProperty]
                public Boolean? CanDelete { get => GetPropertyValue<Boolean?>("CanDelete"); set => SetPropertyValue<Boolean?>("CanDelete", value); }
                [ODataProperty]
                public Boolean? CanUpdate { get => GetPropertyValue<Boolean?>("CanUpdate"); set => SetPropertyValue<Boolean?>("CanUpdate", value); }
                [ODataProperty]
                public Boolean? Permission1 { get => GetPropertyValue<Boolean?>("Permission1"); set => SetPropertyValue<Boolean?>("Permission1", value); }
                [ODataProperty]
                public Boolean? Permission10 { get => GetPropertyValue<Boolean?>("Permission10"); set => SetPropertyValue<Boolean?>("Permission10", value); }
                [ODataProperty]
                public Boolean? Permission2 { get => GetPropertyValue<Boolean?>("Permission2"); set => SetPropertyValue<Boolean?>("Permission2", value); }
                [ODataProperty]
                public Boolean? Permission3 { get => GetPropertyValue<Boolean?>("Permission3"); set => SetPropertyValue<Boolean?>("Permission3", value); }
                [ODataProperty]
                public Boolean? Permission4 { get => GetPropertyValue<Boolean?>("Permission4"); set => SetPropertyValue<Boolean?>("Permission4", value); }
                [ODataProperty]
                public Boolean? Permission5 { get => GetPropertyValue<Boolean?>("Permission5"); set => SetPropertyValue<Boolean?>("Permission5", value); }
                [ODataProperty]
                public Boolean? Permission6 { get => GetPropertyValue<Boolean?>("Permission6"); set => SetPropertyValue<Boolean?>("Permission6", value); }
                [ODataProperty]
                public Boolean? Permission7 { get => GetPropertyValue<Boolean?>("Permission7"); set => SetPropertyValue<Boolean?>("Permission7", value); }
                [ODataProperty]
                public Boolean? Permission8 { get => GetPropertyValue<Boolean?>("Permission8"); set => SetPropertyValue<Boolean?>("Permission8", value); }
                [ODataProperty]
                public Boolean? Permission9 { get => GetPropertyValue<Boolean?>("Permission9"); set => SetPropertyValue<Boolean?>("Permission9", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                [Owner]
                [ODataProperty]
                public Systems.Security.Group? Group { get => GetPropertyValue<Systems.Security.Group>("Group"); set => SetPropertyValue<Systems.Security.Group>("Group", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace GroupsRepository
            {
                public enum GroupType
                {
                    NormalUserDefinableGroup = 0,
                    SystemGroupForOneUser = 1,
                    Administrators = 2,
                    Everybody = 3
                }
            }
            [Entity(EntitySet = "Systems_Security_Roles", TableName = "Wf_Roles")]
            public partial class Role: EntityResource
            {
                public Role(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_Roles";
                public const string EntityTableName = "Wf_Roles";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsActive { get => GetPropertyValue<Boolean?>("IsActive"); set => SetPropertyValue<Boolean?>("IsActive", value); }
                [ODataProperty]
                public String? RoleDescription { get => GetPropertyValue<String?>("RoleDescription"); set => SetPropertyValue<String?>("RoleDescription", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public String? VisualStyle { get => GetPropertyValue<String?>("VisualStyle"); set => SetPropertyValue<String?>("VisualStyle", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            public partial class SecurityPermissions: ComplexTypeResource
            {
                public SecurityPermissions(IDictionary<string, object?>? rawData = null): base(rawData) {}
                [ODataProperty]
                public Boolean? IsSecured { get => GetPropertyValue<Boolean?>("IsSecured"); set => SetPropertyValue<Boolean?>("IsSecured", value); }
                [ODataProperty]
                public Boolean? CanUpdate { get => GetPropertyValue<Boolean?>("CanUpdate"); set => SetPropertyValue<Boolean?>("CanUpdate", value); }
                [ODataProperty]
                public Boolean? CanDelete { get => GetPropertyValue<Boolean?>("CanDelete"); set => SetPropertyValue<Boolean?>("CanDelete", value); }
                [ODataProperty]
                public Boolean? Permission1 { get => GetPropertyValue<Boolean?>("Permission1"); set => SetPropertyValue<Boolean?>("Permission1", value); }
                [ODataProperty]
                public Boolean? Permission2 { get => GetPropertyValue<Boolean?>("Permission2"); set => SetPropertyValue<Boolean?>("Permission2", value); }
                [ODataProperty]
                public Boolean? Permission3 { get => GetPropertyValue<Boolean?>("Permission3"); set => SetPropertyValue<Boolean?>("Permission3", value); }
                [ODataProperty]
                public Boolean? Permission4 { get => GetPropertyValue<Boolean?>("Permission4"); set => SetPropertyValue<Boolean?>("Permission4", value); }
                [ODataProperty]
                public Boolean? Permission5 { get => GetPropertyValue<Boolean?>("Permission5"); set => SetPropertyValue<Boolean?>("Permission5", value); }
                [ODataProperty]
                public Boolean? Permission6 { get => GetPropertyValue<Boolean?>("Permission6"); set => SetPropertyValue<Boolean?>("Permission6", value); }
                [ODataProperty]
                public Boolean? Permission7 { get => GetPropertyValue<Boolean?>("Permission7"); set => SetPropertyValue<Boolean?>("Permission7", value); }
                [ODataProperty]
                public Boolean? Permission8 { get => GetPropertyValue<Boolean?>("Permission8"); set => SetPropertyValue<Boolean?>("Permission8", value); }
                [ODataProperty]
                public Boolean? Permission9 { get => GetPropertyValue<Boolean?>("Permission9"); set => SetPropertyValue<Boolean?>("Permission9", value); }
                [ODataProperty]
                public Boolean? Permission10 { get => GetPropertyValue<Boolean?>("Permission10"); set => SetPropertyValue<Boolean?>("Permission10", value); }
                [ODataProperty]
                public Boolean? CanAdminister { get => GetPropertyValue<Boolean?>("CanAdminister"); set => SetPropertyValue<Boolean?>("CanAdminister", value); }
            }
            [Entity(EntitySet = "Systems_Security_TrustedApplications", TableName = "Sec_Trusted_Applications")]
            public partial class TrustedApplication: EntityResource
            {
                public TrustedApplication(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_TrustedApplications";
                public const string EntityTableName = "Sec_Trusted_Applications";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ApplicationSecretHash { get => GetPropertyValue<String?>("ApplicationSecretHash"); set => SetPropertyValue<String?>("ApplicationSecretHash", value); }
                [ODataProperty]
                public String? ApplicationUri { get => GetPropertyValue<String?>("ApplicationUri"); set => SetPropertyValue<String?>("ApplicationUri", value); }
                [ODataProperty]
                public Boolean? BasicAuthenticationAllowed { get => GetPropertyValue<Boolean?>("BasicAuthenticationAllowed"); set => SetPropertyValue<Boolean?>("BasicAuthenticationAllowed", value); }
                [ODataProperty]
                public Systems.Security.TrustedApplicationsRepository.ClientType? ClientType { get => GetPropertyValue<Systems.Security.TrustedApplicationsRepository.ClientType?>("ClientType"); set => SetPropertyValue<Systems.Security.TrustedApplicationsRepository.ClientType?>("ClientType", value); }
                [ODataProperty]
                public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
                [ODataProperty]
                public Boolean? ImpersonateAsCommunityUserAllowed { get => GetPropertyValue<Boolean?>("ImpersonateAsCommunityUserAllowed"); set => SetPropertyValue<Boolean?>("ImpersonateAsCommunityUserAllowed", value); }
                [ODataProperty]
                public Boolean? ImpersonateAsInternalUserAllowed { get => GetPropertyValue<Boolean?>("ImpersonateAsInternalUserAllowed"); set => SetPropertyValue<Boolean?>("ImpersonateAsInternalUserAllowed", value); }
                [ODataProperty]
                public String? ImpersonateLoginUrl { get => GetPropertyValue<String?>("ImpersonateLoginUrl"); set => SetPropertyValue<String?>("ImpersonateLoginUrl", value); }
                [ODataProperty]
                public String? ImpersonateLogoutUrl { get => GetPropertyValue<String?>("ImpersonateLogoutUrl"); set => SetPropertyValue<String?>("ImpersonateLogoutUrl", value); }
                [ODataProperty]
                public Boolean? IsEnabled { get => GetPropertyValue<Boolean?>("IsEnabled"); set => SetPropertyValue<Boolean?>("IsEnabled", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Scope { get => GetPropertyValue<String?>("Scope"); set => SetPropertyValue<String?>("Scope", value); }
                [ODataProperty]
                public Boolean? SystemUserAllowed { get => GetPropertyValue<Boolean?>("SystemUserAllowed"); set => SetPropertyValue<Boolean?>("SystemUserAllowed", value); }
                [ODataProperty]
                public String? SystemUserLoginUrl { get => GetPropertyValue<String?>("SystemUserLoginUrl"); set => SetPropertyValue<String?>("SystemUserLoginUrl", value); }
                [ODataProperty]
                public String? Name { get => GetPropertyValue<String?>("Name"); set => SetPropertyValue<String?>("Name", value); }
                [ODataProperty]
                public Systems.Security.User? SystemUser { get => GetPropertyValue<Systems.Security.User>("SystemUser"); set => SetPropertyValue<Systems.Security.User>("SystemUser", value); }
                [ODataProperty]
                public IEnumerable<Systems.Security.TrustedApplicationAuthorization>? Authorizations { get => GetCollection<Systems.Security.TrustedApplicationAuthorization>("Authorizations"); set => SetCollection<Systems.Security.TrustedApplicationAuthorization>("Authorizations", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Security_TrustedApplicationAuthorizations", TableName = "Sec_Trusted_Application_Authorizations")]
            public partial class TrustedApplicationAuthorization: EntityResource
            {
                public TrustedApplicationAuthorization(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_TrustedApplicationAuthorizations";
                public const string EntityTableName = "Sec_Trusted_Application_Authorizations";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? GrantTimeUtc { get => GetPropertyValue<DateTime?>("GrantTimeUtc"); set => SetPropertyValue<DateTime?>("GrantTimeUtc", value); }
                [ODataProperty]
                public Boolean? IsRevoked { get => GetPropertyValue<Boolean?>("IsRevoked"); set => SetPropertyValue<Boolean?>("IsRevoked", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public DateTime? ValidFromUtc { get => GetPropertyValue<DateTime?>("ValidFromUtc"); set => SetPropertyValue<DateTime?>("ValidFromUtc", value); }
                [ODataProperty]
                public DateTime? ValidUntilUtc { get => GetPropertyValue<DateTime?>("ValidUntilUtc"); set => SetPropertyValue<DateTime?>("ValidUntilUtc", value); }
                [ODataProperty]
                public Systems.Security.User? ContextUser { get => GetPropertyValue<Systems.Security.User>("ContextUser"); set => SetPropertyValue<Systems.Security.User>("ContextUser", value); }
                [ODataProperty]
                public Systems.Security.User? GrantingUser { get => GetPropertyValue<Systems.Security.User>("GrantingUser"); set => SetPropertyValue<Systems.Security.User>("GrantingUser", value); }
                [Owner]
                [ODataProperty]
                public Systems.Security.TrustedApplication? TrustedApplication { get => GetPropertyValue<Systems.Security.TrustedApplication>("TrustedApplication"); set => SetPropertyValue<Systems.Security.TrustedApplication>("TrustedApplication", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace TrustedApplicationsRepository
            {
                public enum ClientType
                {
                    Confidential = 0,
                    Public = 1
                }
            }
            [Entity(EntitySet = "Systems_Security_Users", TableName = "Sec_Users")]
            public partial class User: EntityResource
            {
                public User(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_Users";
                public const string EntityTableName = "Sec_Users";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Int32? AccessFailedCount { get => GetPropertyValue<Int32?>("AccessFailedCount"); set => SetPropertyValue<Int32?>("AccessFailedCount", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public Boolean? BasicAuthenticationAllowed { get => GetPropertyValue<Boolean?>("BasicAuthenticationAllowed"); set => SetPropertyValue<Boolean?>("BasicAuthenticationAllowed", value); }
                [ODataProperty]
                public String? CompanyName { get => GetPropertyValue<String?>("CompanyName"); set => SetPropertyValue<String?>("CompanyName", value); }
                [ODataProperty]
                public DateTime? CreationTimeUtc { get => GetPropertyValue<DateTime?>("CreationTimeUtc"); set => SetPropertyValue<DateTime?>("CreationTimeUtc", value); }
                [ODataProperty]
                public String? DefaultCulture { get => GetPropertyValue<String?>("DefaultCulture"); set => SetPropertyValue<String?>("DefaultCulture", value); }
                [ODataProperty]
                public String? Email { get => GetPropertyValue<String?>("Email"); set => SetPropertyValue<String?>("Email", value); }
                [ODataProperty]
                public Boolean? EmailConfirmed { get => GetPropertyValue<Boolean?>("EmailConfirmed"); set => SetPropertyValue<Boolean?>("EmailConfirmed", value); }
                [ODataProperty]
                public Boolean? IsAdmin { get => GetPropertyValue<Boolean?>("IsAdmin"); set => SetPropertyValue<Boolean?>("IsAdmin", value); }
                [ODataProperty]
                public DateTime? LockoutEndUtc { get => GetPropertyValue<DateTime?>("LockoutEndUtc"); set => SetPropertyValue<DateTime?>("LockoutEndUtc", value); }
                [ODataProperty]
                public String? Login { get => GetPropertyValue<String?>("Login"); set => SetPropertyValue<String?>("Login", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public String? Password { get => GetPropertyValue<String?>("Password"); set => SetPropertyValue<String?>("Password", value); }
                [ODataProperty]
                public Systems.Security.UsersRepository.PasswordFormat? PasswordFormat { get => GetPropertyValue<Systems.Security.UsersRepository.PasswordFormat?>("PasswordFormat"); set => SetPropertyValue<Systems.Security.UsersRepository.PasswordFormat?>("PasswordFormat", value); }
                [ODataProperty]
                public String? PhoneNumber { get => GetPropertyValue<String?>("PhoneNumber"); set => SetPropertyValue<String?>("PhoneNumber", value); }
                [ODataProperty]
                public Boolean? PhoneNumberConfirmed { get => GetPropertyValue<Boolean?>("PhoneNumberConfirmed"); set => SetPropertyValue<Boolean?>("PhoneNumberConfirmed", value); }
                [ODataProperty]
                public String? RegistrationMessage { get => GetPropertyValue<String?>("RegistrationMessage"); set => SetPropertyValue<String?>("RegistrationMessage", value); }
                [ODataProperty]
                public Boolean? TwoFactorEnabled { get => GetPropertyValue<Boolean?>("TwoFactorEnabled"); set => SetPropertyValue<Boolean?>("TwoFactorEnabled", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public Systems.Security.UsersRepository.UserType? UserType { get => GetPropertyValue<Systems.Security.UsersRepository.UserType?>("UserType"); set => SetPropertyValue<Systems.Security.UsersRepository.UserType?>("UserType", value); }
                [ODataProperty]
                public String? VoiceExtensionNumbers { get => GetPropertyValue<String?>("VoiceExtensionNumbers"); set => SetPropertyValue<String?>("VoiceExtensionNumbers", value); }
                [ODataProperty]
                public String? WindowsUserName { get => GetPropertyValue<String?>("WindowsUserName"); set => SetPropertyValue<String?>("WindowsUserName", value); }
                [ODataProperty]
                public Systems.Security.Domain? Domain { get => GetPropertyValue<Systems.Security.Domain>("Domain"); set => SetPropertyValue<Systems.Security.Domain>("Domain", value); }
                [ODataProperty]
                public General.Contacts.Person? Person { get => GetPropertyValue<General.Contacts.Person>("Person"); set => SetPropertyValue<General.Contacts.Person>("Person", value); }
                [ODataProperty]
                public IEnumerable<Systems.Security.UserAccessKey>? AccessKeys { get => GetCollection<Systems.Security.UserAccessKey>("AccessKeys"); set => SetCollection<Systems.Security.UserAccessKey>("AccessKeys", value); }
                [ODataProperty]
                public IEnumerable<Systems.Security.UserGroup>? Groups { get => GetCollection<Systems.Security.UserGroup>("Groups"); set => SetCollection<Systems.Security.UserGroup>("Groups", value); }
                [ODataProperty]
                public IEnumerable<Systems.Security.UserProviderLogin>? ProviderLogins { get => GetCollection<Systems.Security.UserProviderLogin>("ProviderLogins"); set => SetCollection<Systems.Security.UserProviderLogin>("ProviderLogins", value); }
                [ODataProperty]
                public IEnumerable<Systems.Security.UserProviderToken>? ProviderTokens { get => GetCollection<Systems.Security.UserProviderToken>("ProviderTokens"); set => SetCollection<Systems.Security.UserProviderToken>("ProviderTokens", value); }
                [ODataProperty]
                public IEnumerable<Systems.Workflow.RoleUser>? RoleUsers { get => GetCollection<Systems.Workflow.RoleUser>("RoleUsers"); set => SetCollection<Systems.Workflow.RoleUser>("RoleUsers", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Security_UserAccessKeys", TableName = "Sec_User_Access_Keys")]
            public partial class UserAccessKey: EntityResource
            {
                public UserAccessKey(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_UserAccessKeys";
                public const string EntityTableName = "Sec_User_Access_Keys";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? CanDelete { get => GetPropertyValue<Boolean?>("CanDelete"); set => SetPropertyValue<Boolean?>("CanDelete", value); }
                [ODataProperty]
                public Boolean? CanUpdate { get => GetPropertyValue<Boolean?>("CanUpdate"); set => SetPropertyValue<Boolean?>("CanUpdate", value); }
                [ODataProperty]
                public Boolean? Permission1 { get => GetPropertyValue<Boolean?>("Permission1"); set => SetPropertyValue<Boolean?>("Permission1", value); }
                [ODataProperty]
                public Boolean? Permission10 { get => GetPropertyValue<Boolean?>("Permission10"); set => SetPropertyValue<Boolean?>("Permission10", value); }
                [ODataProperty]
                public Boolean? Permission2 { get => GetPropertyValue<Boolean?>("Permission2"); set => SetPropertyValue<Boolean?>("Permission2", value); }
                [ODataProperty]
                public Boolean? Permission3 { get => GetPropertyValue<Boolean?>("Permission3"); set => SetPropertyValue<Boolean?>("Permission3", value); }
                [ODataProperty]
                public Boolean? Permission4 { get => GetPropertyValue<Boolean?>("Permission4"); set => SetPropertyValue<Boolean?>("Permission4", value); }
                [ODataProperty]
                public Boolean? Permission5 { get => GetPropertyValue<Boolean?>("Permission5"); set => SetPropertyValue<Boolean?>("Permission5", value); }
                [ODataProperty]
                public Boolean? Permission6 { get => GetPropertyValue<Boolean?>("Permission6"); set => SetPropertyValue<Boolean?>("Permission6", value); }
                [ODataProperty]
                public Boolean? Permission7 { get => GetPropertyValue<Boolean?>("Permission7"); set => SetPropertyValue<Boolean?>("Permission7", value); }
                [ODataProperty]
                public Boolean? Permission8 { get => GetPropertyValue<Boolean?>("Permission8"); set => SetPropertyValue<Boolean?>("Permission8", value); }
                [ODataProperty]
                public Boolean? Permission9 { get => GetPropertyValue<Boolean?>("Permission9"); set => SetPropertyValue<Boolean?>("Permission9", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                [Owner]
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Security_UserGroups", TableName = "Sec_User_Groups")]
            public partial class UserGroup: EntityResource
            {
                public UserGroup(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_UserGroups";
                public const string EntityTableName = "Sec_User_Groups";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Systems.Security.Group? Group { get => GetPropertyValue<Systems.Security.Group>("Group"); set => SetPropertyValue<Systems.Security.Group>("Group", value); }
                [Owner]
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Security_UserProviderLogins", TableName = "Sec_User_Provider_Logins")]
            public partial class UserProviderLogin: EntityResource
            {
                public UserProviderLogin(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_UserProviderLogins";
                public const string EntityTableName = "Sec_User_Provider_Logins";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ProviderKey { get => GetPropertyValue<String?>("ProviderKey"); set => SetPropertyValue<String?>("ProviderKey", value); }
                [ODataProperty]
                public Systems.Security.DomainProvidersRepository.ProviderName? ProviderName { get => GetPropertyValue<Systems.Security.DomainProvidersRepository.ProviderName?>("ProviderName"); set => SetPropertyValue<Systems.Security.DomainProvidersRepository.ProviderName?>("ProviderName", value); }
                [Owner]
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Security_UserProviderTokens", TableName = "Sec_User_Provider_Tokens")]
            public partial class UserProviderToken: EntityResource
            {
                public UserProviderToken(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_UserProviderTokens";
                public const string EntityTableName = "Sec_User_Provider_Tokens";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? LoginProviderName { get => GetPropertyValue<String?>("LoginProviderName"); set => SetPropertyValue<String?>("LoginProviderName", value); }
                [ODataProperty]
                public String? TokenName { get => GetPropertyValue<String?>("TokenName"); set => SetPropertyValue<String?>("TokenName", value); }
                [ODataProperty]
                public String? TokenValue { get => GetPropertyValue<String?>("TokenValue"); set => SetPropertyValue<String?>("TokenValue", value); }
                [Owner]
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace UsersRepository
            {
                public enum PasswordFormat
                {
                    MD5 = 0,
                    AspNetCoreV3 = 1
                }
                public enum UserType
                {
                    InternalUser = 0,
                    ExternalCommunityUser = 1,
                    VirtualUserNoLogin = 2,
                    SystemUserNoLogin = 3,
                    ApplicationUserNoLogin = 4
                }
            }
            [Entity(EntitySet = "Systems_Security_VisualPermissions", TableName = "Sec_Visual_Permissions")]
            public partial class VisualPermission: EntityResource
            {
                public VisualPermission(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Security_VisualPermissions";
                public const string EntityTableName = "Sec_Visual_Permissions";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ApplicationName { get => GetPropertyValue<String?>("ApplicationName"); set => SetPropertyValue<String?>("ApplicationName", value); }
                [ODataProperty]
                public String? ElementName { get => GetPropertyValue<String?>("ElementName"); set => SetPropertyValue<String?>("ElementName", value); }
                [ODataProperty]
                public String? FormName { get => GetPropertyValue<String?>("FormName"); set => SetPropertyValue<String?>("FormName", value); }
                [ODataProperty]
                public String? OperationName { get => GetPropertyValue<String?>("OperationName"); set => SetPropertyValue<String?>("OperationName", value); }
                [ODataProperty]
                public String? PanelName { get => GetPropertyValue<String?>("PanelName"); set => SetPropertyValue<String?>("PanelName", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
        }
        namespace UI
        {
            [Entity(EntitySet = "Systems_UI_FormLayouts", TableName = "Sys_Form_Layouts")]
            public partial class FormLayout: EntityResource
            {
                public FormLayout(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_UI_FormLayouts";
                public const string EntityTableName = "Sys_Form_Layouts";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public String? ApplicationName { get => GetPropertyValue<String?>("ApplicationName"); set => SetPropertyValue<String?>("ApplicationName", value); }
                [ODataProperty]
                public String? Category { get => GetPropertyValue<String?>("Category"); set => SetPropertyValue<String?>("Category", value); }
                [ODataProperty]
                public String? FormName { get => GetPropertyValue<String?>("FormName"); set => SetPropertyValue<String?>("FormName", value); }
                [ODataProperty]
                public Byte[]? Layout { get => GetPropertyValue<Byte[]?>("Layout"); set => SetPropertyValue<Byte[]?>("Layout", value); }
                [ODataProperty]
                public Systems.UI.FormLayoutsRepository.LayoutFormat? LayoutFormat { get => GetPropertyValue<Systems.UI.FormLayoutsRepository.LayoutFormat?>("LayoutFormat"); set => SetPropertyValue<Systems.UI.FormLayoutsRepository.LayoutFormat?>("LayoutFormat", value); }
                [ODataProperty]
                public String? LayoutName { get => GetPropertyValue<String?>("LayoutName"); set => SetPropertyValue<String?>("LayoutName", value); }
                [ODataProperty]
                public String? LayoutXml { get => GetPropertyValue<String?>("LayoutXml"); set => SetPropertyValue<String?>("LayoutXml", value); }
                [ODataProperty]
                public String? MachineName { get => GetPropertyValue<String?>("MachineName"); set => SetPropertyValue<String?>("MachineName", value); }
                [ODataProperty]
                public String? PanelName { get => GetPropertyValue<String?>("PanelName"); set => SetPropertyValue<String?>("PanelName", value); }
                [ODataProperty]
                public String? UserName { get => GetPropertyValue<String?>("UserName"); set => SetPropertyValue<String?>("UserName", value); }
                [ODataProperty]
                public Systems.Security.AccessKey? AccessKey { get => GetPropertyValue<Systems.Security.AccessKey>("AccessKey"); set => SetPropertyValue<Systems.Security.AccessKey>("AccessKey", value); }
                [ODataProperty]
                public Systems.Security.Role? Role { get => GetPropertyValue<Systems.Security.Role>("Role"); set => SetPropertyValue<Systems.Security.Role>("Role", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace FormLayoutsRepository
            {
                public enum LayoutFormat
                {
                    CompressedDeflate = 0,
                    CompressedLZO = 1,
                    Uncompressed = 2
                }
            }
        }
        namespace Workflow
        {
            [Entity(EntitySet = "Systems_Workflow_Processes", TableName = "Wf_Processes")]
            public partial class Process: EntityResource
            {
                public Process(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Workflow_Processes";
                public const string EntityTableName = "Wf_Processes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? CreationTime { get => GetPropertyValue<DateTime?>("CreationTime"); set => SetPropertyValue<DateTime?>("CreationTime", value); }
                [ODataProperty]
                public String? CreationUser { get => GetPropertyValue<String?>("CreationUser"); set => SetPropertyValue<String?>("CreationUser", value); }
                [ODataProperty]
                public Boolean? IsLandscape { get => GetPropertyValue<Boolean?>("IsLandscape"); set => SetPropertyValue<Boolean?>("IsLandscape", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public MultilanguageString? Name { get => GetPropertyValue<MultilanguageString?>("Name"); set => SetPropertyValue<MultilanguageString?>("Name", value); }
                [ODataProperty]
                public String? SchemaFormat { get => GetPropertyValue<String?>("SchemaFormat"); set => SetPropertyValue<String?>("SchemaFormat", value); }
                [ODataProperty]
                public String? SchemaLayout { get => GetPropertyValue<String?>("SchemaLayout"); set => SetPropertyValue<String?>("SchemaLayout", value); }
                [ODataProperty]
                public String? StartEvent { get => GetPropertyValue<String?>("StartEvent"); set => SetPropertyValue<String?>("StartEvent", value); }
                [ODataProperty]
                public Guid? StartRoleId { get => GetPropertyValue<Guid?>("StartRoleId"); set => SetPropertyValue<Guid?>("StartRoleId", value); }
                [ODataProperty]
                public Byte[]? Thumbnail { get => GetPropertyValue<Byte[]?>("Thumbnail"); set => SetPropertyValue<Byte[]?>("Thumbnail", value); }
                [ODataProperty]
                public DateTime? UpdateTime { get => GetPropertyValue<DateTime?>("UpdateTime"); set => SetPropertyValue<DateTime?>("UpdateTime", value); }
                [ODataProperty]
                public String? UpdateUser { get => GetPropertyValue<String?>("UpdateUser"); set => SetPropertyValue<String?>("UpdateUser", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Workflow_RoleUsers", TableName = "Wf_Role_Users")]
            public partial class RoleUser: EntityResource
            {
                public RoleUser(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Workflow_RoleUsers";
                public const string EntityTableName = "Wf_Role_Users";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public Boolean? IsLayoutAdmin { get => GetPropertyValue<Boolean?>("IsLayoutAdmin"); set => SetPropertyValue<Boolean?>("IsLayoutAdmin", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? CompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("CompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("CompanyLocation", value); }
                [ODataProperty]
                public General.EnterpriseCompany? EnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("EnterpriseCompany", value); }
                [ODataProperty]
                public Systems.Security.Role? Role { get => GetPropertyValue<Systems.Security.Role>("Role"); set => SetPropertyValue<Systems.Security.Role>("Role", value); }
                [Owner]
                [ODataProperty]
                public Systems.Security.User? User { get => GetPropertyValue<Systems.Security.User>("User"); set => SetPropertyValue<Systems.Security.User>("User", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            [Entity(EntitySet = "Systems_Workflow_Routes", TableName = "Wf_Routes")]
            public partial class Route: EntityResource
            {
                public Route(IDictionary<string, object?>? rawData = null): base(rawData) {}
                public const string EntitySetName = "Systems_Workflow_Routes";
                public const string EntityTableName = "Wf_Routes";
                [ODataProperty]
                public Int32? ObjectVersion { get => GetPropertyValue<Int32?>("ObjectVersion"); set => SetPropertyValue<Int32?>("ObjectVersion", value); }
                [ODataProperty]
                public String? DisplayText { get => GetPropertyValue<String?>("DisplayText"); set => SetPropertyValue<String?>("DisplayText", value); }
                [ODataProperty]
                public DateTime? ActivationDate { get => GetPropertyValue<DateTime?>("ActivationDate"); set => SetPropertyValue<DateTime?>("ActivationDate", value); }
                [ODataProperty]
                public Boolean? Active { get => GetPropertyValue<Boolean?>("Active"); set => SetPropertyValue<Boolean?>("Active", value); }
                [ODataProperty]
                public Boolean? AllowObsoleteGeneration { get => GetPropertyValue<Boolean?>("AllowObsoleteGeneration"); set => SetPropertyValue<Boolean?>("AllowObsoleteGeneration", value); }
                [ODataProperty]
                public Systems.Workflow.RoutesRepository.AllowedGenerationTypes? AllowedGenerationTypes { get => GetPropertyValue<Systems.Workflow.RoutesRepository.AllowedGenerationTypes?>("AllowedGenerationTypes"); set => SetPropertyValue<Systems.Workflow.RoutesRepository.AllowedGenerationTypes?>("AllowedGenerationTypes", value); }
                [ODataProperty]
                public String? ConditionFilterXML { get => GetPropertyValue<String?>("ConditionFilterXML"); set => SetPropertyValue<String?>("ConditionFilterXML", value); }
                [ODataProperty]
                public General.DocumentStateFlags? ConditionStatesBitMask { get => GetPropertyValue<General.DocumentStateFlags?>("ConditionStatesBitMask"); set => SetPropertyValue<General.DocumentStateFlags?>("ConditionStatesBitMask", value); }
                [ODataProperty]
                public Systems.Workflow.RoutesRepository.ConnectedPartyCondition? ConnectedPartyCondition { get => GetPropertyValue<Systems.Workflow.RoutesRepository.ConnectedPartyCondition?>("ConnectedPartyCondition"); set => SetPropertyValue<Systems.Workflow.RoutesRepository.ConnectedPartyCondition?>("ConnectedPartyCondition", value); }
                [ODataProperty]
                public DateTime? DeactivationDate { get => GetPropertyValue<DateTime?>("DeactivationDate"); set => SetPropertyValue<DateTime?>("DeactivationDate", value); }
                [ODataProperty]
                public General.DocumentState? DestinationState { get => GetPropertyValue<General.DocumentState?>("DestinationState"); set => SetPropertyValue<General.DocumentState?>("DestinationState", value); }
                [ODataProperty]
                public String? NegativeConditionFilterXml { get => GetPropertyValue<String?>("NegativeConditionFilterXml"); set => SetPropertyValue<String?>("NegativeConditionFilterXml", value); }
                [ODataProperty]
                public String? Notes { get => GetPropertyValue<String?>("Notes"); set => SetPropertyValue<String?>("Notes", value); }
                [ODataProperty]
                public General.ParentDocumentRelationshipType? ParentDocumentRelationshipType { get => GetPropertyValue<General.ParentDocumentRelationshipType?>("ParentDocumentRelationshipType"); set => SetPropertyValue<General.ParentDocumentRelationshipType?>("ParentDocumentRelationshipType", value); }
                [ODataProperty]
                public String? ProcedureName { get => GetPropertyValue<String?>("ProcedureName"); set => SetPropertyValue<String?>("ProcedureName", value); }
                [ODataProperty]
                public String? ProcessEvent { get => GetPropertyValue<String?>("ProcessEvent"); set => SetPropertyValue<String?>("ProcessEvent", value); }
                [ODataProperty]
                public Boolean? ReadOnly { get => GetPropertyValue<Boolean?>("ReadOnly"); set => SetPropertyValue<Boolean?>("ReadOnly", value); }
                [ODataProperty]
                public String? SchemaXML { get => GetPropertyValue<String?>("SchemaXML"); set => SetPropertyValue<String?>("SchemaXML", value); }
                [ODataProperty]
                public General.EnterpriseCompany? ConditionEnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("ConditionEnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("ConditionEnterpriseCompany", value); }
                [ODataProperty]
                public General.DocumentTypeUserStatus? ConditionUserStatus { get => GetPropertyValue<General.DocumentTypeUserStatus>("ConditionUserStatus"); set => SetPropertyValue<General.DocumentTypeUserStatus>("ConditionUserStatus", value); }
                [ODataProperty]
                public General.DocumentType? DestinationDocumentType { get => GetPropertyValue<General.DocumentType>("DestinationDocumentType"); set => SetPropertyValue<General.DocumentType>("DestinationDocumentType", value); }
                [ODataProperty]
                public General.EnterpriseCompany? DestinationEnterpriseCompany { get => GetPropertyValue<General.EnterpriseCompany>("DestinationEnterpriseCompany"); set => SetPropertyValue<General.EnterpriseCompany>("DestinationEnterpriseCompany", value); }
                [ODataProperty]
                public General.Contacts.CompanyLocation? DestinationEnterpriseCompanyLocation { get => GetPropertyValue<General.Contacts.CompanyLocation>("DestinationEnterpriseCompanyLocation"); set => SetPropertyValue<General.Contacts.CompanyLocation>("DestinationEnterpriseCompanyLocation", value); }
                [ODataProperty]
                public General.DocumentTypeUserStatus? DestinationUserStatus { get => GetPropertyValue<General.DocumentTypeUserStatus>("DestinationUserStatus"); set => SetPropertyValue<General.DocumentTypeUserStatus>("DestinationUserStatus", value); }
                [Owner]
                [ODataProperty]
                public General.DocumentType? DocumentType { get => GetPropertyValue<General.DocumentType>("DocumentType"); set => SetPropertyValue<General.DocumentType>("DocumentType", value); }
                [ODataProperty]
                public IEnumerable<Finance.Accounting.TemplateRouteLink>? TemplateRouteLinks { get => GetCollection<Finance.Accounting.TemplateRouteLink>("TemplateRouteLinks"); set => SetCollection<Finance.Accounting.TemplateRouteLink>("TemplateRouteLinks", value); }
                [ODataProperty]
                public IEnumerable<Finance.Accounting.Template>? Templates { get => GetCollection<Finance.Accounting.Template>("Templates"); set => SetCollection<Finance.Accounting.Template>("Templates", value); }
                [ODataProperty]
                public IEnumerable<Finance.Payments.PaymentSlipPaymentTransactionsTemplate>? PaymentSlipPaymentTransactionsTemplates { get => GetCollection<Finance.Payments.PaymentSlipPaymentTransactionsTemplate>("PaymentSlipPaymentTransactionsTemplates"); set => SetCollection<Finance.Payments.PaymentSlipPaymentTransactionsTemplate>("PaymentSlipPaymentTransactionsTemplates", value); }
                [ODataProperty]
                public IEnumerable<Crm.Sales.SalesOrderPaymentOrdersTemplate>? SalesOrderPaymentOrdersTemplates { get => GetCollection<Crm.Sales.SalesOrderPaymentOrdersTemplate>("SalesOrderPaymentOrdersTemplates"); set => SetCollection<Crm.Sales.SalesOrderPaymentOrdersTemplate>("SalesOrderPaymentOrdersTemplates", value); }
                [ODataProperty]
                public IEnumerable<Applications.Rental.TransactionTemplate>? TransactionTemplates { get => GetCollection<Applications.Rental.TransactionTemplate>("TransactionTemplates"); set => SetCollection<Applications.Rental.TransactionTemplate>("TransactionTemplates", value); }
                public async System.Threading.Tasks.Task CreateNotificationAsync(DomainApiService service, Systems.Security.User user, String notificationClass, String subject) { await this.InvokeActionAsync(service, "CreateNotification", new Param<Systems.Security.User>("user", user), new Param<String>("notificationClass", notificationClass), new Param<String>("subject", subject)); }
                public async System.Threading.Tasks.Task<EntityResource?> CreateCopyAsync(DomainApiService service) { return (EntityResource?)(await this.InvokeActionAsync(service, "CreateCopy")); }
                public async System.Threading.Tasks.Task<IEnumerable<General.CustomPropertyValue>?> GetAllowedCustomPropertyValuesAsync(DomainApiService service, String customPropertyCode, String? search = null, Boolean exactMatch = false, Boolean orderByDescription = false, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<General.CustomPropertyValue>?)(await this.InvokeFunctionAsync(service, "GetAllowedCustomPropertyValues", new Param<String>("customPropertyCode", customPropertyCode), new Param<String?>("search", search), new Param<Boolean>("exactMatch", exactMatch), new Param<Boolean>("orderByDescription", orderByDescription), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
                public async System.Threading.Tasks.Task<IEnumerable<ValueTextPair>?> GetPropertyAllowedValuesAsync(DomainApiService service, String propertyName, String? search = null, Int32 top = 10, Int32 skip = 0) { return (IEnumerable<ValueTextPair>?)(await this.InvokeFunctionAsync(service, "GetPropertyAllowedValues", new Param<String>("propertyName", propertyName), new Param<String?>("search", search), new Param<Int32>("top", top), new Param<Int32>("skip", skip))); }
            }
            namespace RoutesRepository
            {
                public enum AllowedGenerationTypes
                {
                    Auto = 0,
                    BothAutoAndManually = 1,
                    Manually = 2
                }
                public enum ConnectedPartyCondition
                {
                    AnyParty = 0,
                    ConnectedParty = 1,
                    UnconnectedParty = 2
                }
            }
        }
    }
    public partial class ValueTextPair: ComplexTypeResource
    {
        public ValueTextPair(IDictionary<string, object?>? rawData = null): base(rawData) {}
        [ODataProperty]
        public String? Value { get => GetPropertyValue<String?>("Value"); set => SetPropertyValue<String?>("Value", value); }
        [ODataProperty]
        public String? Text { get => GetPropertyValue<String?>("Text"); set => SetPropertyValue<String?>("Text", value); }
    }
}
